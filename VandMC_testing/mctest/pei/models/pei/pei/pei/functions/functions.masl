//! ACTIVITY BEGIN. '5b2dd722-eec1-43c7-a8d9-ca28f0be7d11' DO NOT EDIT THIS LINE.
private service pei::do_creates () is
a : instance of A;
b : instance of B;
c1 : instance of C; c2 : instance of C; c3 : instance of C; c4 : instance of C; c5 : instance of C;
d1 : instance of D; d2 : instance of D; e0 : instance of E;
e1 : instance of E; e2 : instance of E;
f1 : instance of F; f2 : instance of F; f3 : instance of F;
g1 : instance of G; g2 : instance of G; g3 : instance of G; g4 : instance of G;
h1 : instance of H; h2 : instance of H; h3 : instance of H; h4 : instance of H; h : instance of H;
i1 : instance of I; i2 : instance of I; i3 : instance of I; i4 : instance of I;
j1 : instance of J;
k1 : instance of K; k2 : instance of K; k3 : instance of K;
l1 : instance of L; l2 : instance of L; l3 : instance of L;
m1 : instance of M; m2 : instance of M; m3 : instance of M; m4 : instance of M; m5 : instance of M;
n1 : instance of N; n2 : instance of N; n3 : instance of N; n4 : instance of N; n5 : instance of N; n6 : instance of N;
o1 : instance of O; o2 : instance of O; o3 : instance of O; o4 : instance of O; o5 : instance of O;
p1 : instance of P; p2 : instance of P; p3 : instance of P;
q1 : instance of Q; q2 : instance of Q; q3 : instance of Q;
r1 : instance of R; r2 : instance of R; r3 : instance of R;
s1 : instance of S; s2 : instance of S;
t1 : instance of T; t2 : instance of T; t3 : instance of T; t4 : instance of T; t5 : instance of T;
u1 : instance of U; u2 : instance of U; u3 : instance of U; u4 : instance of U; u5 : instance of U;
v1 : instance of V; v2 : instance of V;
w1 : instance of W; w2 : instance of W; w3 : instance of W; w4 : instance of W;
x1 : instance of X; x2 : instance of X; x3 : instance of X; x4 : instance of X; x5 : instance of X; x6 : instance of X;
y1 : instance of Y; y2 : instance of Y; y3 : instance of Y; y4 : instance of Y; y5 : instance of Y; y6 : instance of Y; y7 : instance of Y; y8 : instance of Y; y9 : instance of Y;
z1 : instance of Z; z2 : instance of Z; z3 : instance of Z;
zz1 : instance of ZZ; zz2 : instance of ZZ; zz3 : instance of ZZ; zz4 : instance of ZZ; zz5 : instance of ZZ; zz6 : instance of ZZ; zz7 : instance of ZZ;

begin
// Set up instances for existence test later on.

// A R1 B
a := create A( aID => 99 ); // extras to see in PEIs
a := create A( aID => 98 );
b := create B( bID => 2, i => 2 );
a := create A( aID => 1, i => 1, bID => b.bID );
link a R1 b;
b := create B( bID => 4, i => 4 );
a := create A( aID => 3, i => 3, bID => b.bID );
link a R1 b;
b := create B( bID => 6, i => 6 );
a := create A( aID => 5, i => 5, bID => b.bID );
link a R1 b;
b := create B( bID => 8 ); // extra to see it in PEIs

// C R2 D
d1 := create D( dID => 1 ); // extra
d2 := create D( dID => 2, name => "DeeTwo" );
c1 := create C( cID => 1, dID => d2.dID );
c2 := create C( cID => 2, dID => d2.dID );
c3 := create C( cID => 3, dID => d2.dID );
c4 := create C( cID => 4, dID => d2.dID );
c5 := create C( cID => 5 ); // extra
link c1 R2 d2;
link d2 R2 c2;
link d2 R2 c3;
link c4 R2 d2;

// E R3 F using G
e0 := create E( eID => 100, ratio => 0.1 );
e1 := create E( eID => 1, ratio => 3.14 );
e2 := create E( eID => 2, ratio => 2.718 );
f3 := create F( fID => 3, enabled => true );
f2 := create F( fID => 2, enabled => false );
f1 := create F( fID => 1, enabled => true );
g1 := create G( gID => 1, eID => e1.eID, fID => f1.fID );
g2 := create G( gID => 2, eID => e1.eID, fID => f2.fID );
g3 := create G( gID => 3, eID => e2.eID, fID => f3.fID );
g4 := create G( gID => 4, eID => e1.eID, fID => f3.fID );
link e1 R3 f1 using g1;
link f2 R3 e1 using g2;
link f3 R3 e2 using g3;
link e1 R3 f3 using g4;

// H R4 (reflexive)
h1 := create H( hID => 1 );
h2 := create H( hID => 2, follows => h1.hID );
h := create H( hID => 99 ); // extra to see in PEIs
h3 := create H( hID => 3, follows => h2.hID );
h4 := create H( hID => 4, follows => h3.hID );
link h1 R2.precedes h2;
link h2 R2.precedes h3;
link h4 R2.follows h3;

// I R5 J, K R6 L
i4 := create I( iID => 400, common => 400 );
i3 := create I( iID => 300, common => 300 );
i2 := create I( iID => 200, common => 200 );
i1 := create I( iID => 100, common => 100 );
j1 := create J( jID => 2, specialJ => 2, iID = i1.iID );
k1 := create K( kID => 11, specialcommon => 11, iID = i4.iID );
k2 := create K( kID => 22, specialcommon => 22, iID = i3.iID );
k3 := create K( kID => 33, specialcommon => 33, iID = i2.iID );
l2 := create L( lID => 222, specialL => 222, kID = k3.iID );
l3 := create L( lID => 333, specialL => 333, kID = k2.iID );
l1 := create L( lID => 111, specialL => 111, kID = k1.iID );
link i1 R5 j1;
link i2 R5 k3;
link k2 R5 i3;
link i4 R5 k1;
link l1 R6 k1;
link l3 R6 k2;
link k3 R5 l2;

// O R8 reflexive
o2 := create O( oID => 2, voo => "Cort", teacheroID => o2.OID );
o1 := create O( oID => 1, voo => "Kenny" );
o3 := create O( oID => 3, voo => "Amy", teacheroID => o1.OID );
o4 := create O( oID => 4, voo => "Ellen", teacheroID => o1.OID );
o5 := create O( oID => 5, voo => "Brad", teacheroID => o1.OID );
link o1 R8.teaches o2; // Kenny teaches Cort.
link o2 R8.teaches o3; // Cort teaches Amy.
link o4 R8.learns_from o2; // Ellen learns from Cort.
link o5 R8.learns_from o2; // Brad learns from Cort.

// N R7 reflexive using M
n1 := create N( nID => 1, name => "Pete" );
n2 := create N( nID => 2, name => "Dave" );
n3 := create N( nID => 3, name => "Alex" );
n4 := create N( nID => 4, name => "Jenn" );
n5 := create N( nID => 5, name => "Cale" );
n6 := create N( nID => 6, name => "Chris" );
m1 := create M( mID => 1, department => "SW", works_for_nID => n1.nID, manages_nID => n3.nID );
m2 := create M( mID => 2, department => "SW", works_for_nID => n1.nID, manages_nID => n4.nID );
m3 := create M( mID => 3, department => "HW", works_for_nID => n2.nID, manages_nID => n5.nID );
m4 := create M( mID => 4, department => "MEC", works_for_nID => n6.nID, manages_nID => n1.nID );
m5 := create M( mID => 5, department => "MEC", works_for_nID => n6.nID, manages_nID => n2.nID );
link n1 R7.manages n3 using m1;   // Pete manages Alex.
link n1 R7.manages n4 using m2;   // Pete manages Jenn.
link n5 R7.works_for n2 using m3; // Cale works for Dave.
link n1 R7.works_for n6 using m4; // Pete works for Chris.
link n6 R7.manages n2 using m5;   // Chris manages Dave.

// P R9 Q using R
p1 := create P( eyedee => "Rox" );
p2 := create P( eyedee => "Bita" );
p3 := create P( eyedee => "Tina" );
q1 := create Q( deeeye => "Shane" );
q2 := create Q( deeeye => "Rusty" );
q3 := create Q( deeeye => "Cort" );
r1 := create R( city => "Indianapolis", pID => p1.eyedee, qID => q3.deeeye );
r2 := create R( city => "Lockport", pID => p3.eyedee, qID => q1.deeeye );
r3 := create R( city => "Battleground", pID => p2.eyedee, qID => q2.deeeye );
link p1 R9 q3 using r1;
link q2 R9 p2 using r3;
link p3 R9 q1 using r2;

// S R10 T using U
s1 := create S( s => "Rox" );
s2 := create S( s => "Jacqui" );
t1 := create T( t => "Clare" );
t2 := create T( t => "Katrina" );
t3 := create T( t => "Colleen" );
t4 := create T( t => "Hannah" );
t5 := create T( t => "Ruby" );
u5 := create U( s => "Oct", sID => s2.sID, tID => t1.tID );
u4 := create U( s => "Aug", sID => s2.sID, tID => t2.tID );
u3 := create U( s => "Apr", sID => s2.sID, tID => t3.tID );
u2 := create U( s => "Dec", sID => s1.sID, tID => t4.tID );
u1 := create U( s => "Nov", sID => s1.sID, tID => t5.tID );
link s1 R10 t4 using u2;
link s1 R10 t5 using u1;
link t1 R10 s2 using u5;
link t2 R10 s2 using u4;
link s2 R10 t3 using u3;

// W R11 reflexive using V
w1 := create W( name => "Cort" );
w2 := create W( name => "Rox" );
w3 := create W( name => "Sean" );
w4 := create W( name => "Jacqui" );
v1 := create V( year => 1988, husband => w1.name, wife => w2.name );
v2 := create V( year => 1990, husband => w3.name, wife => w4.name );
link w1 R11.is_husband of w2 using v1;
link w4 R11.is_wife_of w3 using v2;

// friends and friendships
x1 := create X( name => "Cort", age => 39 );
x2 := create X( name => "Rox", age => 38 );
x3 := create X( name => "Sevina", age => 35 );
x4 := create X( name => "Joe", age => 43 );
x5 := create X( name => "Scott", age => 42 );
x6 := create X( name => "Jason", age => 31 );
y1 := create Y( duration => 1, closeness => 10, buddy => x1.name, pal => x2.name );
y2 := create Y( duration => 2, closeness => 20, buddy => x3.name, pal => x1.name );
y3 := create Y( duration => 3, closeness => 30, buddy => x4.name, pal => x1.name );
y4 := create Y( duration => 4, closeness => 40, buddy => x5.name, pal => x1.name );
y5 := create Y( duration => 5, closeness => 50, buddy => x1.name, pal => x6.name );
y6 := create Y( duration => 6, closeness => 60, buddy => x2.name, pal => x3.name );
y7 := create Y( duration => 7, closeness => 70, buddy => x4.name, pal => x5.name );
y8 := create Y( duration => 8, closeness => 80, buddy => x6.name, pal => x4.name );
y9 := create Y( duration => 9, closeness => 90, buddy => x6.name, pal => x5.name );
// friends of Cort
link x1 R12.is_buddy_of x2 using y1;
link x1 R12.is_pal_of x3 using y2;
link x4 R12.is_buddy_of x1 using y3;
link x5 R12.is_pal_of x1 using y4;
link x1 R12.is_buddy_of x6 using y5;
// friends of Rox
link x3 R12.is_pal_of x2 using y6;
// friends of Joe
link x4 R12.is_buddy_of x5 using y7;
link x4 R12.is_pal_of x6 using y8;
// friends of Scott
link x6 R12.is_buddy_of x5 using y9;


// dealers and deals
z1 := create Z( name => "Joe", worth => 1 );
z2 := create Z( name => "Pat", worth => 2 );
z3 := create Z( name => "Jason", worth => 3 );
zz1 := create ZZ( xaction => 1, value => -1, buyer => z2.name, seller => z1.name );
zz2 := create ZZ( xaction => 2, value => 2, buyer => z1.name, seller => z3.name );
zz3 := create ZZ( xaction => 3, value => -3, buyer => z3.name, seller => z2.name );
zz4 := create ZZ( xaction => 4, value => 4, buyer => z3.name, seller => z1.name );
zz5 := create ZZ( xaction => 5, value => -5, buyer => z1.name, seller => z2.name );
zz6 := create ZZ( xaction => 6, value => 6, buyer => z2.name, seller => z3.name );
zz7 := create ZZ( xaction => 7, value => -7, buyer => z2.name, seller => z1.name );
link z1 R13.sells_to z2 using zz1;
link z1 R13.buys_from z3 using zz2;
link z2 R13.sells_to z3 using zz3;
link z3 R13.buys_from z1 using zz4;
link z2 R13.sells_to z1 using zz5;
link z2 R13.buys_from z3 using zz6;
link z1 R13.sells_to z2 using zz7;

end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'ee0b21c6-3e1f-4b2b-9441-00b6e64ca6eb' DO NOT EDIT THIS LINE.
private service pei::setup () is
// 
// Check to see if any instances are already here.
// This would mean that we have restored from NVS
// or that preexisting instances were defined in data.
//

select any a from instances of A;
if ( empty a )

  //
  // Set up instances for existance test later on.
  //

  ::do_creates();

end if;   // if empty a
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'b6ece4d0-3a14-4e5a-87e6-23378a779c47' DO NOT EDIT THIS LINE.
private service pei::test () is
//
// Test that an instance of A already exists.
//

select any a from instances of A;
if (empty a)
  LOG::LogFailure( message:"test1.20:  Failed to select a." );
end if;

select many as from instances of A;
if (cardinality as != 5)
  LOG::LogFailure( message:"test1.21:  Wrong number of As." );
end if;
select many as_again from instances of A;
if ( as != as_again )
  LOG::LogFailure( message:"set of As and As_again do not match." );
end if;

create object instance a1 of A; a1.i = 101;
select any a from instances of A where (selected.i == 1);
if (empty a)
  LOG::LogFailure( message:"test1.22:  Failed to select a where." );
end if;
delete object instance a1;

select any b from instances of B where (selected.i == 20);
if (not empty b)
  LOG::LogFailure( message:"test1.23:  Selected non-existant B." );
end if;

select any b from instances of B where (selected.i == 2);
if (empty b)
  LOG::LogFailure( message:"test1.24:  Failed to select b where." );
end if;

//
// Test that there is a B related to this A.
//
select any a from instances of A where (selected.i == 3);
select one b related by a->B[R1];
if (empty b)
  LOG::LogFailure( message:"test1.40:  Failed to select b across R1." );
end if;
if (b.i != 4)
  LOG::LogFailure( message:"test1.41:  Selected wrong b across R1." );
  if ( a.bID != b.bID )
    LOG::LogFailure( message:"test1.42:  A/B referential mismatch" );
  end if;
end if;
select one same_a related by a->B[R1]->A[R1];
if ( empty same_a )
  LOG::LogFailure( message:"test1.43:  Did not find a out and back across R1." );
else
  if ( a != same_a )
    LOG::LogFailure( message:"test1.43a:  a and same_a not the same." );
  end if;
end if;

//
// Test that there is an A related to this B.
//
select one a related by b->A[R1];
if (empty a)
  LOG::LogFailure( message:"test1.44:  Failed to select a across R1." );
end if;
if (a.i != 3)
  LOG::LogFailure( message:"test1.45:  Selected wrong a across R1." );
end if;
unrelate a from b across R1;
relate a to b across R1;

//
// Test for a D.
//
select any d from instances of D where ( selected.name == "DeeTwo" );
if (empty d)
  LOG::LogFailure( message:"test1.52:  Failed to select d from Ds.");
end if;

//
// Test for many Cs related to D.
//
select many cs related by d->C[R2];
if ( cardinality cs != 4 )
  LOG::LogFailure( message:"test1.62:  Failed to select Cs from D.");
end if;
for each c in cs
  select one d related by c->D[R2];
  if ( d.name != "DeeTwo" )
    LOG::LogFailure( message:"test1.63:  Failed to select D from C.");
  end if;
  if ( c.dID != d.dID )
    LOG::LogFailure( message:"test1.64:  C/D referential mismatch");
  end if;
end for;

//
// Test associatives.
//
select any e from instances of E where ( selected.eID == 2 );
if ( empty e )
  LOG::LogFailure( message:"test1.70:  Failed to select E.");
end if;
select any f related by e->F[R3];
if ( empty f )
  LOG::LogFailure( message:"test1.71:  Failed to select F.");
  if ( f.fID != 3 )
    LOG::LogFailure( message:"test1.72:  Selected wrong F across R3.");
  end if;
end if;
select many es related by f->E[R3];
if ( cardinality es != 2 )
  LOG::LogFailure( message:"test1.73:  Selected wrong count of Fs.");
end if;
select any g related by e->G[R3];
if ( g.gID != 3 )
  LOG::LogFailure( message:"test1.74:  Selected incorrect G.");
end if;
if ( ( g.eID != e.eID ) or ( g.fID != f.fID ) )
  LOG::LogFailure( message:"test1.75:  E/F/G referential mismatch.");
end if;
for each e in es
  if ( ( e.eID != 1 ) and ( e.eID != 2 ) )
    LOG::LogFailure( message:"test1.76:  Selected incorrect Es.");
  end if;
end for;

//
// Test reflexives.
//
select any h1 from instances of H where ( selected.hID == 1 );
if ( empty h1 )
  LOG::LogFailure( message:"test1.80:  Failed to select H.");
end if;
select one h2 related by h1->H[R4.'precedes'];
if ( h2.hID != 2 )
  LOG::LogFailure( message:"test1.81:  Selected incorrect H.");
end if;
if ( h1.hID != h2.follows )
  LOG::LogFailure( message:"test1.81a:  H referential mismatch");
end if;
select one h3 related by h2->H[R4.'precedes'];
if ( h3.hID != 3 )
  LOG::LogFailure( message:"test1.82:  Selected incorrect H.");
end if;
if ( h2.hID != h3.follows )
  LOG::LogFailure( message:"test1.82a:  H referential mismatch");
end if;
select one h related by h1->H[R4.'precedes']->H[R4.'precedes'];
if ( h.hID != 3 )
  LOG::LogFailure( message:"test1.83:  Selected incorrect H.");
end if;
select one h related by h3->H[R4.'follows']->H[R4.'follows'];
if ( h.hID != 1 )
  LOG::LogFailure( message:"test1.84:  Selected incorrect H.");
end if;
select any h from instances of H where ( selected.hID == 2 );
if ( empty h )
  LOG::LogFailure( message:"test1.85:  Failed to select H.");
end if;
select one hp related by h->H[R4.'follows'];
if ( hp.hID != 1 )
  LOG::LogFailure( message:"test1.86:  Selected incorrect H.");
end if;
if ( hp.hID != h.follows )
  LOG::LogFailure( message:"test1.86a:  H referential mismatch");
end if;
select one hf related by h->H[R4.'precedes'];
if ( hf.hID != 3 )
  LOG::LogFailure( message:"test1.87:  Selected incorrect H.");
end if;
select one h related by h3->H[R4.'precedes'];
if ( h.hID != 4 )
  LOG::LogFailure( message:"test1.88:  Selected incorrect H.");
end if;
if ( h3.hID != h.follows )
  LOG::LogFailure( message:"test1.88a:  H referential mismatch");
end if;

//
// Test sub/supers.
//
select any i from instances of I where ( selected.iID == 200 );
if ( empty i )
  LOG::LogFailure( message:"test1.90:  Failed to select I.");
end if;
select one k related by i->K[R5];
if ( empty k )
  LOG::LogFailure( message:"test1.91:  Failed to select K.");
else
  if ( k.kID != 33 )
    LOG::LogFailure( message:"test1.92:  Selected incorrect K.");
  end if;
  if ( i.iID != k.iID )
    LOG::LogFailure( message:"test1.92a:  I/K referential mismatch");
  end if;
end if;
select one l related by i->K[R5]->L[R6];
if ( empty l )
  LOG::LogFailure( message:"test1.93:  Failed to select L.");
else
  if ( l.lID != 222 )
    LOG::LogFailure( message:"test1.94:  Selected incorrect L.");
  end if;
  if ( l.kID != k.kID )
    LOG::LogFailure( message:"test1.94a:  L/K referential mismatch");
  end if;
end if;

//
// Test reflexive asymmetrics.
//
select any o from instances of O where ( selected.voo == "Cort" );
select many os related by o->O[R8.'teaches'];
if ( cardinality os != 3 )
  LOG::LogFailure( message:"test1.C2:  Failed to select Os.");
end if;
select one o1 related by o->O[R8.'learns_from'];
if ( o1.voo != "Kenny" )
  LOG::LogFailure( message:"test1.C3:  Selected incorrect O.");
else
  if ( o.teacheroID != o1.oID )
    LOG::LogFailure( message:"test1.C3a:  O referential mismatch");
  end if;
end if;
select any o from instances of O where ( selected.voo == "Ellen" );
select one o1 related by o->O[R8.'learns_from'];
if ( o1.voo != "Cort" )
  LOG::LogFailure( message:"test1.C4:  Selected incorrect O.");
else
  if ( o.teacheroID != o1.oID )
    LOG::LogFailure( message:"test1.C4a:  O referential mismatch");
  end if;
end if;
select any o from instances of O where ( selected.voo == "Amy" );
select one o1 related by o->O[R8.'learns_from'];
if ( o1.voo != "Cort" )
  LOG::LogFailure( message:"test1.C5:  Selected incorrect O.");
else
  if ( o.teacheroID != o1.oID )
    LOG::LogFailure( message:"test1.C5a:  O referential mismatch");
  end if;
end if;

//
// Test reflexive associatives.
//
select any n from instances of N where ( selected.name == "Chris" );
select many ns related by n->N[R7.'manages'];
if ( cardinality ns != 2 )
  LOG::LogFailure( message:"test1.B2:  Failed to select Ns.");
end if;
create object instance n1 of N;
create object instance n2 of N;
delete object instance n2;
n1.name = "Vijay";
for each n in ns
  if ( n.name != "Dave" ) and ( n.name != "Pete" )
    LOG::LogFailure( message:"test1.B3:  Selected incorrect Ns.");
  end if;
end for;
delete object instance n1;
select any n from instances of N where ( selected.name == "Pete" );
select one boss related by n->N[R7.'works_for'];
if ( empty boss )
  LOG::LogFailure( message:"test1.B4:  Failed to select boss.");
else
  if ( boss.name != "Chris" )
    LOG::LogFailure( message:"test1.B5:  Selected incorrect boss.");
  end if;
end if;
select any n from instances of N where ( selected.name == "Dave" );
select one m related by n->M[R7.'works_for'];
if ( empty m )
  LOG::LogFailure( message:"test1.B6:  Failed to select M.");
  if ( m.department != "MEC" )
    LOG::LogFailure( message:"test1.B7:  Selected incorrect department.");
  else
    if ( m.works_for_nID != n.nID )
      LOG::LogFailure( message:"test1.B7a:  M/N referential mismatch");
    end if;
  end if;
end if;
select any n from instances of N where ( selected.name == "Pete" );
select many ns related by n->N[R7.'manages'];
if ( cardinality ns != 2 )
  LOG::LogFailure( message:"test1.B2:  Failed to select Ns.");
end if;
for each n in ns
  if ( n.name != "Alex" ) and ( n.name != "Jenn" )
    LOG::LogFailure( message:"test1.B3:  Selected incorrect Ns.");
  end if;
end for;


//
// Test 1-1 associatives.
//
select any p from instances of P where ( selected.eyedee == "Rox" );
select one q related by p->Q[R9];
if ( q.deeeye != "Cort" )
  LOG::LogFailure( message:"test1.D1:  Selected incorrect Q.");
end if;
select any q from instances of Q where ( selected.deeeye == "Rusty" );
select one p related by q->P[R9];
if ( p.eyedee != "Bita" )
  LOG::LogFailure( message:"test1.D2:  Selected incorrect P.");
end if;
select any p from instances of P where ( selected.eyedee == "Tina" );
select one r related by p->R[R9];
if ( r.city != "Lockport" )
  LOG::LogFailure( message:"test1.D3:  Selected incorrect R.");
else
  if ( p.pID != r.pID )
    LOG::LogFailure( message:"test1.D3a:  P/R referential mismatch");
  end if;
end if;

//
// Test 1-M associatives.
//
select any s from instances of S where ( selected.s == "Rox" );
select many ts related by s->T[R10];
if ( cardinality ts != 2 )
  LOG::LogFailure( message:"test1.E1:  Incorrect number of Ts.");
end if;
for each t in ts
  if ( ( t.t != "Hannah" ) and ( t.t != "Ruby" ) )
    LOG::LogFailure( message:"test1.E2:  Incorrect T.");
  end if;
  select one s related by t->S[R10];
  if ( s.s != "Rox" )
    LOG::LogFailure( message:"test1.E3:  Incorrect S.");
  end if;
end for;
select any t from instances of T where ( selected.t == "Katrina" );
select one s related by t->S[R10];
select any u related by s->U[R10] where ( selected.s == "Aug" );
if ( empty u )
  LOG::LogFailure( message:"test1.E4:  Incorrect U.");
else
  if ( s.sID != u.sID )
    LOG::LogFailure( message:"test1.E4a:  S/U referential mismatch");
  end if;
end if;

//
// Test 1-1 reflexive associatives.
//
select any w from instances of W where ( selected.name == "Rox" );
select one husband related by w->W[R11.'is_wife_of'];
if ( husband.name != "Cort" )
  LOG::LogFailure( message:"test1.F1:  Incorrect W.");
end if;
select any w from instances of W where ( selected.name == "Jacqui" );
select one husband related by w->W[R11.'is_wife_of'];
if ( husband.name != "Sean" )
  LOG::LogFailure( message:"test1.F2:  Incorrect W.");
end if;
select any huz from instances of W where ( selected.name == "Cort" );
select one wife related by huz->W[R11.'is_husband_of'];
if ( wife.name != "Rox" )
  LOG::LogFailure( message:"test1.F3:  Incorrect W.");
end if;
select any v from instances of V where ( selected.year == 1988 );
if ( ( v.husband != "Cort" ) or ( v.wife != "Rox" ) )
  LOG::LogFailure( message:"test1.F4:  Incorrect V or referential mismatch." );
end if;

// Test friends and friendships.
// (Note that this should be symmetric reflexive, but we don't know how.)
//
select any x from instances of X where ( selected.name == "Cort" );
if ( empty x )
  LOG::LogFailure( message:"test1.X1:  Failed to select X." );
end if;
select many xs related by x->X[R12.'is_pal_of'];
cardxs = cardinality xs;
select many xs related by x->X[R12.'is_buddy_of'];
cardxs = cardxs + cardinality xs;
if ( cardxs != 5 )
  LOG::LogFailure( message:"test1.X2:  Wrong number of friends." );
end if;
select many ys from instances of Y where ( selected.pal == "Cort" )
  or ( selected.buddy == "Cort" );
if ( cardinality ys != 5 )
  LOG::LogFailure( message:"test1.Y3:  Wrong number of friends." );
end if;
// Test Sevina's friends.
select any x from instances of X where ( selected.name == "Sevina" );
if ( empty x )
  LOG::LogFailure( message:"test1.X4:  Failed to select X." );
end if;
select any x1 related by x->X[R12.'is_pal_of'];
if ( x1.name != "Rox" )
  LOG::LogFailure( message:"test1.X5:  Could not find Rox." );
end if;
select any x from instances of X where ( selected.name == "Rox" );
if ( empty x )
  LOG::LogFailure( message:"test1.X6:  Failed to select X." );
end if;
select any x1 related by x->X[R12.'is_buddy_of'];
if ( x1.name != "Sevina" )
  LOG::LogFailure( message:"test1.X6:  Could not find Sevina." );
end if;
select any y from instances of Y;
select one x related by y->X[R12.'is_pal_of'];
if ( x.name != y.pal )
  LOG::LogFailure( message:"test1.X6a:  X/Y referential mismatch" );
end if;
select one x related by y->X[R12.'is_buddy_of'];
if ( x.name != y.buddy )
  LOG::LogFailure( message:"test1.X6b:  X/Y referential mismatch" );
end if;


//
// Test dealers and deals.
//
select any z from instances of Z where ( selected.name == "Joe" );
if ( empty z )
  LOG::LogFailure( message:"test1.Z1:  Failed to select Z." );
end if;
select many zs related by z->Z[R13.'buys_from'];
if ( cardinality zs < 2 )
  LOG::LogFailure( message:"test1.Z2:  Could not find Zs." );
end if;
select any zz from instances of ZZ;
select one z related by zz->Z[R13.'buys_from'];
if ( zz.buyer != z.name )
  LOG::LogFailure( message:"test1.Z2a:  Z/ZZ referential mismatch" );
end if;
select one z related by zz->Z[R13.'sells_to'];
if ( zz.seller != z.name )
  LOG::LogFailure( message:"test1.Z2b:  Z/ZZ referential mismatch" );
end if;

LOG::LogSuccess( message:"Made it to the end." );
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '3478bf0f-b428-4b52-b41a-0ce97241c99b' DO NOT EDIT THIS LINE.
private service pei::test1 () is
//
// Generate an event to be sure that b is in the correct current state.
//
select any b from instances of B;
generate B1:go() to b;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'a20db3d4-77d0-47da-9b8c-6d6a1d4dabf2' DO NOT EDIT THIS LINE.
private service pei::test2 () is
// Do some creates and deletes to to exercise storage.
// But delete everything created.

create object instance a of A;
delete object instance a;

create object instance a of A;
create object instance b of B;
relate a to b across R1;
create object instance c of C;
create object instance d of D;
relate c to d across R2;
create object instance y of Y;
create object instance z of Z;

unrelate c from d across R2;
unrelate a from b across R1;

delete object instance a;
delete object instance b;
delete object instance z;
delete object instance y;
delete object instance c;
delete object instance d;

create object instance n of N;
delete object instance n;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '888d97ee-40a0-4baa-8ca8-41c7678e8e7d' DO NOT EDIT THIS LINE.
private service pei::xit () is
ARCH::shutdown();
//! ACTIVITY END. DO NOT EDIT THIS LINE.

