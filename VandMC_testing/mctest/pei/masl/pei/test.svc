private service pei::test () is
a : instance of plug; a1 : instance of plug; same_a : instance of plug; as : set of instance of plug; as_again : set of instance of plug;
b : instance of socket;
c : instance of dog; cs : set of instance of dog;
d : instance of dog_owner;
e : instance of host; es : set of instance of host;
f : instance of device; 
g : instance of connection;
h : instance of transmission; h1 : instance of transmission; h2 : instance of transmission; h3 : instance of transmission; hp : instance of transmission; hf : instance of transmission;
i : instance of car;
k : instance of sports_car;
l : instance of convertible;
m : instance of report_line;
n : instance of employee; n1 : instance of employee; n2 : instance of employee; boss : instance of employee; ns : set of instance of employee;
o : instance of group_member; o1 : instance of group_member; os : set of instance of group_member;
p : instance of automobile;
q : instance of jurisdiction;
r : instance of license;
s : instance of AtoD_converter;
t : instance of analog_input; ts : set of instance of analog_input;
u : instance of sample;
v : instance of marriage;
w : instance of person; husband : instance of person; huz : instance of person; wife : instance of person;
x : instance of friend; x1 : instance of friend; xs : set of instance of friend;
y : instance of friendship; ys : set of instance of friendship;
z : instance of dealer; zs : set of instance of dealer;
zz : instance of deal;
cardxs : integer;

begin
//
// Test that an instance of A already exists.
//

if ( null = find_one plug() ) then
  LOG::LogFailure( "test1.20:  Failed to select a." );
end if;

as := find_all plug();
if ( as'length /= 5 ) then
  LOG::LogFailure( "test1.21:  Wrong number of As." );
end if;
as_again := find_all plug();
if ( as /= as_again ) then
  LOG::LogFailure( "set of As and As_again do not match." );
end if;

a1 := create plug( i => 101 );
if ( find_one plug( i = 1 ) = null ) then
  LOG::LogFailure( "test1.22:  Failed to select a where." );
end if;
delete a1;

if ( null /= find_one socket( i = 20 ) ) then
  LOG::LogFailure( "test1.23:  Selected non-existant B." );
end if;

if ( null = find_one socket( i = 2 ) ) then
  LOG::LogFailure( "test1.24:  Failed to select b where." );
end if;

//
// Test that there is a B related to this A.
//
a := find_one plug( i = 3 );
b := a->R1;
if ( null = b ) then
  LOG::LogFailure( "test1.40:  Failed to select b across R1." );
end if;
if ( b.i /= 4 ) then
  LOG::LogFailure( "test1.41:  Selected wrong b across R1." );
  if ( a.bID /= b.bID ) then
    LOG::LogFailure( "test1.42:  A/B referential mismatch" );
  end if;
end if;
same_a := a->R1.socket->R1.plug;
if ( null = same_a ) then
  LOG::LogFailure( "test1.43:  Did not find a out and back across R1." );
else
  if ( a /= same_a ) then
    LOG::LogFailure( "test1.43a:  a and same_a not the same." );
  end if;
end if;

//
// Test that there is an A related to this B.
//
a := b->R1;
if ( null = a ) then
  LOG::LogFailure( "test1.44:  Failed to select a across R1." );
end if;
if (a.i /= 3) then
  LOG::LogFailure( "test1.45:  Selected wrong a across R1." );
end if;
unlink a R1 b;
link a R1 b;

//
// Test for a D.
//
d := find_one dog_owner( name = "DeeTwo" );
if ( null = d ) then
  LOG::LogFailure( "test1.52:  Failed to select d from Ds.");
end if;

//
// Test for many Cs related to D.
//
cs := d->R2.dog;
if ( cs'length /= 4 ) then
  LOG::LogFailure( "test1.62:  Failed to select Cs from D.");
end if;
for c in cs'elements loop
  d := c->R2;
  if ( d.name /= "DeeTwo" ) then
    LOG::LogFailure( "test1.63:  Failed to select D from C.");
  end if;
  if ( c.dID /= d.dID ) then
    LOG::LogFailure( "test1.64:  C/D referential mismatch");
  end if;
end loop;

//
// Test associatives.
//
e := find_one host( eID = 2 );
if ( null = e ) then
  LOG::LogFailure( "test1.70:  Failed to select E.");
end if;
f := find_one ( e->R3.device )();
if ( null = f ) then
  LOG::LogFailure( "test1.71:  Failed to select F.");
else
  if ( f.fID /= 3 ) then
    LOG::LogFailure( "test1.72:  Selected wrong F across R3.");
  end if;
end if;
es := f->R3.host;
if ( es'length /= 2 ) then
  LOG::LogFailure( "test1.73:  Selected wrong count of Fs.");
end if;
g := find_one( e->R3.connection )();
if ( g.gID /= 3 ) then
  LOG::LogFailure( "test1.74:  Selected incorrect G.");
end if;
if ( ( g.eID /= e.eID ) or ( g.fID /= f.fID ) ) then
  LOG::LogFailure( "test1.75:  E/F/G referential mismatch.");
end if;
for e in es'elements loop
  if ( ( e.eID /= 1 ) and ( e.eID /= 2 ) ) then
    LOG::LogFailure( "test1.76:  Selected incorrect Es.");
  end if;
end loop;

//
// Test reflexives.
//
h1 := find_one transmission( hID = 1 );
if ( null = h1 ) then
  LOG::LogFailure( "test1.80:  Failed to select H.");
end if;
h2 := h1->R4.precedes.transmission;
if ( h2.hID /= 2 ) then
  LOG::LogFailure( "test1.81:  Selected incorrect H.");
end if;
if ( h1.hID /= h2.follows ) then
  LOG::LogFailure( "test1.81a:  H referential mismatch");
end if;
h3 := h2->R4.precedes;
if ( h3.hID /= 3 ) then
  LOG::LogFailure( "test1.82:  Selected incorrect H.");
end if;
if ( h2.hID /= h3.follows ) then
  LOG::LogFailure( "test1.82a:  H referential mismatch");
end if;
h := h1->R4.precedes->R4.precedes;
if ( h.hID /= 3 ) then
  LOG::LogFailure( "test1.83:  Selected incorrect H.");
end if;
h := h3->R4.follows->R4.follows;
if ( h.hID /= 1 ) then
  LOG::LogFailure( "test1.84:  Selected incorrect H.");
end if;
h := find_one transmission( hID = 2 );
if ( null = h ) then
  LOG::LogFailure( "test1.85:  Failed to select H.");
end if;
hp := h->R4.follows.transmission;
if ( hp.hID /= 1 ) then
  LOG::LogFailure( "test1.86:  Selected incorrect H.");
end if;
if ( hp.hID /= h.follows ) then
  LOG::LogFailure( "test1.86a:  H referential mismatch");
end if;
hf := h->R4.precedes;
if ( hf.hID /= 3 ) then
  LOG::LogFailure( "test1.87:  Selected incorrect H.");
end if;
h := h3->R4.precedes;
if ( h.hID /= 4 ) then
  LOG::LogFailure( "test1.88:  Selected incorrect H.");
end if;
if ( h3.hID /= h.follows ) then
  LOG::LogFailure( "test1.88a:  H referential mismatch");
end if;

//
// Test sub/supers.
//
i := find_one car( iID = 200 );
if ( null = i ) then
  LOG::LogFailure( "test1.90:  Failed to select I.");
end if;
k := i->R5.sports_car;
if ( null = k ) then
  LOG::LogFailure( "test1.91:  Failed to select K.");
else
  if ( k.kID /= 33 ) then
    LOG::LogFailure( "test1.92:  Selected incorrect K.");
  end if;
  if ( i.iID /= k.iID ) then
    LOG::LogFailure( "test1.92a:  I/K referential mismatch");
  end if;
end if;
l := i->R5.sports_car->R6.convertible;
if ( null = l ) then
  LOG::LogFailure( "test1.93:  Failed to select L.");
else
  if ( l.lID /= 222 ) then
    LOG::LogFailure( "test1.94:  Selected incorrect L.");
  end if;
  if ( l.kID /= k.kID ) then
    LOG::LogFailure( "test1.94a:  L/K referential mismatch");
  end if;
end if;

//
// Test reflexive asymmetrics.
//
o := find_one group_member( voo = "Cort" );
os := o->R8.teaches.group_member;
if ( os'length /= 3 ) then
  LOG::LogFailure( "test1.C2:  Failed to select Os.");
end if;
o1 := o->R8.learns_from;
if ( o1.voo /= "Kenny" ) then
  LOG::LogFailure( "test1.C3:  Selected incorrect O.");
else
  if ( o.teacheroID /= o1.oID ) then
    LOG::LogFailure( "test1.C3a:  O referential mismatch");
  end if;
end if;
o := find_one group_member( voo = "Ellen" );
o1 := o->R8.learns_from;
if ( o1.voo /= "Cort" ) then
  LOG::LogFailure( "test1.C4:  Selected incorrect O.");
else
  if ( o.teacheroID /= o1.oID ) then
    LOG::LogFailure( "test1.C4a:  O referential mismatch");
  end if;
end if;
o := find_one group_member( voo = "Amy" );
o1 := o->R8.learns_from.group_member;
if ( o1.voo /= "Cort" ) then
  LOG::LogFailure( "test1.C5:  Selected incorrect O.");
else
  if ( o.teacheroID /= o1.oID ) then
    LOG::LogFailure( "test1.C5a:  O referential mismatch");
  end if;
end if;

//
// Test reflexive associatives.
//
n := find_one employee( name = "Chris" );
ns := n->R7.manages.employee;
if ( ns'length /= 2 ) then
  LOG::LogFailure( "test1.B2:  Failed to select Ns.");
end if;
n1 := create employee( name => "Vijay" );
n2 := create employee( name => "do not care" );
delete n2;
for n in ns'elements loop
  if ( n.name /= "Dave" ) and ( n.name /= "Pete" ) then
    LOG::LogFailure( "test1.B3:  Selected incorrect Ns.");
  end if;
end loop;
delete n1;
n := find_one employee( name = "Pete" );
boss := n->R7.works_for;
if ( null = boss ) then
  LOG::LogFailure( "test1.B4:  Failed to select boss.");
else
  if ( boss.name /= "Chris" ) then
    LOG::LogFailure( "test1.B5:  Selected incorrect boss.");
  end if;
end if;
n := find_one employee( name = "Dave" );
m := n->R7.works_for.report_line;
if ( null = m ) then
  LOG::LogFailure( "test1.B6:  Failed to select M.");
  if ( m.department /= "MEC" ) then
    LOG::LogFailure( "test1.B7:  Selected incorrect department.");
  else
    if ( m.works_for_nID /= n.nID ) then
      LOG::LogFailure( "test1.B7a:  M/N referential mismatch");
    end if;
  end if;
end if;
n := find_one employee( name = "Pete" );
ns := n->R7.manages;
if ( ns'length /= 2 ) then
  LOG::LogFailure( "test1.B2:  Failed to select Ns.");
end if;
for n in ns'elements loop
  if ( n.name /= "Alex" ) and ( n.name /= "Jenn" ) then
    LOG::LogFailure( "test1.B3:  Selected incorrect Ns.");
  end if;
end loop;


//
// Test 1-1 associatives.
//
p := find_one automobile( eyedee = "Rox" );
q := p->R9.jurisdiction;
if ( q.deeeye /= "Cort" ) then
  LOG::LogFailure( "test1.D1:  Selected incorrect Q.");
end if;
q := find_one jurisdiction( deeeye = "Rusty" );
p := q->R9.automobile;
if ( p.eyedee /= "Bita" ) then
  LOG::LogFailure( "test1.D2:  Selected incorrect P.");
end if;
p := find_one automobile( eyedee = "Tina" );
r := p->R9.license;
if ( r.city /= "Lockport" ) then
  LOG::LogFailure( "test1.D3:  Selected incorrect R.");
else
  if ( p.pID /= r.pID ) then
    LOG::LogFailure( "test1.D3a:  P/R referential mismatch");
  end if;
end if;

//
// Test 1-M associatives.
//
s := find_one AtoD_converter( s = "Rox" );
ts := s->R10.analog_input;
if ( ts'length /= 2 ) then
  LOG::LogFailure( "test1.E1:  Incorrect number of Ts.");
end if;
for t in ts'elements loop
  if ( ( t.t /= "Hannah" ) and ( t.t /= "Ruby" ) ) then
    LOG::LogFailure( "test1.E2:  Incorrect T.");
  end if;
  s := t->R10.AtoD_converter;
  if ( s.s /= "Rox" ) then
    LOG::LogFailure( "test1.E3:  Incorrect S.");
  end if;
end loop;
t := find_one analog_input( t = "Katrina" );
s := t->R10.AtoD_converter;
u := find_one( s->R10.sample )( s = "Aug" );
if ( null = u ) then
  LOG::LogFailure( "test1.E4:  Incorrect U.");
else
  if ( s.sID /= u.sID ) then
    LOG::LogFailure( "test1.E4a:  S/U referential mismatch");
  end if;
end if;

//
// Test 1-1 reflexive associatives.
//
w := find_one person( name = "Rox" );
husband := w->R11.is_wife_of;
if ( husband.name /= "Cort" ) then
  LOG::LogFailure( "test1.F1:  Incorrect W.");
end if;
w := find_one person( name = "Jacqui" );
husband := w->R11.is_wife_of;
if ( husband.name /= "Sean" ) then
  LOG::LogFailure( "test1.F2:  Incorrect W.");
end if;
huz := find_one person( name = "Cort" );
wife := huz->R11.is_husband_of.person;
if ( wife.name /= "Rox" ) then
  LOG::LogFailure( "test1.F3:  Incorrect W.");
end if;
v := find_one marriage( year = 1988 );
if ( ( v.husband /= "Cort" ) or ( v.wife /= "Rox" ) ) then
  LOG::LogFailure( "test1.F4:  Incorrect V or referential mismatch." );
end if;

// Test friends and friendships.
// (Note that this should be symmetric reflexive, but we don't know how.)
//
x := find_one friend( name = "Cort" );
if ( null = x ) then
  LOG::LogFailure( "test1.X1:  Failed to select X." );
end if;
xs := x->R12.is_pal_of.friend;
cardxs := xs'length;
xs := x->R12.is_buddy_of.friend;
cardxs := cardxs + xs'length;
if ( cardxs /= 5 ) then
  LOG::LogFailure( "test1.X2:  Wrong number of friends." );
end if;
ys := find_all friendship( ( pal = "Cort" )
  or ( buddy = "Cort" ) );
if ( ys'length /= 5 ) then
  LOG::LogFailure( "test1.Y3:  Wrong number of friends." );
end if;
// Test Sevina's friends.
x := find_one friend( name = "Sevina" );
if ( null = x ) then
  LOG::LogFailure( "test1.X4:  Failed to select X." );
end if;
x1 := find_one( x->R12.is_pal_of.friend )();
if ( x1.name /= "Rox" ) then
  LOG::LogFailure( "test1.X5:  Could not find Rox." );
end if;
x := find_one friend( name = "Rox" );
if ( null = x ) then
  LOG::LogFailure( "test1.X6:  Failed to select X." );
end if;
x1 := find_one( x->R12.is_buddy_of.friend )();
if ( x1.name /= "Sevina" ) then
  LOG::LogFailure( "test1.X6:  Could not find Sevina." );
end if;
y := find_one friendship();
x := y->R12.is_pal_of.friend;
if ( x.name /= y.pal ) then
  LOG::LogFailure( "test1.X6a:  X/Y referential mismatch" );
end if;
x := y->R12.is_buddy_of.friend;
if ( x.name /= y.buddy ) then
  LOG::LogFailure( "test1.X6b:  X/Y referential mismatch" );
end if;


//
// Test dealers and deals.
//
z := find_one dealer( name = "Joe" );
if ( null = z ) then
  LOG::LogFailure( "test1.Z1:  Failed to select Z." );
end if;
zs := z->R13.buys_from.dealer;
if ( zs'length < 2 ) then
  LOG::LogFailure( "test1.Z2:  Could not find Zs." );
end if;
zz := find_one deal();
z := zz->R13.buys_from;
if ( zz.buyer /= z.name ) then
  LOG::LogFailure( "test1.Z2a:  Z/ZZ referential mismatch" );
end if;
z := zz->R13.sells_to.dealer;
if ( zz.seller /= z.name ) then
  LOG::LogFailure( "test1.Z2b:  Z/ZZ referential mismatch" );
end if;

LOG::LogSuccess( "Made it to the end." );
end service;
