-- root-types-contained: Package_c
-- BP 7.1 content: StreamData syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000029",'Object_With_Integers',2,'INT','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000034",'Object_Into_Bridge',3,'OIB',' Pass the instance handle of this object into a bridge
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-00000000003f",'Report_Data',4,'RD','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-00000000004a",'Test_Data',5,'TD',' Object containg the test data.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000055",'Object_With_Reals',6,'RL','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000060",'Final_Test_Data',7,'FTD','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-00000000006b",'An_Active_Object',8,'AAO','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000076",'Object_With_Enumerators',9,'ENUM','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000001f4","00000000-0000-0000-0000-000000000029","00000000-0000-0000-0000-000000000000",'','','','First_Integer',0,"00000000-0000-0000-0000-0000000000b5",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000001fa","00000000-0000-0000-0000-000000000029","00000000-0000-0000-0000-0000000001f4",'','','','Second_Integer',0,"00000000-0000-0000-0000-0000000000b9",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000200","00000000-0000-0000-0000-000000000029","00000000-0000-0000-0000-0000000001fa",'','','','Third_Integer',0,"00000000-0000-0000-0000-0000000000a8",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000206","00000000-0000-0000-0000-000000000029","00000000-0000-0000-0000-000000000200",'','','','Fourth_Integer',0,"00000000-0000-0000-0000-0000000000ac",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000020c","00000000-0000-0000-0000-000000000029","00000000-0000-0000-0000-000000000206",'','','','Fifth_Integer',0,"00000000-0000-0000-0000-0000000000bd",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000212","00000000-0000-0000-0000-000000000029","00000000-0000-0000-0000-00000000020c",'','','','Sixth_Integer',0,"00000000-0000-0000-0000-0000000000c1",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000218","00000000-0000-0000-0000-000000000029","00000000-0000-0000-0000-000000000212",'','','','Unique_Identifier',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000220","00000000-0000-0000-0000-000000000034","00000000-0000-0000-0000-000000000000",'','','','Unique_Identifier',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000228","00000000-0000-0000-0000-000000000034","00000000-0000-0000-0000-000000000220",'','','','A_Number',0,"00000000-0000-0000-0000-0000000000b5",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000022e","00000000-0000-0000-0000-000000000034","00000000-0000-0000-0000-000000000228",'','','','Some_Enumeration',0,"00000000-0000-0000-0000-00000000008b",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000237","00000000-0000-0000-0000-000000000034","00000000-0000-0000-0000-00000000022e",'','','','current_state',0,"ba5eda7a-def5-0000-0000-000000000006",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000274","00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-000000000000",'','','','Report_Data_Unique_id',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000027c","00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-000000000274",'','','','Reported_Domain_Number',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000282","00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-000000000000",'','','','Testing_For_What',0,"ba5eda7a-def5-0000-0000-000000000004",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000288","00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-000000000282",'','','','The_Test_Number',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000028e","00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-000000000000",'','','','Unique_Identifier',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000296","00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-00000000028e",'','','','First_Real',0,"00000000-0000-0000-0000-0000000000c5",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000029c","00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-000000000296",'','','','Second_Real',0,"00000000-0000-0000-0000-0000000000c9",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000002a2","00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-00000000029c",'','','','Third_Real',0,"00000000-0000-0000-0000-0000000000cd",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000002a8","00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-0000000002a2",'','','','Fourth_Real',0,"00000000-0000-0000-0000-0000000000d1",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000002ae","00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-0000000002a8",'','','','Fifth_Real',0,"00000000-0000-0000-0000-0000000000d5",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000002b4","00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-0000000002ae",'','','','Sixth_Real',0,"00000000-0000-0000-0000-0000000000d9",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000002be","00000000-0000-0000-0000-000000000060","00000000-0000-0000-0000-000000000000",'','','','Final_Test_Number',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000002c4","00000000-0000-0000-0000-00000000006b","00000000-0000-0000-0000-000000000000",'','','','The_Test_Number',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000002ca","00000000-0000-0000-0000-00000000006b","00000000-0000-0000-0000-0000000002c4",'','','','Why',0,"00000000-0000-0000-0000-0000000000dd",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000002d3","00000000-0000-0000-0000-00000000006b","00000000-0000-0000-0000-0000000002ca",'','','','current_state',0,"ba5eda7a-def5-0000-0000-000000000006",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000003e6","00000000-0000-0000-0000-000000000076","00000000-0000-0000-0000-000000000000",'','','','First_Enum',0,"00000000-0000-0000-0000-00000000008b",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000003ec","00000000-0000-0000-0000-000000000076","00000000-0000-0000-0000-0000000003e6",'','','','Second_Enum',0,"00000000-0000-0000-0000-000000000094",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000003f4","00000000-0000-0000-0000-000000000076","00000000-0000-0000-0000-0000000003ec",'','','','Third_Enum',0,"00000000-0000-0000-0000-00000000009e",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000003fc","00000000-0000-0000-0000-000000000076","00000000-0000-0000-0000-0000000003f4",'','','','theID',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000029" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000029" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000029" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000034" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000034" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000034" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000055" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000055" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000055" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000060" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000060" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000060" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000076" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000076" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000076" );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000218","00000000-0000-0000-0000-000000000029",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000220","00000000-0000-0000-0000-000000000034",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000274","00000000-0000-0000-0000-00000000003f",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-00000000028e","00000000-0000-0000-0000-000000000055",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-0000000003ec","00000000-0000-0000-0000-000000000076",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-0000000003f4","00000000-0000-0000-0000-000000000076",0,'' );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000001f4","00000000-0000-0000-0000-000000000029" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000001fa","00000000-0000-0000-0000-000000000029" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000200","00000000-0000-0000-0000-000000000029" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000206","00000000-0000-0000-0000-000000000029" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000020c","00000000-0000-0000-0000-000000000029" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000212","00000000-0000-0000-0000-000000000029" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000218","00000000-0000-0000-0000-000000000029" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000220","00000000-0000-0000-0000-000000000034" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000228","00000000-0000-0000-0000-000000000034" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000022e","00000000-0000-0000-0000-000000000034" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000237","00000000-0000-0000-0000-000000000034" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000274","00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000027c","00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000282","00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000288","00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000028e","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000296","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000029c","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000002a2","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000002a8","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000002ae","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000002b4","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000002be","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000002c4","00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000002ca","00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000002d3","00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000003e6","00000000-0000-0000-0000-000000000076" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000003ec","00000000-0000-0000-0000-000000000076" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000003f4","00000000-0000-0000-0000-000000000076" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000003fc","00000000-0000-0000-0000-000000000076" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000001f4","00000000-0000-0000-0000-000000000029" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000001fa","00000000-0000-0000-0000-000000000029" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000200","00000000-0000-0000-0000-000000000029" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000206","00000000-0000-0000-0000-000000000029" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000020c","00000000-0000-0000-0000-000000000029" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000212","00000000-0000-0000-0000-000000000029" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000218","00000000-0000-0000-0000-000000000029" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000220","00000000-0000-0000-0000-000000000034" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000228","00000000-0000-0000-0000-000000000034" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000022e","00000000-0000-0000-0000-000000000034" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000237","00000000-0000-0000-0000-000000000034" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000274","00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000027c","00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000282","00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000288","00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000028e","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000296","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000029c","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000002a2","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000002a8","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000002ae","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000002b4","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000002be","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000002c4","00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000002ca","00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000002d3","00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000003e6","00000000-0000-0000-0000-000000000076" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000003ec","00000000-0000-0000-0000-000000000076" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000003f4","00000000-0000-0000-0000-000000000076" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000003fc","00000000-0000-0000-0000-000000000076" );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-0000000002ba","00000000-0000-0000-0000-000000000055",'Check_The_Reals','',"ba5eda7a-def5-0000-0000-000000000000",0,'# type subset_1_of_real is          real range      1.0.. 10.0
# type subset_minus_1_of_real is    real range    -10.0 .. -1.0
# type subset_zero_of_real is       real range    -10.0 .. 10.0
# type one_to_maximum_real is       real range      1.0 .. 32767.0
# type zero_to_maximum_real is      real range      0.0 .. 32767.0
# type minus_one_to_maximum_real is real range     -1.0 .. 32767.0
# type minimum_to_minus_one_real is real range -32768.0 .. -1.0
# type minimum_to_zero_real is      real range -32768.0 .. 0.0
# type minimum_to_maximum_real is   real range -32768.0 .. 32767.0


#First_Real  is Subset_1_of_Real
#Second_Real is Subset_minus_1_Of_Real
#Third_Real  is Subset_Zero_of_Real
#Fourth_Real is one_to_maximum_real
#Fifth_Real  is minimum_to_minus_one_real
#Sixth_Real  is minimum_to_maximum_real

[] = RPT1:Start_Test[Test, The_Requid, "User Defined Types", "Real assignment", Testing_For]

# Set up some negative numbers. I-SIM doesn''t like assigning a magic 
# negative number to an attribute. 

# These are defined by I-SIM as of base type.

Minus_Ten    = -10.0
Minus_Max    = -32768.0
Minus_One    = -1.0
Plus_One     =  1.0
Plus_Ten     =  10.0
Plus_Max     =  32767.0
Big_Fat_Real_Zero =  0.0

Test_Has_Passed  = FALSE
Failure_Code = 0

#--------------------------------------------------------------------------
# Test 8
#--------------------------------------------------------------------------

   if Test = 8 then

      # This test shall prove that assignment using magic numbers is 
      # handled correctly. 

      # Note that these magic numbers are base type, and assinging them to 
      # an attribute of UDT is what we are really looking at here.

      The_Object = create Object_With_Reals with Unique_Identifier = Test

      The_Object.First_Real  = 1.0
      The_Object.Second_Real = Minus_Ten 
      The_Object.Third_Real  = 10.0
      The_Object.Fourth_Real = 1.0
      The_Object.Fifth_Real  = Minus_Max
      The_Object.Sixth_Real  = 0.0

      if The_Object.First_Real  = Plus_One   then

         if The_Object.Second_Real = Minus_Ten  then

            if The_Object.Third_Real  = Plus_Ten   then

               if The_Object.Fourth_Real = Plus_One   then

                  if The_Object.Fifth_Real  = Minus_Max  then

                     if The_Object.Sixth_Real  = Big_Fat_Real_Zero then
                        Test_Has_Passed = TRUE
                     else
                        Failure_Code = (-6)
                     endif

                  else
                     Failure_Code = (-5)
                  endif

               else
                  Failure_Code = (-4)
               endif
   
            else
               Failure_Code = (-3)
            endif

         else
            Failure_Code = (-2)
         endif

      else
         Failure_Code = (-1)
      endif

      delete The_Object

   endif

# End Test 8

#--------------------------------------------------------------------------
# Test 9
#--------------------------------------------------------------------------

   if Test = 9 then
  
      # This test shall prove that assignment using data objects is 
      # handled correctly. 

      # Note that these data objects are base type, and assinging them to 
      # an attribute of UDT is what we are really looking at here.

      The_Object = create Object_With_Reals with Unique_Identifier = Test

      The_Object.First_Real  = Plus_One
      The_Object.Second_Real = Minus_Ten
      The_Object.Third_Real  = Plus_Ten
      The_Object.Fourth_Real = Plus_One
      The_Object.Fifth_Real  = Minus_Max
      The_Object.Sixth_Real  = Big_Fat_Real_Zero

      if (The_Object.First_Real  = Plus_One  ) then

         if (The_Object.Second_Real = Minus_Ten ) then

            if (The_Object.Third_Real  = Plus_Ten  ) then

               if (The_Object.Fourth_Real = Plus_One  ) then

                  if (The_Object.Fifth_Real  = Minus_Max ) then

                     if (The_Object.Sixth_Real  = Big_Fat_Real_Zero) then
                        Test_Has_Passed = TRUE
                     else
                        Failure_Code = (-6)
                     endif

                  else
                     Failure_Code = (-5)
                  endif

               else
                  Failure_Code = (-4)
               endif

            else
               Failure_Code = (-3)
            endif

         else
            Failure_Code = (-2)
         endif

      else
         Failure_Code = (-1)
      endif

      delete The_Object

   endif

# End Test 9

#--------------------------------------------------------------------------
# Test 10
#--------------------------------------------------------------------------

   if Test = 10 then

      # This test shall prove that assignment using data objects is 
      # handled correctly.  Values set to minimum allowable for range.

      The_Object = create Object_With_Reals with Unique_Identifier = Test

      The_Object.First_Real  = Plus_Ten
      The_Object.Second_Real = Minus_One
      The_Object.Third_Real  = Plus_Ten
      The_Object.Fourth_Real = Plus_Max
      The_Object.Fifth_Real  = Minus_One
      The_Object.Sixth_Real  = Plus_Max

      if (The_Object.First_Real  = Plus_Ten  ) then

         if (The_Object.Second_Real = Minus_One ) then

            if (The_Object.Third_Real  = Plus_Ten  ) then

               if (The_Object.Fourth_Real = Plus_Max  ) then

                  if (The_Object.Fifth_Real  = Minus_One ) then

                     if (The_Object.Sixth_Real  = Plus_Max ) then
                        Test_Has_Passed = TRUE
                     else
                        Failure_Code = (-6)
                     endif

                  else
                     Failure_Code = (-5)
                  endif
   
               else
                  Failure_Code = (-4)
               endif

            else
               Failure_Code = (-3)
            endif

         else
            Failure_Code = (-2)
         endif

      else
         Failure_Code = (-1)
      endif

      delete The_Object

   endif

# End Test 10

#--------------------------------------------------------------------------
# Test 11
#--------------------------------------------------------------------------

   if Test = 11 then

      # This test shall prove that assignment using data objects is 
      # handled correctly.  Values set to maximum allowable for range.

      The_Object = create Object_With_Reals with Unique_Identifier = Test

      The_Object.First_Real  = Plus_One
      The_Object.Second_Real = Minus_Ten
      The_Object.Third_Real  = Minus_Ten
      The_Object.Fourth_Real = Plus_One
      The_Object.Fifth_Real  = Minus_Max
      The_Object.Sixth_Real  = Minus_Max

      if (The_Object.First_Real  = Plus_One  ) then

         if (The_Object.Second_Real = Minus_Ten ) then

            if (The_Object.Third_Real  = Minus_Ten  ) then

               if (The_Object.Fourth_Real = Plus_One  ) then

                  if (The_Object.Fifth_Real  = Minus_Max ) then

                     if (The_Object.Sixth_Real  = Minus_Max ) then
                        Test_Has_Passed = TRUE
                     else
                        Failure_Code = (-6)
                     endif

                  else
                     Failure_Code = (-5)
                  endif

               else
                  Failure_Code = (-4)
               endif

            else
               Failure_Code = (-3)
            endif

         else
            Failure_Code = (-2)
         endif

      else
         Failure_Code = (-1)
      endif

      delete The_Object

   endif

# End Test 11

#--------------------------------------------------------------------------
# Test 12
#--------------------------------------------------------------------------

   if Test = 12 then

      # This test shall prove that I_SIM allows root data types to be used for
      # User Defined Types, and in fact totally ignores data typing.

      # Also note that the local data objects are UDT type, and reused by each
      # assingment. This will cause problems for WACA as first use for a local
      # object should defined it as being the same type as the attribute that
      # is being copied into it. Subsequent copies should cause grief.

      Other_Id  = Test + 1
      Result_ID = Other_Id + 1

      The_Object1 = create Object_With_Reals with Unique_Identifier = Test
      The_Object2 = create Object_With_Reals with Unique_Identifier = Other_Id
      Result_Object = create Object_With_Reals with Unique_Identifier = Other_Id

      The_Object1.First_Real  = Plus_One
      The_Object1.Second_Real = Minus_Ten
      The_Object1.Third_Real  = Minus_Ten
      The_Object1.Fourth_Real = Plus_Max
      The_Object1.Fifth_Real  = Minus_Max
      The_Object1.Sixth_Real  = Minus_Max

      The_Object2.First_Real  = Plus_One
      The_Object2.Second_Real = Minus_One
      The_Object2.Third_Real  = Minus_Ten
      The_Object2.Fourth_Real = Plus_One
      The_Object2.Fifth_Real  = Minus_One
      The_Object2.Sixth_Real  = Plus_Max

      # 1.0 + 1.0 in range 1.0..10.0 result 2.0 inside range
      Local_Real1 = The_Object1.First_Real  
      Local_Real2 = The_Object2.First_Real
      Result_Real3 = Local_Real1 + Local_Real2
      Result_Object.First_Real  =  Result_Real3

      # -10.0 - -1.0 in range -10.0 .. -1.0 result = -9.0 inside of range
      Local_Real4 = The_Object1.Second_Real  
      Local_Real5 = The_Object2.Second_Real
      Result_Real6 = Local_Real4 - Local_Real5
      Result_Object.Second_Real  =  Result_Real6

      # -10.0 - -10.0 in range -10.0 .. +10.0 result = 0.0 inside range
      Local_Real7 = The_Object1.Third_Real  
      Local_Real8 = The_Object2.Third_Real
      Result_Real9 = Local_Real7 - Local_Real8
      Result_Object.Third_Real  =  Result_Real9

      # 32767.0 - 1.0 in range 1.0 .. 32767.0 result 32766.0 inside of range
      Local_Real10 = The_Object1.Fourth_Real  
      Local_Real11 = The_Object2.Fourth_Real
      Result_Real12 = Local_Real10 - Local_Real11
      Result_Object.Fourth_Real  =  Result_Real12

      # -32768.0 - -1.0 in range -32768.0 .. -1.0 result -32767.0 inside of range
      Local_Real13 = The_Object1.Fifth_Real  
      Local_Real14 = The_Object2.Fifth_Real
      Result_Real15 = Local_Real13 - Local_Real14
      Result_Object.Fifth_Real  =  Result_Real15

      # -32768.0 + 32767.0 in range -32768.0 .. 32767.0 result -1.0 inside range
      Local_Real16 = The_Object1.Sixth_Real  
      Local_Real17 = The_Object2.Sixth_Real
      Result_Real18 = Local_Real16 + Local_Real17
      Result_Object.Sixth_Real  =  Result_Real18

      # Non unique binary operands
      if Result_Real3  = Result_Object.First_Real  &\
         Result_Real6  = Result_Object.Second_Real &\
         Result_Real9  = Result_Object.Third_Real  &\
         Result_Real12 = Result_Object.Fourth_Real &\
         Result_Real15 = Result_Object.Fifth_Real  &\
         Result_Real18 = Result_Object.Sixth_Real then

         Test_Has_Passed = TRUE
      else
         Failure_Code = -1
      endif

      delete The_Object1
      delete The_Object2

   endif

# End Test 12

#--------------------------------------------------------------------------
# Test 13
#--------------------------------------------------------------------------

   if Test = 13 then

      # This test proves that individual local data objects must be used for different data
      # types.

      # This test is the same as test 12, with one important difference. The local
      # data objects are not reused, thus first use should specify them as 
      # of the attribute''s type, and no conflict should arise.

      Other_Id  = Test + 1
      Result_ID = Other_Id + 1

      The_Object1 = create Object_With_Reals with Unique_Identifier = Test
      The_Object2 = create Object_With_Reals with Unique_Identifier = Other_Id
      Result_Object = create Object_With_Reals with Unique_Identifier = Other_Id

      The_Object1.First_Real  = Plus_One
      The_Object1.Second_Real = Minus_Ten
      The_Object1.Third_Real  = Minus_Ten
      The_Object1.Fourth_Real = Plus_Max
      The_Object1.Fifth_Real  = Minus_Max
      The_Object1.Sixth_Real  = Minus_Max

      The_Object2.First_Real  = Plus_One
      The_Object2.Second_Real = Minus_One
      The_Object2.Third_Real  = Minus_Ten
      The_Object2.Fourth_Real = Plus_One
      The_Object2.Fifth_Real  = Minus_One
      The_Object2.Sixth_Real  = Plus_Max
  
      # 1.0 + 1.0 in range 1.0..10.0 result 2.0 inside range
      Local_Real1 = The_Object1.First_Real  
      Local_Real2 = The_Object2.First_Real
      Result_Real3 = Local_Real1 + Local_Real2
      Result_Object.First_Real  =  Result_Real3

      # -10.0 - -1.0 in range -10.0 .. -1.0 result = -9.0 inside of range
      Local_Real4 = The_Object1.Second_Real  
      Local_Real5 = The_Object2.Second_Real
      Result_Real6 = Local_Real4 - Local_Real5
      Result_Object.Second_Real  =  Result_Real6

      # -10.0 - -10.0 in range -10.0 .. +10.0 result = 0.0 inside range
      Local_Real7 = The_Object1.Third_Real  
      Local_Real8 = The_Object2.Third_Real
      Result_Real9 = Local_Real7 - Local_Real8
      Result_Object.Third_Real  =  Result_Real9

      # 32767.0 - 1.0 in range 1.0 .. 32767.0 result 32766.0 inside of range
      Local_Real10 = The_Object1.Fourth_Real  
      Local_Real11 = The_Object2.Fourth_Real
      Result_Real12 = Local_Real10 - Local_Real11
      Result_Object.Fourth_Real  =  Result_Real12

      # -32768.0 - -1.0 in range -32768.0 .. -1.0 result -32767.0 inside of range
      Local_Real13 = The_Object1.Fifth_Real  
      Local_Real14 = The_Object2.Fifth_Real
      Result_Real15 = Local_Real13 - Local_Real14
      Result_Object.Fifth_Real  =  Result_Real15

      # -32768.0 + 32767.0 in range -32768.0 .. 32767.0 result -1.0 inside range
      Local_Real16 = The_Object1.Sixth_Real  
      Local_Real17 = The_Object2.Sixth_Real
      Result_Real18 = Local_Real16 + Local_Real17
      Result_Object.Sixth_Real  =  Result_Real18

      # Unique result_real''s and binary operands
      if Result_Real3 = Result_Object.First_Real  &\
         Result_Real6 = Result_Object.Second_Real &\
         Result_Real9 = Result_Object.Third_Real  &\
         Result_Real12 = Result_Object.Fourth_Real &\
         Result_Real15 = Result_Object.Fifth_Real  &\
         Result_Real18 = Result_Object.Sixth_Real then

         Test_Has_Passed = TRUE
      else
         Failure_Code = -1
      endif

      delete The_Object1
      delete The_Object2

   endif

# End Test 13

#--------------------------------------------------------------------------
# Test 14
#--------------------------------------------------------------------------

   if Test = 14 then

      # This test proves that individual local data objects must be used for different data
      # types.

      # Add max values to minimum values.

      # This test shall cause some attributes to go out of range on assignment
      # to the results object attributes.

      # It is unclear what is to happen about this. 

      # It highlights an important distinction between I-SIM and WACA. 
      # UDT''s ARE TOTALLY UNSUPPORTED IN I-SIM, and trying to test for them here
      # will give erroneous results.

      Other_Id  = Test + 1
      Result_ID = Other_Id + 1

      The_Object1 = create Object_With_Reals with Unique_Identifier = Test
      The_Object2 = create Object_With_Reals with Unique_Identifier = Other_Id
      Result_Object = create Object_With_Reals with Unique_Identifier = Other_Id

   #   The_Object1.First_Real  = Plus_One
   #   The_Object1.Second_Real = Minus_Ten
   #   The_Object1.Third_Real  = Minus_Ten
   #   The_Object1.Fourth_Real = Plus_One
   #   The_Object1.Fifth_Real  = Minus_Max
   #   The_Object1.Sixth_Real  = Minus_Max

   #   The_Object2.First_Real  = Plus_Ten
   #   The_Object2.Second_Real = Plus_One
   #   The_Object2.Third_Real  = Plus_Ten
   #   The_Object2.Fourth_Real = Plus_Max
   #   The_Object2.Fifth_Real  = Minus_One
   #   The_Object2.Sixth_Real  = Plus_Max

   # 1.0 + 10.0  in range 1.0 .. 10.0 result 11.0 outside of range
   #   Local_Real1 = The_Object1.First_Real  
   #   Local_Real2 = The_Object2.First_Real
   #   Result_Real3 = Local_Real1 + Local_Real2
   #   Result_Object.First_Real  =  Result_Real3

   # -10.0 - 1.0 in range -10.0 .. -1.0 result = -11.0 outside of range
   #   Local_Real4 = The_Object1.Second_Real  
   #   Local_Real5 = The_Object2.Second_Real
   #   Result_Real6 = Local_Real4 - Local_Real5
   #   Result_Object.Second_Real  =  Result_Real6

   # -10.0 - 10.0 in range -10.0 .. 10.0 result  -20.0 outside of range
   #   Local_Real7 = The_Object1.Third_Real  
   #   Local_Real8 = The_Object2.Third_Real
   #   Result_Real9 = Local_Real7 - Local_Real8
   #   Result_Object.Third_Real  =  Result_Real9

   # 1.0 + 32767.0 in range 1.0 .. 32767.0 result 32768.0 outside of range
   #   Local_Real10 = The_Object1.Fourth_Real  
   #   Local_Real11 = The_Object2.Fourth_Real
   #   Result_Real12 = Local_Real10 + Local_Real11
   #   Result_Object.Fourth_Real  =  Result_Real12

   # -32768.00 + -1.0 in range -32768.0 .. 0.0 result -32769.0 outside of range
   #   Local_Real13 = The_Object1.Fifth_Real  
   #   Local_Real14= The_Object2.Fifth_Real
   #   Result_Real15 = Local_Real13 + Local_Real14
   #   Result_Object.Fifth_Real  =  Result_Real15

   # -32768.0 - 32767.0  in range -32768.0 .. 32767.0 result -65535.0 outside range
   #   Local_Real16 = The_Object1.Sixth_Real  
   #   Local_Real17 = The_Object2.Sixth_Real
   #   Result_Real18 = Local_Real16 - Local_Real17
   #   Result_Object.Sixth_Real  =  Result_Real18

   # Unique result_real''s and binary operands

   #   if Result_Real3  = Result_Object.First_Real  &\
   #      Result_Real6  = Result_Object.Second_Real &\
   #      Result_Real9  = Result_Object.Third_Real  &\
   #      Result_Real12 = Result_Object.Fourth_Real &\
   #      Result_Real15 = Result_Object.Fifth_Real  &\
   #      Result_Real18 = Result_Object.Sixth_Real then

   #      Test_Has_Passed = TRUE
   #   else
   #      Failure_Code = -1
   #   endif

      Failure_Code = 0

      delete The_Object1
      delete The_Object2

   endif

# End Test 14

#--------------------------------------------------------------------------
# Report the results.
#--------------------------------------------------------------------------

if Test_Has_Passed then
  
   if Result_Object = UNDEFINED then
      [] = RPT2:Test_Passed[Testing_For, Test, Failure_Code]
   else
      [] = RPT2:Test_Passed[Testing_For, Test, Failure_Code]

      [] = RPT8:Test_Real_Passed[Testing_For, Test, Result_Object.First_Real]
      [] = RPT8:Test_Real_Passed[Testing_For, Test, Result_Object.Second_Real]
      [] = RPT8:Test_Real_Passed[Testing_For, Test, Result_Object.Third_Real]
      [] = RPT8:Test_Real_Passed[Testing_For, Test, Result_Object.Fourth_Real]
      [] = RPT8:Test_Real_Passed[Testing_For, Test, Result_Object.Fifth_Real]
      [] = RPT8:Test_Real_Passed[Testing_For, Test, Result_Object.Sixth_Real]
   endif

else

   if Failure_Code = 0 then
      [] = RPT4:Test_Unsupported[Test]
   else
      [] = RPT3:Test_Failed[Testing_For, Test, Failure_Code]
   endif

endif

if Result_Object != UNDEFINED then
   delete Result_Object
endif
',3,'',"00000000-0000-0000-0000-000000000000",2,1 );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000002bb","00000000-0000-0000-0000-0000000002ba",'Test',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000002bc","00000000-0000-0000-0000-0000000002ba",'Testing_For',"ba5eda7a-def5-0000-0000-000000000004",0,'',"00000000-0000-0000-0000-0000000002bb",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000002bd","00000000-0000-0000-0000-0000000002ba",'The_Requid',"ba5eda7a-def5-0000-0000-000000000004",0,'',"00000000-0000-0000-0000-0000000002bc",'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-000000000006","ba5eda7a-def5-0000-0000-000000000004",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-000000000009","00000000-0000-0000-0000-000000000006",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-00000000000c","00000000-0000-0000-0000-000000000006",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-00000000000f","ba5eda7a-def5-0000-0000-000000000002",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-000000000012","ba5eda7a-def5-0000-0000-000000000004",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-000000000015","ba5eda7a-def5-0000-0000-000000000002",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-000000000018","ba5eda7a-def5-0000-0000-000000000002",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-00000000001b","ba5eda7a-def5-0000-0000-000000000002",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-00000000001e","ba5eda7a-def5-0000-0000-000000000002",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-0000000000a8","00000000-0000-0000-0000-000000000006",0,'integer' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-0000000000ac","00000000-0000-0000-0000-000000000006",0,'integer' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-0000000000b0","00000000-0000-0000-0000-000000000006",0,'integer' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-0000000000b5","00000000-0000-0000-0000-000000000006",0,'integer' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-0000000000b9","00000000-0000-0000-0000-000000000006",0,'integer' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-0000000000bd","00000000-0000-0000-0000-000000000006",0,'integer' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-0000000000c1","00000000-0000-0000-0000-000000000006",0,'integer' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-0000000000c5","00000000-0000-0000-0000-000000000006",0,'real' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-0000000000c9","00000000-0000-0000-0000-000000000006",0,'real' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-0000000000cd","00000000-0000-0000-0000-000000000006",0,'real' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-0000000000d1","00000000-0000-0000-0000-000000000006",0,'real' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-0000000000d5","00000000-0000-0000-0000-000000000006",0,'real' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-000000000006",0,'real' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-0000000001b3","00000000-0000-0000-0000-000000000006",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-0000000001b7","00000000-0000-0000-0000-000000000006",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-000000000419","00000000-0000-0000-0000-000000000006",0,'' );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000002","00000000-0000-0000-0000-000000000002",'types','',0 );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-000000000021","00000000-0000-0000-0000-000000000002","00000000-0000-0000-0000-000000000002",'UDT','masl_domain',0 );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000002",'UDT','',0 );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-000000000027","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000002",'Shared','',0 );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-0000000000b3","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000002",'types','',0 );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-0000000000e5","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000002",'functions','',0 );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-0000000001ca","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000002",'scenarios','',0 );
INSERT INTO S_EDT VALUES ( "00000000-0000-0000-0000-000000000081" );
INSERT INTO S_EDT VALUES ( "00000000-0000-0000-0000-00000000008b" );
INSERT INTO S_EDT VALUES ( "00000000-0000-0000-0000-000000000094" );
INSERT INTO S_EDT VALUES ( "00000000-0000-0000-0000-00000000009e" );
INSERT INTO S_EDT VALUES ( "00000000-0000-0000-0000-0000000000dd" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-000000000084",'MICROSECOND','',"00000000-0000-0000-0000-000000000081","00000000-0000-0000-0000-000000000000" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-000000000085",'MILLISECOND','',"00000000-0000-0000-0000-000000000081","00000000-0000-0000-0000-000000000084" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-000000000086",'SECOND','',"00000000-0000-0000-0000-000000000081","00000000-0000-0000-0000-000000000085" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-000000000087",'MINUTE','',"00000000-0000-0000-0000-000000000081","00000000-0000-0000-0000-000000000086" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-000000000088",'HOUR','',"00000000-0000-0000-0000-000000000081","00000000-0000-0000-0000-000000000087" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-000000000089",'DAY','',"00000000-0000-0000-0000-000000000081","00000000-0000-0000-0000-000000000088" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-00000000008e",'One','',"00000000-0000-0000-0000-00000000008b","00000000-0000-0000-0000-000000000000" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-00000000008f",'Two','',"00000000-0000-0000-0000-00000000008b","00000000-0000-0000-0000-00000000008e" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-000000000090",'Three','',"00000000-0000-0000-0000-00000000008b","00000000-0000-0000-0000-00000000008f" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-000000000091",'Four','',"00000000-0000-0000-0000-00000000008b","00000000-0000-0000-0000-000000000090" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-000000000092",'Five','',"00000000-0000-0000-0000-00000000008b","00000000-0000-0000-0000-000000000091" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-000000000097",'Red','',"00000000-0000-0000-0000-000000000094","00000000-0000-0000-0000-000000000000" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-000000000098",'Green','',"00000000-0000-0000-0000-000000000094","00000000-0000-0000-0000-000000000097" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-000000000099",'Blue','',"00000000-0000-0000-0000-000000000094","00000000-0000-0000-0000-000000000098" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-00000000009a",'Yellow','',"00000000-0000-0000-0000-000000000094","00000000-0000-0000-0000-000000000099" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-00000000009b",'Cyan','',"00000000-0000-0000-0000-000000000094","00000000-0000-0000-0000-00000000009a" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-00000000009c",'Magenta','',"00000000-0000-0000-0000-000000000094","00000000-0000-0000-0000-00000000009b" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000a1",'Freezing','',"00000000-0000-0000-0000-00000000009e","00000000-0000-0000-0000-000000000000" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000a2",'Cold','',"00000000-0000-0000-0000-00000000009e","00000000-0000-0000-0000-0000000000a1" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000a3",'Mild','',"00000000-0000-0000-0000-00000000009e","00000000-0000-0000-0000-0000000000a2" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000a4",'Warm','',"00000000-0000-0000-0000-00000000009e","00000000-0000-0000-0000-0000000000a3" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000a5",'Hot','',"00000000-0000-0000-0000-00000000009e","00000000-0000-0000-0000-0000000000a4" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000a6",'Boiling','',"00000000-0000-0000-0000-00000000009e","00000000-0000-0000-0000-0000000000a5" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000e0",'Enumeral','',"00000000-0000-0000-0000-0000000000dd","00000000-0000-0000-0000-000000000000" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000e1",'Number','',"00000000-0000-0000-0000-0000000000dd","00000000-0000-0000-0000-0000000000e0" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000e2",'OK','',"00000000-0000-0000-0000-0000000000dd","00000000-0000-0000-0000-0000000000e1" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000e3",'Not_Tested','',"00000000-0000-0000-0000-0000000000dd","00000000-0000-0000-0000-0000000000e2" );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000000e7","00000000-0000-0000-0000-000000000000",'Check_The_Integers','','# type subset_1_of_integer is          integer range      1 .. 10
# type subset_minus_1_of_integer is    integer range    -10 .. -1
# type subset_zero_of_integer is       integer range    -10 .. 10
# type one_to_maximum_integer is       integer range      1 .. 32767
# type zero_to_maximum_integer is      integer range      0 .. 32767
# type minus_one_to_maximum_integer is integer range     -1 .. 32767
# type minimum_to_minus_one_integer is integer range -32768 .. -1
# type minimum_to_zero_integer is      integer range -32768 .. 0
# type minimum_to_maximum_integer is   integer range -32768 .. 32767


#First_Integer  is Subset_1_of_Integer
#Second_Integer is Subset_minus_1_Of_Integer
#Third_Integer  is Subset_Zero_of_Integer
#Fourth_Integer is one_to_maximum_integer
#Fifth_Integer  is minimum_to_minus_one_integer
#Sixth_Integer  is minimum_to_maximum_integer

   [] = RPT1:Start_Test[Test, The_Requid, "User Defined Types", "Integer assignment", Testing_For]

   # Set up some negative numbers. I-SIM doesn''t like assigning a magic 
   # negative number to an attribute. 

   # These are defined by I-SIM as of base type.
   Minus_Ten    = -10
   Minus_Max    = -32768
   Minus_One    = -1
   Plus_One     =  1
   Plus_Ten     =  10
   Plus_Max     =  32767
   Big_Fat_Zero =  0

   Test_Has_Passed  = FALSE
   Failure_Code = Big_Fat_Zero

#--------------------------------------------------------------------------
# Test 1 - This test shall prove that assignment using magic numbers is 
#          handled correctly. 
#          Note that these magic numbers are base type, and assinging them 
#          to an attribute of UDT is what we are really looking at here.
#--------------------------------------------------------------------------

   if Test = 1 then

      [] = RPT9:Specify_A_Requid[Test, "1103-0000-01-0311"]

      The_Object = create Object_With_Integers with Unique_Identifier = Test

      The_Object.First_Integer  = 1
      The_Object.Second_Integer = Minus_Ten 
      The_Object.Third_Integer  = 10
      The_Object.Fourth_Integer = 1
      The_Object.Fifth_Integer  = Minus_Max
      The_Object.Sixth_Integer  = 0

      if The_Object.First_Integer  = Plus_One   then
      
         if The_Object.Second_Integer = Minus_Ten  then

            if The_Object.Third_Integer  = Plus_Ten   then

               if The_Object.Fourth_Integer = Plus_One   then

                  if The_Object.Fifth_Integer  = Minus_Max  then

                     if The_Object.Sixth_Integer  = Big_Fat_Zero then
                        Test_Has_Passed = TRUE
                     else
                        Failure_Code = (-60)
                     endif

                  else
                     Failure_Code = (-50)
                  endif

               else
                  Failure_Code = (-40)
               endif

            else
               Failure_Code = (-30)
            endif

         else
            Failure_Code = (-20)
         endif

      else
          Failure_Code = (-10)
      endif

      delete The_Object

   endif

# End Test 1

#--------------------------------------------------------------------------
# Test 2 - This test shall prove that assignment using magic numbers is 
#          handled correctly. 
#          Note that these magic numbers are base type, and assinging them 
#          to an attribute of UDT is what we are really looking at here.
#--------------------------------------------------------------------------

   if Test = 2 then

      [] = RPT9:Specify_A_Requid[Test, "1103-0000-01-0311"]

      The_Object = create Object_With_Integers with Unique_Identifier = Test

      The_Object.First_Integer  = Plus_One
      The_Object.Second_Integer = Minus_Ten
      The_Object.Third_Integer  = Plus_Ten
      The_Object.Fourth_Integer = Plus_One
      The_Object.Fifth_Integer  = Minus_Max
      The_Object.Sixth_Integer  = Big_Fat_Zero

      if (The_Object.First_Integer  = Plus_One) then

         if (The_Object.Second_Integer = Minus_Ten) then

            if (The_Object.Third_Integer  = Plus_Ten) then

               if (The_Object.Fourth_Integer = Plus_One) then

                  if (The_Object.Fifth_Integer  = Minus_Max) then

                     if (The_Object.Sixth_Integer  = Big_Fat_Zero) then
                        Test_Has_Passed = TRUE
                     else
                        Failure_Code = (-60)
                     endif

                  else
                     Failure_Code = (-50)
                  endif

               else
                  Failure_Code = (-40)
               endif

            else
               Failure_Code = (-30)
            endif

         else
            Failure_Code = (-20)
         endif

      else
         Failure_Code = (-10)
      endif

      delete The_Object

   endif

# End Test 2

#--------------------------------------------------------------------------
# Test 3 - This test shall prove that assignment using data objects is 
#          handled correctly.  Values set to minimum allowable for range.
#--------------------------------------------------------------------------

   if Test = 3 then

      [] = RPT9:Specify_A_Requid[Test, "1103-0000-01-0311"]

      The_Object = create Object_With_Integers with Unique_Identifier = Test

      The_Object.First_Integer  = Plus_Ten
      The_Object.Second_Integer = Minus_One
      The_Object.Third_Integer  = Plus_Ten
      The_Object.Fourth_Integer = Plus_Max
      The_Object.Fifth_Integer  = Minus_One
      The_Object.Sixth_Integer  = Plus_Max

      if (The_Object.First_Integer  = Plus_Ten) then

         if (The_Object.Second_Integer = Minus_One) then

            if (The_Object.Third_Integer  = Plus_Ten) then

               if (The_Object.Fourth_Integer = Plus_Max) then

                  if (The_Object.Fifth_Integer  = Minus_One) then

                     if (The_Object.Sixth_Integer  = Plus_Max) then
                        Test_Has_Passed = TRUE
                     else
                        Failure_Code = (-60)
                     endif

                  else
                     Failure_Code = (-50)
                  endif

               else
                  Failure_Code = (-40)
               endif

            else
               Failure_Code = (-30)
            endif

         else
            Failure_Code = (-20)
         endif

      else
          Failure_Code = (-10)
      endif

      delete The_Object

   endif

# End Test 3

#--------------------------------------------------------------------------
# Test 4 - This test shall prove that assignment using data objects is 
#          handled correctly.  Values set to maximum allowable for range.
#--------------------------------------------------------------------------

   if Test = 4 then

      [] = RPT9:Specify_A_Requid[Test, "1103-0000-01-0311"]

      The_Object = create Object_With_Integers with Unique_Identifier = Test

      The_Object.First_Integer  = Plus_One
      The_Object.Second_Integer = Minus_Ten
      The_Object.Third_Integer  = Minus_Ten
      The_Object.Fourth_Integer = Plus_One
      The_Object.Fifth_Integer  = Minus_Max
      The_Object.Sixth_Integer  = Minus_Max

      if (The_Object.First_Integer = Plus_One) then

         if (The_Object.Second_Integer = Minus_Ten) then

            if (The_Object.Third_Integer = Minus_Ten) then

               if (The_Object.Fourth_Integer = Plus_One) then

                  if (The_Object.Fifth_Integer = Minus_Max) then

                     if (The_Object.Sixth_Integer = Minus_Max)  then
                        Test_Has_Passed = TRUE
                     else
                        Failure_Code = (-60)
                     endif

                  else
                     Failure_Code = (-50)
                  endif

               else
                  Failure_Code = (-40)
               endif

            else
               Failure_Code = (-30)
            endif

         else
            Failure_Code = (-20)
         endif

      else
         Failure_Code = (-10)
      endif

      delete The_Object

   endif

# End Test 4

#--------------------------------------------------------------------------
# Test 5 - This test shall prove that I_SIM allows root data types to be 
#          used for User Defined Types, and in fact totally ignores data
#          typing.
#          Also note that the local data objects are UDT type, and reused 
#          by each assingment. This will cause problems for WACA as first 
#          use for a local object should defined it as being the same type 
#          as the attribute that is being copied into it. Subsequent copies 
#          should cause grief.
#          This test has been modified to use unique local data and results 
#          identifiers. Non-unique data (ie. reused local objects) has been 
#          shown to cause a constraint error exception to be generated in 
#          ADA. This is not a surprise.
#--------------------------------------------------------------------------

   if Test = 5 then

      Other_Id  = Test + 1
      Result_ID = Other_Id + 1

      The_Object1 = create Object_With_Integers with Unique_Identifier = Test
      The_Object2 = create Object_With_Integers with Unique_Identifier = Other_Id
      Result_Object = create Object_With_Integers with Unique_Identifier = Other_Id

      The_Object1.First_Integer  = Plus_One
      The_Object1.Second_Integer = Minus_Ten
      The_Object1.Third_Integer  = Minus_Ten
      The_Object1.Fourth_Integer = Plus_Max
      The_Object1.Fifth_Integer  = Minus_Max
      The_Object1.Sixth_Integer  = Minus_Max
 
      The_Object2.First_Integer  = Plus_One
      The_Object2.Second_Integer = Minus_One
      The_Object2.Third_Integer  = Minus_Ten
      The_Object2.Fourth_Integer = Plus_One
      The_Object2.Fifth_Integer  = Minus_One
      The_Object2.Sixth_Integer  = Plus_Max

      # 1 + 1 in range 1..10 result 2 in range
      Local_Integer1 = The_Object1.First_Integer  
      Local_Integer2 = The_Object2.First_Integer
      Result_Integer12 = Local_Integer1 + Local_Integer2
      Result_Object.First_Integer  =  Result_Integer12

      # -10 - -1 in range -10 .. -1 result -9 inside range
      Local_Integer3 = The_Object1.Second_Integer  
      Local_Integer4 = The_Object2.Second_Integer
      Result_Integer34 = Local_Integer3 - Local_Integer4
      Result_Object.Second_Integer  =  Result_Integer34

      # -10 - -10 in range -10 .. 10 result 0 inside range
      Local_Integer5 = The_Object1.Third_Integer  
      Local_Integer6 = The_Object2.Third_Integer
      Result_Integer56 = Local_Integer5 - Local_Integer6
      Result_Object.Third_Integer  =  Result_Integer56
  
      # 32767 - 1 in range 1..32767 result 32766 inside range
      Local_Integer7 = The_Object1.Fourth_Integer  
      Local_Integer8 = The_Object2.Fourth_Integer
      Result_Integer78 = Local_Integer7 - Local_Integer8
      Result_Object.Fourth_Integer  =  Result_Integer78

      # -32768 - -1 in range -32768 .. -1 result -32767 inside range
      Local_Integer9 = The_Object1.Fifth_Integer  
      Local_Integer10 = The_Object2.Fifth_Integer
      Result_Integer910 = Local_Integer9 - Local_Integer10
      Result_Object.Fifth_Integer  =  Result_Integer910
 
      # -32768 + 32767 in range -32768 .. 32767 result -1 inside range
      Local_Integer11 = The_Object1.Sixth_Integer  
      Local_Integer12 = The_Object2.Sixth_Integer
      Result_Integer1112 = Local_Integer11 + Local_Integer12
      Result_Object.Sixth_Integer  =  Result_Integer1112
  
      # Non unique binary operands
      if Result_Integer12 = Result_Object.First_Integer  &\
         Result_Integer34 = Result_Object.Second_Integer &\
         Result_Integer56 = Result_Object.Third_Integer  &\
         Result_Integer78 = Result_Object.Fourth_Integer &\
         Result_Integer910 = Result_Object.Fifth_Integer  &\
         Result_Integer1112 = Result_Object.Sixth_Integer then

         Test_Has_Passed = TRUE
         Failure_Code    = 0
      else
         Failure_Code = -10
      endif

      delete The_Object1
      delete The_Object2

   endif

# End Test 5

#--------------------------------------------------------------------------
# Test 6 - This test proves that individual local data objects must be used 
#          for different data types.
#          This test is the same as test 5, with one important difference. 
#          The local data objects are not reused, thus first use should  
#          specify them as of the attribute''s type, and no conflict should 
#          arise.
#--------------------------------------------------------------------------

   if Test = 6 then

      Other_Id  = Test + 1
      Result_ID = Other_Id + 1

      The_Object1 = create Object_With_Integers with Unique_Identifier = Test
      The_Object2 = create Object_With_Integers with Unique_Identifier = Other_Id
      Result_Object = create Object_With_Integers with Unique_Identifier = Other_Id

      The_Object1.First_Integer  = Plus_One
      The_Object1.Second_Integer = Minus_Ten
      The_Object1.Third_Integer  = Minus_Ten
      The_Object1.Fourth_Integer = Plus_Max
      The_Object1.Fifth_Integer  = Minus_Max
      The_Object1.Sixth_Integer  = Minus_Max

      The_Object2.First_Integer  = Plus_One
      The_Object2.Second_Integer = Minus_One
      The_Object2.Third_Integer  = Minus_Ten
      The_Object2.Fourth_Integer = Plus_One
      The_Object2.Fifth_Integer  = Minus_One
      The_Object2.Sixth_Integer  = Plus_Max

      # 1 + 1 in range 1..10 result 2 in range
      Local_Integer61 = The_Object1.First_Integer  
      Local_Integer62 = The_Object2.First_Integer
      Result_Integer612 = Local_Integer61 + Local_Integer62
      Result_Object.First_Integer = Result_Integer612

      # -10 - -1 in range -10 .. -1 result -9 inside range
      Local_Integer64 = The_Object1.Second_Integer  
      Local_Integer65 = The_Object2.Second_Integer
      Result_Integer645 = Local_Integer64 - Local_Integer65
      Result_Object.Second_Integer = Result_Integer645

      # -10 - -10 in range -10 .. 10 result 0 inside range
      Local_Integer67 = The_Object1.Third_Integer  
      Local_Integer68 = The_Object2.Third_Integer
      Result_Integer678 = Local_Integer67 - Local_Integer68
      Result_Object.Third_Integer  =  Result_Integer678

      # 32767 - 1 in range 1..32767 result 32766 inside range
      Local_Integer610 = The_Object1.Fourth_Integer  
      Local_Integer611 = The_Object2.Fourth_Integer
      Result_Integer61011 = Local_Integer610 - Local_Integer611
      Result_Object.Fourth_Integer  =  Result_Integer61011

      # -32768 - -1 in range -32768 .. -1 result -32767 inside range
      Local_Integer613 = The_Object1.Fifth_Integer  
      Local_Integer614= The_Object2.Fifth_Integer
      Result_Integer61314 = Local_Integer613 - Local_Integer614
      Result_Object.Fifth_Integer  =  Result_Integer61314

      # -32768 + 32767 in range -32768 .. 32767 result -1 inside range
      Local_Integer616 = The_Object1.Sixth_Integer  
      Local_Integer617 = The_Object2.Sixth_Integer
      Result_Integer61617 = Local_Integer616 + Local_Integer617
      Result_Object.Sixth_Integer  =  Result_Integer61617

      # Unique result_integer''s and binary operands
      if Result_Integer612 = Result_Object.First_Integer  &\
         Result_Integer645 = Result_Object.Second_Integer &\
         Result_Integer678 = Result_Object.Third_Integer  &\
         Result_Integer61011 = Result_Object.Fourth_Integer &\
         Result_Integer61314 = Result_Object.Fifth_Integer  &\
         Result_Integer61617 = Result_Object.Sixth_Integer then

         Test_Has_Passed = TRUE
         Failure_Code    = 0
      else
         Failure_Code = -10
      endif

      delete The_Object1
      delete The_Object2

   endif

# End Test 6

#--------------------------------------------------------------------------
# Test 7 - This test proves that individual local data objects must be used 
#          for different datatypes.
#
#          Add max values to minimum values.
#
#          This test shall cause some attributes to go out of range on
#          assignment to the results object attributes.
#
#          It is unclear what is to happen about this. 
#
#          It highlights an important distinction between I-SIM and WACA. 
#          UDT ARE TOTALLY UNSUPPORTED IN I-SIM, and trying to test for 
#          them here will give erroneous results.
#
#          ADA will not allow this test to procede without exceptions being
#          generated. Therefore these tests have been commented out for the
#          moment.
#--------------------------------------------------------------------------

   if Test = 7 then

      Other_Id  = Test + 1
      Result_ID = Other_Id + 1

      The_Object1 = create Object_With_Integers with Unique_Identifier = Test
      The_Object2 = create Object_With_Integers with Unique_Identifier = Other_Id
      Result_Object = create Object_With_Integers with Unique_Identifier = Other_Id

      The_Object1.First_Integer  = Plus_One
      The_Object1.Second_Integer = Minus_Ten
      The_Object1.Third_Integer  = Minus_Ten
      The_Object1.Fourth_Integer = Plus_One
      The_Object1.Fifth_Integer  = Minus_Max
      The_Object1.Sixth_Integer  = Minus_Max

      The_Object2.First_Integer  = Plus_Ten
      The_Object2.Second_Integer = Minus_One
      The_Object2.Third_Integer  = Plus_Ten
      The_Object2.Fourth_Integer = Plus_Max
      The_Object2.Fifth_Integer  = Minus_One
      The_Object2.Sixth_Integer  = Plus_Max

      # REUSE local_integer1 and 2 with different types. Should cause the Code Gen to 
      # issue a warning.
  
      # 1 + 10 in range 1 .. 10 result 11 outside range
      #   Local_Integer1 = The_Object1.First_Integer  
      #   Local_Integer2 = The_Object2.First_Integer
      #   Result_Integer3 = Local_Integer1 + Local_Integer2
      #   Result_Object.First_Integer  =  Result_Integer3

      # -10 - 1 in rnage -10 .. -1 result -11 outide range
      #   Local_Integer1 = The_Object1.Second_Integer  
      #   Local_Integer2 = The_Object2.Second_Integer
      #   Result_Integer3 = Local_Integer1 - Local_Integer2
      #   Result_Object.Second_Integer  =  Result_Integer3

      # -10 - 1 in rnage -10 .. -1 result -11 outide range
      #   Local_Integer4 = The_Object1.Second_Integer  
      #   Local_Integer5 = The_Object2.Second_Integer
      #   Result_Integer6 = Local_Integer4 - Local_Integer5
      #   Result_Object.Second_Integer  =  Result_Integer6

      # -10 - 10 in range -10 .. 10 result -20 outside range
      #   Local_Integer7 = The_Object1.Third_Integer  
      #   Local_Integer8 = The_Object2.Third_Integer
      #   Result_Integer9 = Local_Integer7 - Local_Integer8
      #   Result_Object.Third_Integer  =  Result_Integer9

      # 1 + 32767 in range 1 .. 32767 result 32768 outside range
      #   Local_Integer10 = The_Object1.Fourth_Integer  
      #   Local_Integer11 = The_Object2.Fourth_Integer
      #   Result_Integer12 = Local_Integer10 + Local_Integer11
      #   Result_Object.Fourth_Integer  =  Result_Integer12

      # -32768 + -1 in range -32768 .. 0 result  -32769 outside range
      #   Local_Integer13 = The_Object1.Fifth_Integer  
      #   Local_Integer14= The_Object2.Fifth_Integer
      #   Result_Integer15 = Local_Integer13 + Local_Integer14
      #   Result_Object.Fifth_Integer  =  Result_Integer15

      # -32768 - 32767 in range -32768 .. 32767 result 65535 outside range
      #   Local_Integer16 = The_Object1.Sixth_Integer  
      #   Local_Integer17 = The_Object2.Sixth_Integer
      #   Result_Integer18 = Local_Integer16 + Local_Integer17
      #   Result_Object.Sixth_Integer  =  Result_Integer18
   
      # Unique result_integer''s and binary operands

      #   if Result_Integer3 = Result_Object.First_Integer  then 
      # &\
      #      Result_Integer6 = Result_Object.Second_Integer &\
      #      Result_Integer9 = Result_Object.Third_Integer  &\
      #      Result_Integer12 = Result_Object.Fourth_Integer &\
      #      Result_Integer15 = Result_Object.Fifth_Integer  &\
      #      Result_Integer18 = Result_Object.Sixth_Integer then

      #      Test_Has_Passed = TRUE

      #  else

      #      Failure_Code = -1

      #   endif


    Failure_Code = 0

       delete The_Object1
       delete The_Object2

    endif

# End Test 7

#--------------------------------------------------------------------------
# End of tests
#--------------------------------------------------------------------------

   if Test_Has_Passed then
      [] = RPT2:Test_Passed[Testing_For, Test, Failure_Code]
   else

      if Failure_Code = Big_Fat_Zero then
         [] = RPT4:Test_Unsupported[Test]
      else
         [] = RPT3:Test_Failed[Testing_For, Test, Failure_Code]
      endif

   endif

   if Result_Object != UNDEFINED then
      delete Result_Object
   endif
',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,1 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000000f6","00000000-0000-0000-0000-000000000000",'Create_Report_Data','','# Find out of there already is one of these.
# It is not inconceivable that a report object still exists from a previous run.
# Report objects are not deleted at the end of a run, as certain events may
# still be en-queued.

old_report = find-one Report_Data

if old_report != UNDEFINED then
   delete old_report
endif

My_Report = create unique Report_Data with Reported_Domain_Number = 0

[] = RPT6:Domain_Test_Start["User Defined Types"]
',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,3 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000000fa","00000000-0000-0000-0000-000000000000",'Delete_Report_Data','','[] = RPT7:Domain_Test_Finished["User Defined Types"]

# Do not delete the Report_Data object, as there may be still events in
# the queue.',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,4 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000000fe","00000000-0000-0000-0000-000000000000",'Create_New_Test_Data_Object_And_Link_It','','if New_Set = TRUE then

   Returned_IH = create Test_Data with The_Test_Number = This_Test_Number & Testing_For_What = Testing_For

   Returned_Test_Number = This_Test_Number + 1

else

   # Add new Test_Data object onto Previous_IH

   local_Test_Data_IH = create Test_Data with The_Test_Number = This_Test_Number & \
      Testing_For_What = Testing_For

   link Previous_IH R1."Has_a" local_Test_Data_IH

   if Final_Entry = TRUE then

      # Final entry shall cause the return of the first set in the sequence.

      loop

         # Bail out of the operation will return an undefined IH
         Local_Previous_IH = local_Test_Data_IH -> R1."Has_one".Test_Data

         breakif Local_Previous_IH = UNDEFINED

         local_Test_Data_IH = local_Test_Data_IH -> R1."Has_one".Test_Data

      endloop

   endif

   Returned_IH = local_Test_Data_IH
   Returned_Test_Number = This_Test_Number + 1

endif
',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,6 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000110","00000000-0000-0000-0000-000000000000",'Tidy_Up_Test_Data',' Remove a set of reflexive objects.
','Final_Test = find-one Final_Test_Data

Last_Test = 0

loop

   {All_Test_Data} = find-all Test_Data

   number_in_set = countof {All_Test_Data}

   breakif number_in_set = 0

   for Single_Instance in {All_Test_Data} do

      Next_Instance = Single_Instance -> R1."Has_a".Test_Data

      if Next_Instance = UNDEFINED then

         # we have reached the last entry, check to see if it is the first also

         if number_in_set > 1 then
            Previous_Entry = Single_Instance -> R1."Has_one".Test_Data
#            unlink Previous_Entry R1."Has_a" Single_Instance
            unlink Single_Instance R1."Has_one" Previous_Entry 
         endif

         if Last_Test <= Single_Instance.The_Test_Number then

            Last_Test = Single_Instance.The_Test_Number

         endif

         delete Single_Instance

     endif

   endfor

endloop

if Final_Test.Final_Test_Number <= Last_Test then

   Last_Test = Last_Test + 1

   Final_Test.Final_Test_Number = Last_Test

endif',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,7 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000114","00000000-0000-0000-0000-000000000000",'Check_The_Predeclared_Integers',' As service 1, but predeclaring the local
 variables rather than allowing first use to defined type.
','# type subset_1_of_integer is          integer range      1 .. 10
# type subset_minus_1_of_integer is    integer range    -10 .. -1
# type subset_zero_of_integer is       integer range    -10 .. 10
# type one_to_maximum_integer is       integer range      1 .. 32767
# type zero_to_maximum_integer is      integer range      0 .. 32767
# type minus_one_to_maximum_integer is integer range     -1 .. 32767
# type minimum_to_minus_one_integer is integer range -32768 .. -1
# type minimum_to_zero_integer is      integer range -32768 .. 0
# type minimum_to_maximum_integer is   integer range -32768 .. 32767

#Local_Integer1  : Subset_1_Of_Integer
#Local_Integer3 : Subset_Minus_1_Of_Integer
#Local_Integer5  : Subset_Zero_Of_Integer
#Local_Integer7 : One_To_Maximum_Integer
#Local_Integer9  : Minimum_To_Minus_One_Integer
#Local_Integer11  : Minimum_To_Maximum_Integer


[] = RPT1:Start_Test[Test, "Null Requid", "User Defined Types", "Predeclared Integer assignment", Testing_For]


# Set up some negative numbers. I-SIM doesn''t like assigning a magic 
# negative number to an attribute. 

# These are defined by I-SIM as of base type.

Minus_Ten    = -10
Minus_Max    = -32768
Minus_One    = -1
Plus_One     =  1
Plus_Ten     =  10
Plus_Max     =  32767
Big_Fat_Zero =  0

Test_Has_Passed  = FALSE
Failure_Code = Big_Fat_Zero

#--------------------------------------------------------------------------
# Test 15
#--------------------------------------------------------------------------

   if Test = 15 then

      # This test shall prove that I_SIM allows root data types to be used for
      # User Defined Types, and in fact totally ignores data typing.

      # Also note that the local data objects are UDT type, and reused by each
      # assingment. This will cause problems for WACA as first use for a local
      # object should defined it as being the same type as the attribute that
      # is being copied into it. Subsequent copies should cause grief.

      # This test has been modified to use unique local data and results identifiers.
      # Non-unique data (ie. reused local objects) has been shown to cause a constraint 
      # error exception to be generated in ADA. This is not a surprise.

      Other_Id  = Test + 1
      Result_ID = Other_Id + 1

      The_Object1 = create Object_With_Integers with Unique_Identifier = Test
      The_Object2 = create Object_With_Integers with Unique_Identifier = Other_Id
      Result_Object = create Object_With_Integers with Unique_Identifier = Other_Id

      The_Object1.First_Integer  = Plus_One
      The_Object1.Second_Integer = Minus_Ten
      The_Object1.Third_Integer  = Minus_Ten
      The_Object1.Fourth_Integer = Plus_Max
      The_Object1.Fifth_Integer  = Minus_Max
      The_Object1.Sixth_Integer  = Minus_Max

      The_Object2.First_Integer  = Plus_One
      The_Object2.Second_Integer = Minus_One
      The_Object2.Third_Integer  = Minus_Ten
      The_Object2.Fourth_Integer = Plus_One
      The_Object2.Fifth_Integer  = Minus_One
      The_Object2.Sixth_Integer  = Plus_Max

      # 1 + 1 in range 1..10 result 2 in range
      Local_Integer1 = The_Object1.Second_Integer  
      Local_Integer2 = The_Object1.First_Integer
      Result_Integer12 = Local_Integer1 + Local_Integer2
      Result_Object.First_Integer  =  Result_Integer12

      # -10 - -1 in range -10 .. -1 result -9 inside range
      Local_Integer3 = The_Object1.Second_Integer  
      Local_Integer4 = The_Object2.Second_Integer
      Result_Integer34 = Local_Integer3 - Local_Integer4
      Result_Object.Second_Integer  =  Result_Integer34

      # -10 - -10 in range -10 .. 10 result 0 inside range
      Local_Integer5 = The_Object1.Third_Integer  
      Local_Integer6 = The_Object2.Third_Integer
      Result_Integer56 = Local_Integer5 - Local_Integer6
      Result_Object.Third_Integer  =  Result_Integer56

      # 32767 - 1 in range 1..32767 result 32766 inside range
      Local_Integer7 = The_Object1.Fourth_Integer  
      Local_Integer8 = The_Object2.Fourth_Integer
      Result_Integer78 = Local_Integer7 - Local_Integer8
      Result_Object.Fourth_Integer  =  Result_Integer78

      # -32768 - -1 in range -32768 .. -1 result -32767 inside range
      Local_Integer9 = The_Object1.Fifth_Integer  
      Local_Integer10 = The_Object2.Fifth_Integer
      Result_Integer910 = Local_Integer9 - Local_Integer10
      Result_Object.Fifth_Integer  =  Result_Integer910

      # -32768 + 32767 in range -32768 .. 32767 result -1 inside range
      Local_Integer11 = The_Object1.Sixth_Integer  
      Local_Integer12 = The_Object2.Sixth_Integer
      Result_Integer1112 = Local_Integer11 + Local_Integer12
      Result_Object.Sixth_Integer  =  Result_Integer1112

      # Non unique binary operands
      if Result_Integer12 = Result_Object.First_Integer  &\
         Result_Integer34 = Result_Object.Second_Integer &\
         Result_Integer56 = Result_Object.Third_Integer  &\
         Result_Integer78 = Result_Object.Fourth_Integer &\
         Result_Integer910 = Result_Object.Fifth_Integer  &\
         Result_Integer1112 = Result_Object.Sixth_Integer then

          Test_Has_Passed = TRUE

      else
        Failure_Code = -1
      endif

      delete The_Object1
      delete The_Object2

   endif

# End Test 15

#--------------------------------------------------------------------------
# Test 16
#--------------------------------------------------------------------------

   if Test = 16 then

      # This test proves that individual local data objects must be used for different data
      # types.

      # This test is the same as test 5, with one important difference. The local
      # data objects are not reused, thus first use should specify them as 
      # of the attribute''s type, and no conflict should arise.

      Other_Id  = Test + 1
      Result_ID = Other_Id + 1

      The_Object1 = create Object_With_Integers with Unique_Identifier = Test
      The_Object2 = create Object_With_Integers with Unique_Identifier = Other_Id
      Result_Object = create Object_With_Integers with Unique_Identifier = Other_Id

      The_Object1.First_Integer  = Plus_One
      The_Object1.Second_Integer = Minus_Ten
      The_Object1.Third_Integer  = Minus_Ten
      The_Object1.Fourth_Integer = Plus_Max
      The_Object1.Fifth_Integer  = Minus_Max
      The_Object1.Sixth_Integer  = Minus_Max

      The_Object2.First_Integer  = Plus_One
      The_Object2.Second_Integer = Minus_One
      The_Object2.Third_Integer  = Minus_Ten
      The_Object2.Fourth_Integer = Plus_One
      The_Object2.Fifth_Integer  = Minus_One
      The_Object2.Sixth_Integer  = Plus_Max

      # 1 + 1 in range 1..10 result 2 in range
      Local_Integer61 = The_Object1.First_Integer  
      Local_Integer62 = The_Object2.First_Integer
      Result_Integer612 = Local_Integer61 + Local_Integer62
      Result_Object.First_Integer = Result_Integer612

      # -10 - -1 in range -10 .. -1 result -9 inside range
      Local_Integer64 = The_Object1.Second_Integer  
      Local_Integer65 = The_Object2.Second_Integer
      Result_Integer645 = Local_Integer64 - Local_Integer65
      Result_Object.Second_Integer = Result_Integer645

      # -10 - -10 in range -10 .. 10 result 0 inside range
      Local_Integer67 = The_Object1.Third_Integer  
      Local_Integer68 = The_Object2.Third_Integer
      Result_Integer678 = Local_Integer67 - Local_Integer68
      Result_Object.Third_Integer  =  Result_Integer678

      # 32767 - 1 in range 1..32767 result 32766 inside range
      Local_Integer610 = The_Object1.Fourth_Integer  
      Local_Integer611 = The_Object2.Fourth_Integer
      Result_Integer61011 = Local_Integer610 - Local_Integer611
      Result_Object.Fourth_Integer  =  Result_Integer61011

      # -32768 - -1 in range -32768 .. -1 result -32767 inside range
      Local_Integer613 = The_Object1.Fifth_Integer  
      Local_Integer614= The_Object2.Fifth_Integer
      Result_Integer61314 = Local_Integer613 - Local_Integer614
      Result_Object.Fifth_Integer  =  Result_Integer61314

      # -32768 + 32767 in range -32768 .. 32767 result -1 inside range
      Local_Integer616 = The_Object1.Sixth_Integer  
      Local_Integer617 = The_Object2.Sixth_Integer
      Result_Integer61617 = Local_Integer616 + Local_Integer617
      Result_Object.Sixth_Integer  =  Result_Integer61617

      # Unique result_integer''s and binary operands

      if Result_Integer612   = Result_Object.First_Integer  &\
         Result_Integer645   = Result_Object.Second_Integer &\
         Result_Integer678   = Result_Object.Third_Integer  &\
         Result_Integer61011 = Result_Object.Fourth_Integer &\
         Result_Integer61314 = Result_Object.Fifth_Integer  &\
         Result_Integer61617 = Result_Object.Sixth_Integer then

         Test_Has_Passed = TRUE
      else
         Failure_Code = -1
      endif

      delete The_Object1
      delete The_Object2

   endif

# End Test 16

#--------------------------------------------------------------------------
# Test 17
#--------------------------------------------------------------------------

   if Test = 17 then

      # This test proves that individual local data objects must be used for different data
      # types.

      # Add max values to minimum values.

      # This test shall cause some attributes to go out of range on assignment
      # to the results object attributes.

      # Ada will raise a constraint error under these conditions.

      # It highlights an important distinction between I-SIM and WACA. 
      # UDT ARE TOTALLY UNSUPPORTED IN I-SIM, and trying to test for them here
      # will give erroneous results.

      # ADA will not allow this test to procede without exceptions being generated. Therefore
      # these tests have been commented out for the moment.

      Other_Id  = Test + 1
      Result_ID = Other_Id + 1

      The_Object1 = create Object_With_Integers with Unique_Identifier = Test
      The_Object2 = create Object_With_Integers with Unique_Identifier = Other_Id
      Result_Object = create Object_With_Integers with Unique_Identifier = Other_Id

      The_Object1.First_Integer  = Minus_Ten

      The_Object1.Second_Integer = Minus_Ten
      The_Object1.Third_Integer  = Minus_Ten
      The_Object1.Fourth_Integer = Plus_One
      The_Object1.Fifth_Integer  = Minus_Max
      The_Object1.Sixth_Integer  = Minus_Max

      The_Object2.First_Integer  = Plus_Ten
  
      The_Object2.Second_Integer = Minus_One
      The_Object2.Third_Integer  = Plus_Ten
      The_Object2.Fourth_Integer = Plus_Max
      The_Object2.Fifth_Integer  = Minus_One
      The_Object2.Sixth_Integer  = Plus_Max

      # REUSE local_integer5 predeclared as subset_zero_of_integer and assign an attribute of
      # The_Object_1.First_Integer (which is of type Subset_1_Of_Integer)

      # and local_integer_2 defined from first use as Subset_1_Of_Integer

      # Adding the two should make Result_Integer_3 of type subset_zero_of_integer

      # Assignment of The_Object1.First_Integer to Local_Integer5 should cause the Code Gen 
      # to issue a warning.

      # -10 + 10 in range -10 .. 10 result 0 inside range
      Local_Integer5 = The_Object1.First_Integer  
      Local_Integer2 = The_Object2.First_Integer
      Result_Integer3 = Local_Integer5 + Local_Integer2
      Result_Object.First_Integer  =  Result_Integer3

      if Result_Integer3 = Big_Fat_Zero then 
         Test_Has_Passed = TRUE
      else
         Test_Has_Passed = FALSE
         Failure_Code = Result_Integer3
      endif

      delete The_Object1
      delete The_Object2

   endif

# End Test 17

#--------------------------------------------------------------------------
# Report the results.
#--------------------------------------------------------------------------

if Test_Has_Passed then

   if Result_Object = UNDEFINED then
      [] = RPT2:Test_Passed[Testing_For, Test, Failure_Code]
   else
      # This should cause problems for WACA, as the results attributes
      # are all of different types.
      [] = RPT2:Test_Passed[Testing_For, Test, Result_Object.First_Integer]
      [] = RPT2:Test_Passed[Testing_For, Test, Result_Object.Second_Integer]
      [] = RPT2:Test_Passed[Testing_For, Test, Result_Object.Third_Integer]
      [] = RPT2:Test_Passed[Testing_For, Test, Result_Object.Fourth_Integer]
      [] = RPT2:Test_Passed[Testing_For, Test, Result_Object.Fifth_Integer]
      [] = RPT2:Test_Passed[Testing_For, Test, Result_Object.Sixth_Integer]
   endif

else

   if Failure_Code = Big_Fat_Zero then
      [] = RPT4:Test_Unsupported[Test]
   else
      [] = RPT3:Test_Failed[Testing_For, Test, Failure_Code]
   endif

endif

if Result_Object != UNDEFINED then
   delete Result_Object
endif
',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,2 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-00000000011c","00000000-0000-0000-0000-000000000000",'Report_No_UDT_Used',' Returns the number of user defined types used and confims that the reported number is actually the number used.
','Reported_No_UDT = 0
Expected_No_UDT = 0
Test_Has_Passed = FALSE

[] = RPT1:Start_Test[Test, "Null Requid", "User Defined Types", "Reported No UDTs", Testing_For]

if Test = 15 then
   [env] = BTF3:Get_Environment_Type[]

   if env = 1 then
      [] = RPT4:Test_Unsupported[Test]   
   else

      #$ADA_INLINE
         #with Ada.Text_IO;
         #
         #with UDT_Domain_Types;
         #Reported_No_UDT := UDT_Domain_Types.Types_And_Subtypes_Count;
         #Ada.Text_IO.Put_Line("No UDTs in User_Defined_Types = " & integer''image(integer(Reported_No_UDT)));
      #$END_ADAINLINE

      $INLINE
         fprintf(stderr,"Checking number of UDTs \n");
      $ENDINLINE

      Expected_No_UDT = 16

      if Reported_No_UDT = Expected_No_UDT then
         [] = RPT2:Test_Passed[Testing_For, Test, Reported_No_UDT]
      else 
         [] = RPT3:Test_Failed[Testing_For, Test, Expected_No_UDT]
      endif

   endif

endif',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,5 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000124","00000000-0000-0000-0000-000000000000",'Create_An_Active_Object','','Returned_IH = create An_Active_Object with The_Test_Number = This_Test & Why = ''Not_Tested'' & Current_State = ''Idle''

',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,8 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-00000000012c","00000000-0000-0000-0000-000000000000",'Create_A_Timer_Enumeration','','The_Return_Value = -1

if The_Timer_Enum  = ''MILLISECOND'' then
   The_Return_Value = 1
endif   

if The_Timer_Enum = ''SECOND'' then
   The_Return_Value = 2  
endif',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,9 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000134","00000000-0000-0000-0000-000000000000",'Check_The_Enumerators','','#----------------------------------------------------------------------
# Test 1 - Check to ensure that attributes for an object can accept
#          enumerated user defined types
#----------------------------------------------------------------------

   [] = RPT1:Start_Test[Test, "1241-0000-01-0113", "User Defined Types", "Enumerator assignment", "Sub ranges of enumerators"]
   [] = RPT9:Specify_A_Requid[Test, "1241-0000-01-1214"]

   Defunct_Boy_Band = First_Enum_Input
   Bad_Boy_Band     = Second_Enum_Input
   Zero_Degrees     = Third_Enum_Input
   
   InstEnum = create Object_With_Enumerators with theID       = Test             &\
                                                  First_Enum  = Defunct_Boy_Band &\
                                                  Second_Enum = Bad_Boy_Band     &\
                                                  Third_Enum  = Zero_Degrees

   Has_Failed   = TRUE
   Failure_Code = 0

   if InstEnum.First_Enum = ''Five'' then

      if InstEnum.Second_Enum = ''Blue'' then

         if InstEnum.Third_Enum = ''Freezing'' then
            Has_Failed = FALSE
         else
            Has_Failed   = TRUE
            Failure_Code = -10
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -20
      endif

   else
      Has_Failed   = TRUE
      Failure_Code = -30
   endif

   delete InstEnum

   # Report the results.
  
   if not Has_Failed then
      [] = RPT2:Test_Passed["Check Enumerators", Test, Failure_Code]
   else
      [] = RPT3:Test_Failed["Check Enumerators", Test, Failure_Code]
   endif
',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,10 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000140","00000000-0000-0000-0000-000000000000",'Check_Constraint','','# --------------------------------------------------------------------------------------
# Check that when a switch statment uses a contrained type default is not required as
# all elements of the constrained type should be accounted for
# --------------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "User Defined Types", "Check Constraint", "Check Constraint in Switch"]

Has_Failed   = TRUE
Failure_Code = -10
Count = 0


   The_Object = create Object_With_Integers with Unique_Identifier = Test

   The_Object.First_Integer = 4

switch The_Object.First_Integer

   case 1
      Count = 1

   case 2
      Count = 2

   case 3
      Count = 3

   case 4
      Count = 4
      Has_Failed = FALSE

   case 5
      Count = 5

   case 6
      Count = 6

   case 7
      Count = 7

   case 8
      Count = 8

   case 9
      Count = 9

   case 10
      Count = 10

endswitch

delete The_Object

if not Has_Failed then
   [] = RPT2:Test_Passed["Check Constraint in Switch", Test, Count]
else
   [] = RPT3:Test_Failed["Check Constraint in Switch", Test, Count]
endif

',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,11 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000001cc","00000000-0000-0000-0000-000000000000",'Integer_Number_Scenarios',' Integer_Number_Scenarios
','#--------------------------------------------------------------------------
#Call domain based synchronous service
#--------------------------------------------------------------------------

# Create test data, stashed in a specially created object
Test = 1

New_Object = TRUE
Final_Object = FALSE

Dummy_TD = create Test_Data with The_Test_Number = 99 & Testing_For_What = "Nothing"

A_Test_Data_IH = Dummy_TD

[A_Test_Data_IH, Test] = UDT6::Create_New_Test_Data_Object_And_Link_It[New_Object, Dummy_TD,     Test, "Object data assignment", Final_Object]

# Don''t need this beasty any more, it was only ever a dummy.
delete Dummy_TD

New_Object = FALSE
[A_Test_Data_IH, Test] = UDT6::Create_New_Test_Data_Object_And_Link_It[New_Object, A_Test_Data_IH, Test, "Max value assignment", Final_Object]
[A_Test_Data_IH, Test] = UDT6::Create_New_Test_Data_Object_And_Link_It[New_Object, A_Test_Data_IH, Test, "Min value assignment", Final_Object]
[A_Test_Data_IH, Test] = UDT6::Create_New_Test_Data_Object_And_Link_It[New_Object, A_Test_Data_IH, Test, "Common local assignment", Final_Object]
[A_Test_Data_IH, Test] = UDT6::Create_New_Test_Data_Object_And_Link_It[New_Object, A_Test_Data_IH, Test, "Unique local assignment", Final_Object]
[A_Test_Data_IH, Test] = UDT6::Create_New_Test_Data_Object_And_Link_It[New_Object, A_Test_Data_IH, Test, "Unique local assignment", Final_Object]

Final_Object = TRUE

[A_Test_Data_IH, Test] = UDT6::Create_New_Test_Data_Object_And_Link_It[New_Object, A_Test_Data_IH, Test, "Min plus max", Final_Object]

local_counter = 1

if A_Test_Data_IH != UNDEFINED then
  
   [] = UDT1::Check_The_Integers[local_counter, A_Test_Data_IH.Testing_For_What, "1241-0000-01-0112"]

   loop

      breakif local_counter = Test
      local_counter = local_counter + 1
 
      A_Test_Data_IH = A_Test_Data_IH -> R1."Has_a".Test_Data   

      if A_Test_Data_IH != UNDEFINED then

         if local_counter = 7 then
            [] = UDT1::Check_The_Integers[local_counter, A_Test_Data_IH.Testing_For_What, "Null Requid"]
         else
            [] = UDT1::Check_The_Integers[local_counter, A_Test_Data_IH.Testing_For_What, "1241-0000-01-0112"]
         endif

      else
         # Oops
         break
      endif

   endloop

else
   [] = RPT5:Test_Text[local_counter, "First Test Data object corrupt"]
endif

# Tidy up the test data objects starting at the final one

[] = UDT7::Tidy_Up_Test_Data[]

',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,1 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000001ce","00000000-0000-0000-0000-000000000000",'Start_UDT_Tests',' Start_UDT_Tests
','[] = UDT3::Create_Report_Data[]

This_Final_Test = create Final_Test_Data with Final_Test_Number = 0

',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,2 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000001d0","00000000-0000-0000-0000-000000000000",'Finish_UDT_Tests',' Finish_UDT_Tests
','[] = UDT4::Delete_Report_Data[]

FTD_To_Delete = find-one Final_Test_Data

if FTD_To_Delete != UNDEFINED then

   delete FTD_To_Delete

endif

',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,3 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000001d2","00000000-0000-0000-0000-000000000000",'Real_Numbers_Scenario',' Real_Numbers_Scenario
','#Call object based synchronous service

my_final_test = find-one Final_Test_Data

Test = my_final_test.Final_Test_Number

New_Object   = TRUE
Final_Object = FALSE

Dummy_TD = create Test_Data with The_Test_Number = 99 & Testing_For_What = "Nothing"

A_Test_Data_IH = Dummy_TD

[A_Test_Data_IH, Test] = UDT6::Create_New_Test_Data_Object_And_Link_It[New_Object, Dummy_TD,     Test, "Object data assignment", Final_Object]

# Don''t need this beasty any more, it was only ever a dummy.
delete Dummy_TD

New_Object = FALSE
[A_Test_Data_IH, Test] = UDT6::Create_New_Test_Data_Object_And_Link_It[New_Object, A_Test_Data_IH, Test, "Max value assignment", Final_Object]
[A_Test_Data_IH, Test] = UDT6::Create_New_Test_Data_Object_And_Link_It[New_Object, A_Test_Data_IH, Test, "Min value assignment", Final_Object]
[A_Test_Data_IH, Test] = UDT6::Create_New_Test_Data_Object_And_Link_It[New_Object, A_Test_Data_IH, Test, "Common local assignment", Final_Object]
[A_Test_Data_IH, Test] = UDT6::Create_New_Test_Data_Object_And_Link_It[New_Object, A_Test_Data_IH, Test, "Unique local assignment", Final_Object]
[A_Test_Data_IH, Test] = UDT6::Create_New_Test_Data_Object_And_Link_It[New_Object, A_Test_Data_IH, Test, "Unique local assignment", Final_Object]
[A_Test_Data_IH, Test] = UDT6::Create_New_Test_Data_Object_And_Link_It[New_Object, A_Test_Data_IH, Test, "Min plus max", Final_Object]

Final_Object = TRUE

[A_Test_Data_IH, Test] = UDT6::Create_New_Test_Data_Object_And_Link_It[New_Object, A_Test_Data_IH, Test, "Report Number Of UDTs", Final_Object]

local_counter = 8

if A_Test_Data_IH != UNDEFINED then
  
   [] = RL1:Check_The_Reals[local_counter, A_Test_Data_IH.Testing_For_What, "1241-0000-01-0111"]

   loop

      breakif local_counter = Test
      local_counter = local_counter + 1
 
      A_Test_Data_IH = A_Test_Data_IH -> R1."Has_a".Test_Data   

      if A_Test_Data_IH != UNDEFINED then

         if local_counter = 14 then
            [] = RL1:Check_The_Reals[local_counter, A_Test_Data_IH.Testing_For_What, "Null Requid"]
         endif

         if local_counter != 14 and local_counter !=15 then
            [] = RL1:Check_The_Reals[local_counter, A_Test_Data_IH.Testing_For_What,"1241-0000-01-0111"]
         endif

         if local_counter = 15 then
            [] = UDT5::Report_No_UDT_Used[local_counter, A_Test_Data_IH.Testing_For_What]
         endif

      else
         # Oops
         break
      endif

   endloop

else
   [] = RPT5:Test_Text[local_counter, "First Test Data object corrupt"]
endif

# Tidy up the test data objects starting at the final one

[] = UDT7::Tidy_Up_Test_Data[]


',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,4 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000001d4","00000000-0000-0000-0000-000000000000",'Predeclared_Integer_Scenario',' Predeclared_Integer_Scenario
','#--------------------------------------------------------------------------
# Call domain based synchronous service
#--------------------------------------------------------------------------

my_final_test = find-one Final_Test_Data

Test = my_final_test.Final_Test_Number

New_Object   = TRUE
Final_Object = FALSE

Dummy_TD = create Test_Data with The_Test_Number = 99 & Testing_For_What = "Nothing"

A_Test_Data_IH = Dummy_TD

[A_Test_Data_IH, Test] = UDT6::Create_New_Test_Data_Object_And_Link_It[New_Object, Dummy_TD,     Test, "Object data assignment", Final_Object]

# Don''t need this beasty any more, it was only ever a dummy.
delete Dummy_TD

New_Object = FALSE
[A_Test_Data_IH, Test] = UDT6::Create_New_Test_Data_Object_And_Link_It[New_Object, A_Test_Data_IH, Test, "Unique local assignment", Final_Object]

Final_Object = TRUE

[A_Test_Data_IH, Test] = UDT6::Create_New_Test_Data_Object_And_Link_It[New_Object, A_Test_Data_IH, Test, "Reuse predeclared local data", Final_Object]

local_counter = 15

if A_Test_Data_IH != UNDEFINED then
  
   [] = UDT2::Check_The_Predeclared_Integers[local_counter, A_Test_Data_IH.Testing_For_What]

   loop

      breakif local_counter = Test
      local_counter = local_counter + 1
 
      A_Test_Data_IH = A_Test_Data_IH -> R1."Has_a".Test_Data   

      if A_Test_Data_IH != UNDEFINED then
         [] = UDT2::Check_The_Predeclared_Integers[local_counter, A_Test_Data_IH.Testing_For_What]
      else
         # Oops
         break
      endif

   endloop

else
   [] = RPT5:Test_Text[local_counter, "First Test Data object corrupt"]
endif

# Tidy up the test data objects starting at the final one

[] = UDT7::Tidy_Up_Test_Data[]

',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,5 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000001d6","00000000-0000-0000-0000-000000000000",'Terminator_Type_Scenario',' Terminator_Type_Scenario
','
#--------------------------------------------------------------------------
# This scenario shall prove that a data object instance handle passed into
# a terminator shall have its'' attribute types passed in correctly.
#
# The locally defined data objects in the terminator should not have any 
# defined type assinged to them by the code generator, ie. they should be 
# base types. 
#
# A secondary test has been defined where the data attributes of the object
# are passed in directly. This too should prove that locally defined 
# objects do not inherit the type of the attribute or object that they are 
# being assigned. 
#
# Given the difference in the way I-SIM and WACA deal with UDT''s, the tests
# will always pass in I-SIM, and cause a run-time error in WACA if ranges 
# are exceeded.
#
# The thrust of the tests will be to force a range overflow in the UDT 
# defined object in the terminator. If there are no UDT types associated 
# with the local object in the terminator, then the test will pass, if the
# object has inherited the type, then the test will crash spectacularly.
#--------------------------------------------------------------------------

my_test = find-one Final_Test_Data

the_test_number = my_test.Final_Test_Number

the_result = FALSE

#--------------------------------------------------------------------------
# Test 1 
#--------------------------------------------------------------------------

   [] = RPT1:Start_Test[the_test_number, "1103-0000-01-0311", "UDT", "Terminator typing", "Pass in object IH, decode types"]

   the_IH = create unique Object_Into_Bridge with Current_State = ''Idle''

   the_IH.A_Number = 10
   the_IH.Some_Enumeration = ''Four''

   # with 101, ''Four''

   [the_result, result_value] = BTF1:I_H_Type_Across[the_IH]

   if the_result = TRUE then 
      [] = RPT2:Test_Passed["Decode IH", the_test_number, result_value]
   else
      [] = RPT3:Test_Failed["Decode IH", the_test_number, result_value]
   endif

   the_test_number = the_test_number + 1

# End Test 1

#--------------------------------------------------------------------------
# Test 2
#--------------------------------------------------------------------------

   [] = RPT1:Start_Test[the_test_number, "1103-0000-01-0311", "UDT", "Terminator typing", "Pass in UDT data, decode types"]

   [the_result, result_value, result_subtype] = BTF2:User_Defined_Types_Across[the_IH.A_Number, the_IH.Some_Enumeration]

   if the_result = TRUE then
      [] = RPT2:Test_Passed["Decode object", the_test_number, result_value]
   else
      [] = RPT3:Test_Failed["Decode object", the_test_number, result_value]
   endif

   the_test_number = the_test_number + 1

# End Test 2

#--------------------------------------------------------------------------
# Test 3
#--------------------------------------------------------------------------

   generate OIB1:Start_To_Test(the_test_number) to the_IH

# End Test 3

#--------------------------------------------------------------------------

   the_test_number = the_test_number + 1

   my_test.Final_Test_Number = the_test_number',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,6 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000001d8","00000000-0000-0000-0000-000000000000",'Events_UDT_Scenario',' Events_UDT_Scenario
','my_test = find-one Final_Test_Data

This_Test_Number = my_test.Final_Test_Number

#--------------------------------------------------------------------------
# Test 1
#--------------------------------------------------------------------------

   this_object = create An_Active_Object with The_Test_Number = This_Test_Number & Why = ''Not_Tested'' & Current_State = ''Idle''

   generate AAO1:Go(''One'') to this_object

   This_Test_Number = This_Test_Number + 1

# End Test 1

#--------------------------------------------------------------------------
# Test 2
#--------------------------------------------------------------------------

   [] = BTF4:Local_Bridge[This_Test_Number]

   This_Test_Number = This_Test_Number + 1

# End Test 2

#--------------------------------------------------------------------------

my_test.Final_Test_Number = This_Test_Number
',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,7 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000001da","00000000-0000-0000-0000-000000000000",'Timer_Enum_Scenario',' Timer_Enum_Scenario
','my_test = find-one Final_Test_Data

Test = my_test.Final_Test_Number

#--------------------------------------------------------------------------
# Test 1
#--------------------------------------------------------------------------

   [] = BTF5:Timer_Enum_Across_Bridge[Test]

   Test = Test + 1

# End Test 1

#--------------------------------------------------------------------------

my_test.Final_Test_Number = Test
',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,8 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000001dc","00000000-0000-0000-0000-000000000000",'Enum_Scenario',' Enum_Scenario
','my_final_test = find-one Final_Test_Data

Test = my_final_test.Final_Test_Number

#--------------------------------------------------------------------------
# Test 1
#--------------------------------------------------------------------------

   [] = UDT10::Check_The_Enumerators[Test, ''Five'', ''Blue'', ''Freezing'']

   Test = Test + 1

# End Test 1

#--------------------------------------------------------------------------

my_final_test.Final_Test_Number = Test 
',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,9 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000001de","00000000-0000-0000-0000-000000000000",'Check_Constraint',' Check_Constraint
','my_final_test = find-one Final_Test_Data

Test = my_final_test.Final_Test_Number

#--------------------------------------------------------------------------
# Test 1
#--------------------------------------------------------------------------

   [] = UDT11::Check_Constraint[Test]

   Test = Test + 1

# End Test 1

#--------------------------------------------------------------------------

my_final_test.Final_Test_Number = Test ',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,10 );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-0000000000ef","00000000-0000-0000-0000-0000000000e7",'Test',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-0000000000f1","00000000-0000-0000-0000-0000000000e7",'Testing_For',"ba5eda7a-def5-0000-0000-000000000004",0,'',"00000000-0000-0000-0000-0000000000ef",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-0000000000f3","00000000-0000-0000-0000-0000000000e7",'The_Requid',"ba5eda7a-def5-0000-0000-000000000004",0,'',"00000000-0000-0000-0000-0000000000f1",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000101","00000000-0000-0000-0000-0000000000fe",'New_Set',"ba5eda7a-def5-0000-0000-000000000001",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000103","00000000-0000-0000-0000-0000000000fe",'Previous_IH',"00000000-0000-0000-0000-00000000004e",0,'',"00000000-0000-0000-0000-000000000101",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000105","00000000-0000-0000-0000-0000000000fe",'This_Test_Number',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000103",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000107","00000000-0000-0000-0000-0000000000fe",'Testing_For',"ba5eda7a-def5-0000-0000-000000000004",0,'',"00000000-0000-0000-0000-000000000105",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000109","00000000-0000-0000-0000-0000000000fe",'Final_Entry',"ba5eda7a-def5-0000-0000-000000000001",0,'',"00000000-0000-0000-0000-000000000107",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-00000000010b","00000000-0000-0000-0000-0000000000fe",'Returned_IH',"00000000-0000-0000-0000-00000000004e",1,'',"00000000-0000-0000-0000-000000000109",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-00000000010d","00000000-0000-0000-0000-0000000000fe",'Returned_Test_Number',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-00000000010b",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000117","00000000-0000-0000-0000-000000000114",'Test',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000119","00000000-0000-0000-0000-000000000114",'Testing_For',"ba5eda7a-def5-0000-0000-000000000004",0,'',"00000000-0000-0000-0000-000000000117",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-00000000011f","00000000-0000-0000-0000-00000000011c",'Test',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000121","00000000-0000-0000-0000-00000000011c",'Testing_For',"ba5eda7a-def5-0000-0000-000000000004",0,'',"00000000-0000-0000-0000-00000000011f",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000127","00000000-0000-0000-0000-000000000124",'This_Test',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000129","00000000-0000-0000-0000-000000000124",'Returned_IH',"00000000-0000-0000-0000-00000000006f",1,'',"00000000-0000-0000-0000-000000000127",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-00000000012f","00000000-0000-0000-0000-00000000012c",'The_Timer_Enum',"00000000-0000-0000-0000-000000000081",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000131","00000000-0000-0000-0000-00000000012c",'The_Return_Value',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-00000000012f",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000137","00000000-0000-0000-0000-000000000134",'Test',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000139","00000000-0000-0000-0000-000000000134",'First_Enum_Input',"00000000-0000-0000-0000-00000000008b",0,'',"00000000-0000-0000-0000-000000000137",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-00000000013b","00000000-0000-0000-0000-000000000134",'Second_Enum_Input',"00000000-0000-0000-0000-000000000094",0,'',"00000000-0000-0000-0000-000000000139",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-00000000013d","00000000-0000-0000-0000-000000000134",'Third_Enum_Input',"00000000-0000-0000-0000-00000000009e",0,'',"00000000-0000-0000-0000-00000000013b",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000143","00000000-0000-0000-0000-000000000140",'Test',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-0000000001e0",1,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-0000000001e0","00000000-0000-0000-0000-0000000001e4","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-0000000001e0","00000000-0000-0000-0000-0000000001ed","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-0000000001e0","00000000-0000-0000-0000-0000000001e4",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-0000000001e0","00000000-0000-0000-0000-0000000001ed",0 );
INSERT INTO R_SIMP VALUES ( "00000000-0000-0000-0000-0000000001e0" );
INSERT INTO R_PART VALUES ( "00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-0000000001e0","00000000-0000-0000-0000-0000000001e4",0,1,'Has_one' );
INSERT INTO R_PART VALUES ( "00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-0000000001e0","00000000-0000-0000-0000-0000000001ed",0,0,'Has_a' );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000002d",0,"00000000-0000-0000-0000-000000000029" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000030",1,"00000000-0000-0000-0000-000000000029" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000038",0,"00000000-0000-0000-0000-000000000034" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000003b",1,"00000000-0000-0000-0000-000000000034" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000043",0,"00000000-0000-0000-0000-00000000003f" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000046",1,"00000000-0000-0000-0000-00000000003f" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000004e",0,"00000000-0000-0000-0000-00000000004a" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000051",1,"00000000-0000-0000-0000-00000000004a" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000059",0,"00000000-0000-0000-0000-000000000055" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000005c",1,"00000000-0000-0000-0000-000000000055" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000064",0,"00000000-0000-0000-0000-000000000060" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000067",1,"00000000-0000-0000-0000-000000000060" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000006f",0,"00000000-0000-0000-0000-00000000006b" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000072",1,"00000000-0000-0000-0000-00000000006b" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000007a",0,"00000000-0000-0000-0000-000000000076" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000007d",1,"00000000-0000-0000-0000-000000000076" );
INSERT INTO S_RANGE VALUES ( "00000000-0000-0000-0000-0000000000a8",'-10','10' );
INSERT INTO S_RANGE VALUES ( "00000000-0000-0000-0000-0000000000ac",'1','32767' );
INSERT INTO S_RANGE VALUES ( "00000000-0000-0000-0000-0000000000b5",'1','10' );
INSERT INTO S_RANGE VALUES ( "00000000-0000-0000-0000-0000000000b9",'-10','-1' );
INSERT INTO S_RANGE VALUES ( "00000000-0000-0000-0000-0000000000bd",'-32768','-1' );
INSERT INTO S_RANGE VALUES ( "00000000-0000-0000-0000-0000000000c1",'-32768','32767' );
INSERT INTO S_RANGE VALUES ( "00000000-0000-0000-0000-0000000000c5",'1.0','10.0' );
INSERT INTO S_RANGE VALUES ( "00000000-0000-0000-0000-0000000000c9",'-10.0','-1.0' );
INSERT INTO S_RANGE VALUES ( "00000000-0000-0000-0000-0000000000cd",'-10.0','10.0' );
INSERT INTO S_RANGE VALUES ( "00000000-0000-0000-0000-0000000000d1",'1.0','32767.0' );
INSERT INTO S_RANGE VALUES ( "00000000-0000-0000-0000-0000000000d5",'-32768.0','-1.0' );
INSERT INTO S_RANGE VALUES ( "00000000-0000-0000-0000-0000000000d9",'-32768.0','32767.0' );
INSERT INTO C_C VALUES ( "00000000-0000-0000-0000-000000000023","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000000",'UDT','',0,"00000000-0000-0000-0000-000000000000",0,'','User_Defined_Types' );
INSERT INTO C_I VALUES ( "00000000-0000-0000-0000-0000000000e9","00000000-0000-0000-0000-000000000000",'UDT','' );
INSERT INTO C_I VALUES ( "00000000-0000-0000-0000-000000000146","00000000-0000-0000-0000-000000000000",'UDTReport','' );
INSERT INTO C_I VALUES ( "00000000-0000-0000-0000-000000000184","00000000-0000-0000-0000-000000000000",'UDTBridge_Too_Far','' );
INSERT INTO C_I VALUES ( "00000000-0000-0000-0000-0000000001a8","00000000-0000-0000-0000-000000000000",'UDTTimer','' );
INSERT INTO C_P VALUES ( "00000000-0000-0000-0000-0000000000eb",'','Unnamed_Interface','','' );
INSERT INTO C_R VALUES ( "00000000-0000-0000-0000-000000000148",'','','Unnamed_Interface','' );
INSERT INTO C_R VALUES ( "00000000-0000-0000-0000-000000000186",'','','Unnamed_Interface','' );
INSERT INTO C_R VALUES ( "00000000-0000-0000-0000-0000000001aa",'','','Unnamed_Interface','' );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-0000000000ed","00000000-0000-0000-0000-0000000000e9",0,'Check_The_Integers','',1 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-0000000000f7","00000000-0000-0000-0000-0000000000e9",0,'Create_Report_Data','',3 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-0000000000fb","00000000-0000-0000-0000-0000000000e9",0,'Delete_Report_Data','',4 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-0000000000ff","00000000-0000-0000-0000-0000000000e9",0,'Create_New_Test_Data_Object_And_Link_It','',6 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000111","00000000-0000-0000-0000-0000000000e9",0,'Tidy_Up_Test_Data','',7 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000115","00000000-0000-0000-0000-0000000000e9",0,'Check_The_Predeclared_Integers','',2 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-00000000011d","00000000-0000-0000-0000-0000000000e9",0,'Report_No_UDT_Used','',5 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000125","00000000-0000-0000-0000-0000000000e9",0,'Create_An_Active_Object','',8 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-00000000012d","00000000-0000-0000-0000-0000000000e9",0,'Create_A_Timer_Enumeration','',9 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000135","00000000-0000-0000-0000-0000000000e9",0,'Check_The_Enumerators','',10 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000141","00000000-0000-0000-0000-0000000000e9",0,'Check_Constraint','',11 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-00000000014a","00000000-0000-0000-0000-000000000146",0,'Start_Test','',1 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000151","00000000-0000-0000-0000-000000000146",0,'Test_Passed','',2 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000156","00000000-0000-0000-0000-000000000146",0,'Test_Failed','',3 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-00000000015b","00000000-0000-0000-0000-000000000146",0,'Test_Unsupported','',4 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-00000000015e","00000000-0000-0000-0000-000000000146",0,'Test_Text','',5 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000162","00000000-0000-0000-0000-000000000146",0,'Domain_Test_Start','',6 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000165","00000000-0000-0000-0000-000000000146",0,'Domain_Test_Finished','',7 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000168","00000000-0000-0000-0000-000000000146",0,'Test_Real_Passed','',8 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-00000000016d","00000000-0000-0000-0000-000000000146",0,'Specify_A_Requid','',9 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000188","00000000-0000-0000-0000-000000000184",0,'I_H_Type_Across','',1 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-00000000018d","00000000-0000-0000-0000-000000000184",0,'User_Defined_Types_Across','',2 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000194","00000000-0000-0000-0000-000000000184",0,'Get_Environment_Type','',3 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000197","00000000-0000-0000-0000-000000000184",0,'Local_Bridge','',4 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-00000000019a","00000000-0000-0000-0000-000000000184",0,'Timer_Enum_Across_Bridge','',5 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-0000000001ac","00000000-0000-0000-0000-0000000001a8",0,'Set_Timer','',0 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-0000000001b9","00000000-0000-0000-0000-0000000001a8",0,'Reset_Timer','',0 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-0000000001bc","00000000-0000-0000-0000-0000000001a8",0,'Set_Absolute_Timer','',0 );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-0000000000ed","ba5eda7a-def5-0000-0000-000000000000",'Check_The_Integers','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-0000000000f7","ba5eda7a-def5-0000-0000-000000000000",'Create_Report_Data','',0,'',"00000000-0000-0000-0000-0000000000ed" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-0000000000fb","ba5eda7a-def5-0000-0000-000000000000",'Delete_Report_Data','',0,'',"00000000-0000-0000-0000-0000000000f7" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-0000000000ff","ba5eda7a-def5-0000-0000-000000000000",'Create_New_Test_Data_Object_And_Link_It','',0,'',"00000000-0000-0000-0000-0000000000fb" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000111","ba5eda7a-def5-0000-0000-000000000000",'Tidy_Up_Test_Data','',0,'',"00000000-0000-0000-0000-0000000000ff" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000115","ba5eda7a-def5-0000-0000-000000000000",'Check_The_Predeclared_Integers','',0,'',"00000000-0000-0000-0000-000000000111" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-00000000011d","ba5eda7a-def5-0000-0000-000000000000",'Report_No_UDT_Used','',0,'',"00000000-0000-0000-0000-000000000115" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000125","ba5eda7a-def5-0000-0000-000000000000",'Create_An_Active_Object','',0,'',"00000000-0000-0000-0000-00000000011d" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-00000000012d","ba5eda7a-def5-0000-0000-000000000000",'Create_A_Timer_Enumeration','',0,'',"00000000-0000-0000-0000-000000000125" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000135","ba5eda7a-def5-0000-0000-000000000000",'Check_The_Enumerators','',0,'',"00000000-0000-0000-0000-00000000012d" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000141","ba5eda7a-def5-0000-0000-000000000000",'Check_Constraint','',0,'',"00000000-0000-0000-0000-000000000135" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-00000000014a","ba5eda7a-def5-0000-0000-000000000000",'Start_Test','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000151","ba5eda7a-def5-0000-0000-000000000000",'Test_Passed','',0,'',"00000000-0000-0000-0000-00000000014a" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000156","ba5eda7a-def5-0000-0000-000000000000",'Test_Failed','',0,'',"00000000-0000-0000-0000-000000000151" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-00000000015b","ba5eda7a-def5-0000-0000-000000000000",'Test_Unsupported','',0,'',"00000000-0000-0000-0000-000000000156" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-00000000015e","ba5eda7a-def5-0000-0000-000000000000",'Test_Text','',0,'',"00000000-0000-0000-0000-00000000015b" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000162","ba5eda7a-def5-0000-0000-000000000000",'Domain_Test_Start','',0,'',"00000000-0000-0000-0000-00000000015e" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000165","ba5eda7a-def5-0000-0000-000000000000",'Domain_Test_Finished','',0,'',"00000000-0000-0000-0000-000000000162" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000168","ba5eda7a-def5-0000-0000-000000000000",'Test_Real_Passed','',0,'',"00000000-0000-0000-0000-000000000165" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-00000000016d","ba5eda7a-def5-0000-0000-000000000000",'Specify_A_Requid','',0,'',"00000000-0000-0000-0000-000000000168" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000188","ba5eda7a-def5-0000-0000-000000000000",'I_H_Type_Across','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-00000000018d","ba5eda7a-def5-0000-0000-000000000000",'User_Defined_Types_Across','',0,'',"00000000-0000-0000-0000-000000000188" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000194","ba5eda7a-def5-0000-0000-000000000000",'Get_Environment_Type','',0,'',"00000000-0000-0000-0000-00000000018d" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000197","ba5eda7a-def5-0000-0000-000000000000",'Local_Bridge','',0,'',"00000000-0000-0000-0000-000000000194" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-00000000019a","ba5eda7a-def5-0000-0000-000000000000",'Timer_Enum_Across_Bridge','',0,'',"00000000-0000-0000-0000-000000000197" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-0000000001ac","ba5eda7a-def5-0000-0000-000000000000",'Set_Timer','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-0000000001b9","ba5eda7a-def5-0000-0000-000000000000",'Reset_Timer','',0,'',"00000000-0000-0000-0000-0000000001ac" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-0000000001bc","ba5eda7a-def5-0000-0000-000000000000",'Set_Absolute_Timer','',0,'',"00000000-0000-0000-0000-0000000001b9" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000000f0","00000000-0000-0000-0000-0000000000ed","ba5eda7a-def5-0000-0000-000000000002",'Test','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000000f2","00000000-0000-0000-0000-0000000000ed","ba5eda7a-def5-0000-0000-000000000004",'Testing_For','',0,'',"00000000-0000-0000-0000-0000000000f0" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000000f4","00000000-0000-0000-0000-0000000000ed","ba5eda7a-def5-0000-0000-000000000004",'The_Requid','',0,'',"00000000-0000-0000-0000-0000000000f2" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000102","00000000-0000-0000-0000-0000000000ff","ba5eda7a-def5-0000-0000-000000000001",'New_Set','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000104","00000000-0000-0000-0000-0000000000ff","00000000-0000-0000-0000-00000000004e",'Previous_IH','',0,'',"00000000-0000-0000-0000-000000000102" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000106","00000000-0000-0000-0000-0000000000ff","ba5eda7a-def5-0000-0000-000000000002",'This_Test_Number','',0,'',"00000000-0000-0000-0000-000000000104" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000108","00000000-0000-0000-0000-0000000000ff","ba5eda7a-def5-0000-0000-000000000004",'Testing_For','',0,'',"00000000-0000-0000-0000-000000000106" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000010a","00000000-0000-0000-0000-0000000000ff","ba5eda7a-def5-0000-0000-000000000001",'Final_Entry','',0,'',"00000000-0000-0000-0000-000000000108" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000010c","00000000-0000-0000-0000-0000000000ff","00000000-0000-0000-0000-00000000004e",'Returned_IH','',1,'',"00000000-0000-0000-0000-00000000010a" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000010e","00000000-0000-0000-0000-0000000000ff","ba5eda7a-def5-0000-0000-000000000002",'Returned_Test_Number','',1,'',"00000000-0000-0000-0000-00000000010c" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000118","00000000-0000-0000-0000-000000000115","ba5eda7a-def5-0000-0000-000000000002",'Test','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000011a","00000000-0000-0000-0000-000000000115","ba5eda7a-def5-0000-0000-000000000004",'Testing_For','',0,'',"00000000-0000-0000-0000-000000000118" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000120","00000000-0000-0000-0000-00000000011d","ba5eda7a-def5-0000-0000-000000000002",'Test','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000122","00000000-0000-0000-0000-00000000011d","ba5eda7a-def5-0000-0000-000000000004",'Testing_For','',0,'',"00000000-0000-0000-0000-000000000120" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000128","00000000-0000-0000-0000-000000000125","ba5eda7a-def5-0000-0000-000000000002",'This_Test','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000012a","00000000-0000-0000-0000-000000000125","00000000-0000-0000-0000-00000000006f",'Returned_IH','',1,'',"00000000-0000-0000-0000-000000000128" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000130","00000000-0000-0000-0000-00000000012d","00000000-0000-0000-0000-000000000081",'The_Timer_Enum','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000132","00000000-0000-0000-0000-00000000012d","ba5eda7a-def5-0000-0000-000000000002",'The_Return_Value','',1,'',"00000000-0000-0000-0000-000000000130" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000138","00000000-0000-0000-0000-000000000135","ba5eda7a-def5-0000-0000-000000000002",'Test','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000013a","00000000-0000-0000-0000-000000000135","00000000-0000-0000-0000-00000000008b",'First_Enum_Input','',0,'',"00000000-0000-0000-0000-000000000138" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000013c","00000000-0000-0000-0000-000000000135","00000000-0000-0000-0000-000000000094",'Second_Enum_Input','',0,'',"00000000-0000-0000-0000-00000000013a" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000013e","00000000-0000-0000-0000-000000000135","00000000-0000-0000-0000-00000000009e",'Third_Enum_Input','',0,'',"00000000-0000-0000-0000-00000000013c" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000144","00000000-0000-0000-0000-000000000141","ba5eda7a-def5-0000-0000-000000000002",'Test','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000014c","00000000-0000-0000-0000-00000000014a","ba5eda7a-def5-0000-0000-000000000002",'Test_Number','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000014d","00000000-0000-0000-0000-00000000014a","ba5eda7a-def5-0000-0000-000000000004",'Requid','',0,'',"00000000-0000-0000-0000-00000000014c" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000014e","00000000-0000-0000-0000-00000000014a","ba5eda7a-def5-0000-0000-000000000004",'Invoking_Domain','',0,'',"00000000-0000-0000-0000-00000000014d" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000014f","00000000-0000-0000-0000-00000000014a","ba5eda7a-def5-0000-0000-000000000004",'Invoking_Object','',0,'',"00000000-0000-0000-0000-00000000014e" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000150","00000000-0000-0000-0000-00000000014a","ba5eda7a-def5-0000-0000-000000000004",'Purpose','',0,'',"00000000-0000-0000-0000-00000000014f" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000153","00000000-0000-0000-0000-000000000151","ba5eda7a-def5-0000-0000-000000000004",'Test_Object_Domain','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000154","00000000-0000-0000-0000-000000000151","ba5eda7a-def5-0000-0000-000000000002",'Test_Number','',0,'',"00000000-0000-0000-0000-000000000153" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000155","00000000-0000-0000-0000-000000000151","ba5eda7a-def5-0000-0000-000000000002",'Test_Value','',0,'',"00000000-0000-0000-0000-000000000154" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000158","00000000-0000-0000-0000-000000000156","ba5eda7a-def5-0000-0000-000000000004",'Failed_Domain_Object','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000159","00000000-0000-0000-0000-000000000156","ba5eda7a-def5-0000-0000-000000000002",'Failed_Test_Number','',0,'',"00000000-0000-0000-0000-000000000158" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000015a","00000000-0000-0000-0000-000000000156","ba5eda7a-def5-0000-0000-000000000002",'Failed_Test_Value','',0,'',"00000000-0000-0000-0000-000000000159" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000015d","00000000-0000-0000-0000-00000000015b","ba5eda7a-def5-0000-0000-000000000002",'Unsupported_Test_Number','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000160","00000000-0000-0000-0000-00000000015e","ba5eda7a-def5-0000-0000-000000000002",'Test_Number','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000161","00000000-0000-0000-0000-00000000015e","ba5eda7a-def5-0000-0000-000000000004",'Free_Text','',0,'',"00000000-0000-0000-0000-000000000160" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000164","00000000-0000-0000-0000-000000000162","ba5eda7a-def5-0000-0000-000000000004",'This_Domain_Name','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000167","00000000-0000-0000-0000-000000000165","ba5eda7a-def5-0000-0000-000000000004",'This_Domain_Name','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000016a","00000000-0000-0000-0000-000000000168","ba5eda7a-def5-0000-0000-000000000004",'Passed_Domain','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000016b","00000000-0000-0000-0000-000000000168","ba5eda7a-def5-0000-0000-000000000002",'Passed_Test_Number','',0,'',"00000000-0000-0000-0000-00000000016a" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000016c","00000000-0000-0000-0000-000000000168","ba5eda7a-def5-0000-0000-000000000003",'Test_Result','',0,'',"00000000-0000-0000-0000-00000000016b" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000016f","00000000-0000-0000-0000-00000000016d","ba5eda7a-def5-0000-0000-000000000002",'Requid_Test_Number','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000170","00000000-0000-0000-0000-00000000016d","ba5eda7a-def5-0000-0000-000000000004",'The_Requid_Itself','',0,'',"00000000-0000-0000-0000-00000000016f" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000018a","00000000-0000-0000-0000-000000000188","00000000-0000-0000-0000-000000000038",'Param1_IH','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000018b","00000000-0000-0000-0000-000000000188","ba5eda7a-def5-0000-0000-000000000001",'Success','',1,'',"00000000-0000-0000-0000-00000000018a" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000018c","00000000-0000-0000-0000-000000000188","ba5eda7a-def5-0000-0000-000000000002",'Success_Value','',1,'',"00000000-0000-0000-0000-00000000018b" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000018f","00000000-0000-0000-0000-00000000018d","00000000-0000-0000-0000-0000000000a8",'Param1','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000190","00000000-0000-0000-0000-00000000018d","00000000-0000-0000-0000-00000000008b",'Param2','',0,'',"00000000-0000-0000-0000-00000000018f" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000191","00000000-0000-0000-0000-00000000018d","ba5eda7a-def5-0000-0000-000000000001",'Success','',1,'',"00000000-0000-0000-0000-000000000190" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000192","00000000-0000-0000-0000-00000000018d","ba5eda7a-def5-0000-0000-000000000002",'Success_Value','',1,'',"00000000-0000-0000-0000-000000000191" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000193","00000000-0000-0000-0000-00000000018d","00000000-0000-0000-0000-0000000000ac",'A_Return_Param','',1,'',"00000000-0000-0000-0000-000000000192" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000196","00000000-0000-0000-0000-000000000194","ba5eda7a-def5-0000-0000-000000000002",'Type_Of_Environment','',1,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000199","00000000-0000-0000-0000-000000000197","ba5eda7a-def5-0000-0000-000000000002",'This_Test','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000019c","00000000-0000-0000-0000-00000000019a","ba5eda7a-def5-0000-0000-000000000002",'Test','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000001ae","00000000-0000-0000-0000-0000000001ac","00000000-0000-0000-0000-0000000000b0",'Timer_ID','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000001af","00000000-0000-0000-0000-0000000001ac","ba5eda7a-def5-0000-0000-000000000002",'Time_Remaining','',0,'',"00000000-0000-0000-0000-0000000001ae" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000001b0","00000000-0000-0000-0000-0000000001ac","00000000-0000-0000-0000-000000000081",'Granularity','',0,'',"00000000-0000-0000-0000-0000000001af" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000001b1","00000000-0000-0000-0000-0000000001ac","00000000-0000-0000-0000-0000000001b3",'Event_ID','',0,'',"00000000-0000-0000-0000-0000000001b0" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000001b5","00000000-0000-0000-0000-0000000001ac","00000000-0000-0000-0000-0000000001b7",'Instance_ID','',0,'',"00000000-0000-0000-0000-0000000001b1" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000001bb","00000000-0000-0000-0000-0000000001b9","00000000-0000-0000-0000-0000000000b0",'Timer_ID','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000001be","00000000-0000-0000-0000-0000000001bc","00000000-0000-0000-0000-0000000000b0",'Timer_ID','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000001bf","00000000-0000-0000-0000-0000000001bc","ba5eda7a-def5-0000-0000-000000000010",'Actual_Date','',0,'',"00000000-0000-0000-0000-0000000001be" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000001c0","00000000-0000-0000-0000-0000000001bc","00000000-0000-0000-0000-00000000000f",'Actual_Time','',0,'',"00000000-0000-0000-0000-0000000001bf" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000001c1","00000000-0000-0000-0000-0000000001bc","00000000-0000-0000-0000-0000000001b3",'Event_ID','',0,'',"00000000-0000-0000-0000-0000000001c0" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000001c2","00000000-0000-0000-0000-0000000001bc","00000000-0000-0000-0000-0000000001b7",'Instance_ID','',0,'',"00000000-0000-0000-0000-0000000001c1" );
INSERT INTO C_IR VALUES ( "00000000-0000-0000-0000-0000000000eb","00000000-0000-0000-0000-0000000000e9","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-0000000000ec" );
INSERT INTO C_IR VALUES ( "00000000-0000-0000-0000-000000000148","00000000-0000-0000-0000-000000000146","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000149" );
INSERT INTO C_IR VALUES ( "00000000-0000-0000-0000-000000000186","00000000-0000-0000-0000-000000000184","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000187" );
INSERT INTO C_IR VALUES ( "00000000-0000-0000-0000-0000000001aa","00000000-0000-0000-0000-0000000001a8","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-0000000001ab" );
INSERT INTO C_PO VALUES ( "00000000-0000-0000-0000-0000000000ec","00000000-0000-0000-0000-000000000023",'UDT',0,0,'' );
INSERT INTO C_PO VALUES ( "00000000-0000-0000-0000-000000000149","00000000-0000-0000-0000-000000000023",'Report',0,0,'RPT' );
INSERT INTO C_PO VALUES ( "00000000-0000-0000-0000-000000000187","00000000-0000-0000-0000-000000000023",'Bridge_Too_Far',0,0,'BTF' );
INSERT INTO C_PO VALUES ( "00000000-0000-0000-0000-0000000001ab","00000000-0000-0000-0000-000000000023",'Timer',0,0,'TIM' );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-000000000171","00000000-0000-0000-0000-00000000014a","00000000-0000-0000-0000-000000000148" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-000000000173","00000000-0000-0000-0000-000000000151","00000000-0000-0000-0000-000000000148" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-000000000175","00000000-0000-0000-0000-000000000156","00000000-0000-0000-0000-000000000148" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-000000000177","00000000-0000-0000-0000-00000000015b","00000000-0000-0000-0000-000000000148" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-000000000179","00000000-0000-0000-0000-00000000015e","00000000-0000-0000-0000-000000000148" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-00000000017b","00000000-0000-0000-0000-000000000162","00000000-0000-0000-0000-000000000148" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-00000000017d","00000000-0000-0000-0000-000000000165","00000000-0000-0000-0000-000000000148" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-00000000017f","00000000-0000-0000-0000-000000000168","00000000-0000-0000-0000-000000000148" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-000000000181","00000000-0000-0000-0000-00000000016d","00000000-0000-0000-0000-000000000148" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-00000000019d","00000000-0000-0000-0000-000000000188","00000000-0000-0000-0000-000000000186" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-00000000019f","00000000-0000-0000-0000-00000000018d","00000000-0000-0000-0000-000000000186" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-0000000001a1","00000000-0000-0000-0000-000000000194","00000000-0000-0000-0000-000000000186" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-0000000001a3","00000000-0000-0000-0000-000000000197","00000000-0000-0000-0000-000000000186" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-0000000001a5","00000000-0000-0000-0000-00000000019a","00000000-0000-0000-0000-000000000186" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-0000000001c3","00000000-0000-0000-0000-0000000001ac","00000000-0000-0000-0000-0000000001aa" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-0000000001c5","00000000-0000-0000-0000-0000000001b9","00000000-0000-0000-0000-0000000001aa" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-0000000001c7","00000000-0000-0000-0000-0000000001bc","00000000-0000-0000-0000-0000000001aa" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-000000000402","00000000-0000-0000-0000-0000000000ed","00000000-0000-0000-0000-0000000000eb" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-000000000404","00000000-0000-0000-0000-0000000000f7","00000000-0000-0000-0000-0000000000eb" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-000000000406","00000000-0000-0000-0000-0000000000fb","00000000-0000-0000-0000-0000000000eb" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-000000000408","00000000-0000-0000-0000-0000000000ff","00000000-0000-0000-0000-0000000000eb" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-00000000040a","00000000-0000-0000-0000-000000000111","00000000-0000-0000-0000-0000000000eb" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-00000000040c","00000000-0000-0000-0000-000000000115","00000000-0000-0000-0000-0000000000eb" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-00000000040e","00000000-0000-0000-0000-00000000011d","00000000-0000-0000-0000-0000000000eb" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-000000000410","00000000-0000-0000-0000-000000000125","00000000-0000-0000-0000-0000000000eb" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-000000000412","00000000-0000-0000-0000-00000000012d","00000000-0000-0000-0000-0000000000eb" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-000000000414","00000000-0000-0000-0000-000000000135","00000000-0000-0000-0000-0000000000eb" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-000000000416","00000000-0000-0000-0000-000000000141","00000000-0000-0000-0000-0000000000eb" );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-000000000171",'','','',3,2,1 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-000000000173",'','','',3,2,2 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-000000000175",'','','',3,2,3 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-000000000177",'','','',3,2,4 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-000000000179",'','','',3,2,5 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-00000000017b",'','','',3,2,6 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-00000000017d",'','','',3,2,7 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-00000000017f",'','','the_test = Passed_Test_Number

the_val  = Test_Result

the_domain = Passed_Domain

$INLINE
fprintf(stderr, "Object %s Test Number %d has PASSED with  %6.2f\n",
        the_domain, the_test, the_val);
$ENDINLINE




',3,2,8 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-000000000181",'','','',3,2,9 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-00000000019d",'','','',3,2,1 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-00000000019f",'','','',3,2,2 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-0000000001a1",'','','$INLINE
   fprintf(stderr,"STUB where are we\n");
$ENDINLINE

Type_Of_Environment = 0
',3,2,3 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-0000000001a3",'','','


[Second_Active_Object] = UDT8::Create_An_Active_Object[This_Test]

generate AAO1:Go(''One'') to Second_Active_Object

',3,2,4 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-0000000001a5",'','','',3,2,5 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-0000000001c3",'','','',3,2,0 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-0000000001c5",'','','',3,2,0 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-0000000001c7",'','','',3,2,0 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-000000000402",'','','',3,6,0 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-000000000404",'','','',3,6,0 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-000000000406",'','','',3,6,0 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-000000000408",'','','',3,6,0 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-00000000040a",'','','',3,6,0 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-00000000040c",'','','',3,6,0 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-00000000040e",'','','',3,6,0 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-000000000410",'','','',3,6,0 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-000000000412",'','','',3,6,0 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-000000000414",'','','',3,6,0 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-000000000416",'','','',3,6,0 );
INSERT INTO SM_SM VALUES ( "00000000-0000-0000-0000-000000000235",'',0 );
INSERT INTO SM_SM VALUES ( "00000000-0000-0000-0000-0000000002d1",'',0 );
INSERT INTO SM_STATE VALUES ( "00000000-0000-0000-0000-00000000023d","00000000-0000-0000-0000-000000000235","00000000-0000-0000-0000-000000000000",'Idle',1,0 );
INSERT INTO SM_STATE VALUES ( "00000000-0000-0000-0000-000000000246","00000000-0000-0000-0000-000000000235","00000000-0000-0000-0000-000000000000",'Testing',2,0 );
INSERT INTO SM_STATE VALUES ( "00000000-0000-0000-0000-0000000002d9","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000",'Idle',1,0 );
INSERT INTO SM_STATE VALUES ( "00000000-0000-0000-0000-0000000002e2","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000",'Do_It',2,0 );
INSERT INTO SM_STATE VALUES ( "00000000-0000-0000-0000-0000000002eb","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000",'Do_It_Again',3,0 );
INSERT INTO SM_STATE VALUES ( "00000000-0000-0000-0000-0000000002f4","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000",'It_Failed',4,0 );
INSERT INTO SM_STATE VALUES ( "00000000-0000-0000-0000-0000000002fd","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000",'It_Passed',5,0 );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-00000000024f","00000000-0000-0000-0000-000000000235","00000000-0000-0000-0000-000000000000",1,'Start_To_Test',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000306","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000",1,'Go',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-00000000032c","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000",2,'Go_Again',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000354","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000",3,'Failed',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-00000000037a","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000",4,'Passed',0,'','','' );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-00000000023d","00000000-0000-0000-0000-00000000024f","00000000-0000-0000-0000-000000000235","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-000000000246","00000000-0000-0000-0000-00000000024f","00000000-0000-0000-0000-000000000235","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000002d9","00000000-0000-0000-0000-000000000306","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000002e2","00000000-0000-0000-0000-000000000306","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000002eb","00000000-0000-0000-0000-000000000306","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000002f4","00000000-0000-0000-0000-000000000306","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000002fd","00000000-0000-0000-0000-000000000306","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000002d9","00000000-0000-0000-0000-00000000032c","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000002e2","00000000-0000-0000-0000-00000000032c","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000002eb","00000000-0000-0000-0000-00000000032c","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000002f4","00000000-0000-0000-0000-00000000032c","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000002fd","00000000-0000-0000-0000-00000000032c","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000002d9","00000000-0000-0000-0000-000000000354","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000002e2","00000000-0000-0000-0000-000000000354","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000002eb","00000000-0000-0000-0000-000000000354","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000002f4","00000000-0000-0000-0000-000000000354","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000002fd","00000000-0000-0000-0000-000000000354","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000002d9","00000000-0000-0000-0000-00000000037a","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000002e2","00000000-0000-0000-0000-00000000037a","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000002eb","00000000-0000-0000-0000-00000000037a","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000002f4","00000000-0000-0000-0000-00000000037a","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000002fd","00000000-0000-0000-0000-00000000037a","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_NSTXN VALUES ( "00000000-0000-0000-0000-000000000263","00000000-0000-0000-0000-000000000235","00000000-0000-0000-0000-00000000023d","00000000-0000-0000-0000-00000000024f","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_NSTXN VALUES ( "00000000-0000-0000-0000-0000000003a0","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-0000000002d9","00000000-0000-0000-0000-000000000306","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_NSTXN VALUES ( "00000000-0000-0000-0000-0000000003ae","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-0000000002e2","00000000-0000-0000-0000-00000000032c","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_NSTXN VALUES ( "00000000-0000-0000-0000-0000000003bc","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-0000000002e2","00000000-0000-0000-0000-000000000354","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_NSTXN VALUES ( "00000000-0000-0000-0000-0000000003ca","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-0000000002eb","00000000-0000-0000-0000-000000000354","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_NSTXN VALUES ( "00000000-0000-0000-0000-0000000003d8","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-0000000002eb","00000000-0000-0000-0000-00000000037a","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EIGN VALUES ( "00000000-0000-0000-0000-000000000246","00000000-0000-0000-0000-00000000024f","00000000-0000-0000-0000-000000000235","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-0000000002e2","00000000-0000-0000-0000-000000000306","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-0000000002eb","00000000-0000-0000-0000-000000000306","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-0000000002f4","00000000-0000-0000-0000-000000000306","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-0000000002fd","00000000-0000-0000-0000-000000000306","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-0000000002d9","00000000-0000-0000-0000-00000000032c","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-0000000002eb","00000000-0000-0000-0000-00000000032c","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-0000000002f4","00000000-0000-0000-0000-00000000032c","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-0000000002fd","00000000-0000-0000-0000-00000000032c","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-0000000002d9","00000000-0000-0000-0000-000000000354","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-0000000002f4","00000000-0000-0000-0000-000000000354","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-0000000002fd","00000000-0000-0000-0000-000000000354","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-0000000002d9","00000000-0000-0000-0000-00000000037a","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-0000000002e2","00000000-0000-0000-0000-00000000037a","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-0000000002f4","00000000-0000-0000-0000-00000000037a","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-0000000002fd","00000000-0000-0000-0000-00000000037a","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_TXN VALUES ( "00000000-0000-0000-0000-000000000263","00000000-0000-0000-0000-000000000235","00000000-0000-0000-0000-000000000246","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_TXN VALUES ( "00000000-0000-0000-0000-0000000003a0","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-0000000002e2","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_TXN VALUES ( "00000000-0000-0000-0000-0000000003ae","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-0000000002eb","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_TXN VALUES ( "00000000-0000-0000-0000-0000000003bc","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-0000000002f4","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_TXN VALUES ( "00000000-0000-0000-0000-0000000003ca","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-0000000002f4","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_TXN VALUES ( "00000000-0000-0000-0000-0000000003d8","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-0000000002fd","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_MOORE VALUES ( "00000000-0000-0000-0000-000000000235" );
INSERT INTO SM_MOORE VALUES ( "00000000-0000-0000-0000-0000000002d1" );
INSERT INTO SM_MOAH VALUES ( "00000000-0000-0000-0000-00000000023f","00000000-0000-0000-0000-000000000235","00000000-0000-0000-0000-00000000023d" );
INSERT INTO SM_MOAH VALUES ( "00000000-0000-0000-0000-000000000248","00000000-0000-0000-0000-000000000235","00000000-0000-0000-0000-000000000246" );
INSERT INTO SM_MOAH VALUES ( "00000000-0000-0000-0000-0000000002db","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-0000000002d9" );
INSERT INTO SM_MOAH VALUES ( "00000000-0000-0000-0000-0000000002e4","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-0000000002e2" );
INSERT INTO SM_MOAH VALUES ( "00000000-0000-0000-0000-0000000002ed","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-0000000002eb" );
INSERT INTO SM_MOAH VALUES ( "00000000-0000-0000-0000-0000000002f6","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-0000000002f4" );
INSERT INTO SM_MOAH VALUES ( "00000000-0000-0000-0000-0000000002ff","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-0000000002fd" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-00000000023f","00000000-0000-0000-0000-000000000235" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-000000000248","00000000-0000-0000-0000-000000000235" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-000000000267","00000000-0000-0000-0000-000000000235" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-0000000002db","00000000-0000-0000-0000-0000000002d1" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-0000000002e4","00000000-0000-0000-0000-0000000002d1" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-0000000002ed","00000000-0000-0000-0000-0000000002d1" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-0000000002f6","00000000-0000-0000-0000-0000000002d1" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-0000000002ff","00000000-0000-0000-0000-0000000002d1" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-0000000003a4","00000000-0000-0000-0000-0000000002d1" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-0000000003b2","00000000-0000-0000-0000-0000000002d1" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-0000000003c0","00000000-0000-0000-0000-0000000002d1" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-0000000003ce","00000000-0000-0000-0000-0000000002d1" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-0000000003dc","00000000-0000-0000-0000-0000000002d1" );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-00000000023f","00000000-0000-0000-0000-000000000235",3,'','',0 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-000000000248","00000000-0000-0000-0000-000000000235",3,'#--------------------------------------------------------------------------
# pass the ''this'' IH to a bridge for dereferencing.
#--------------------------------------------------------------------------

[] = RPT1:Start_Test[Where_To_Start, "1103-0000-01-0311", "UDT", "Terminator typing", "Pass in this IH, decode types"]

[the_result, result_value] = BTF1:I_H_Type_Across[this]

if the_result = TRUE then

   if this.Some_Enumeration = ''Four'' then
      [] = RPT2:Test_Passed["Decode this IH", Where_To_Start, result_value]
   else
      [] = RPT3:Test_Failed["Decode this IH", Where_To_Start, result_value]
   endif

else
   [] = RPT3:Test_Failed["Decode this IH", Where_To_Start, result_value]
endif
','',2 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-000000000267","00000000-0000-0000-0000-000000000235",3,'','',6 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-0000000002db","00000000-0000-0000-0000-0000000002d1",3,'','',0 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-0000000002e4","00000000-0000-0000-0000-0000000002d1",3,'This_Test = this.The_Test_Number

[] = RPT1:Start_Test[This_Test, "Null Requid", "UDT", "Active Object Enumeration", "Hard coded enumeration"]

if Enum_Parameter = ''One'' then

   # It is worth noting at this point that the test number (base_integer_type) is
   # being stuffed into the parameter, which is defined as a subtype.
   # If the test number is greater than the range of the subtype, then
   # we will get a constraint error at run time.

   # Ensure that the range of the subtype is sufficient to handle the 
   # test number. This is a consequence of using subtypes in ada.
   # If we had used proper strong typing, this mish-mash wouldn''t happen.

   generate AAO2:Go_Again(''Two'', this.The_Test_Number) to this

else

   this.Why = ''Enumeral''
   generate AAO3:Failed(''Enumeral'') to this

endif
','',2 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-0000000002ed","00000000-0000-0000-0000-0000000002d1",3,'if Enum_Parameter = ''Two'' then

   if Subset_Param = this.The_Test_Number then
      this.Why = ''OK''
      generate AAO4:Passed(''OK'') to this
   else
      this.Why = ''Number''
      generate AAO3:Failed(''Number'') to this
   endif

else
   this.Why = ''Enumeral''
   generate AAO3:Failed(''Enumeral'') to this
endif
','',2 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-0000000002f6","00000000-0000-0000-0000-0000000002d1",3,'Failed_Because = 0

if Reason = ''Enumeral'' then
   Failed_Because = 1
else

   if Reason = ''Number'' then
      Failed_Because = 2
   else
      Failed_Because = 9
   endif

endif

this_test = this.The_Test_Number

[] = RPT3:Test_Failed["Active UDT Object", this_test,  Failed_Because]

','',2 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-0000000002ff","00000000-0000-0000-0000-0000000002d1",3,'this_test = this.The_Test_Number

if this.Why = Reason then 

   if this.Why = ''OK'' then
      [] = RPT2:Test_Passed["Active UDT Object", this_test, 0]
   else
      [] = RPT3:Test_Failed["Active UDT Object", this_test,  -99]
   endif

else
      [] = RPT3:Test_Failed["Active UDT Object", this_test,  -999]
endif
','',2 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-0000000003a4","00000000-0000-0000-0000-0000000002d1",3,'','',6 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-0000000003b2","00000000-0000-0000-0000-0000000002d1",3,'','',6 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-0000000003c0","00000000-0000-0000-0000-0000000002d1",3,'','',6 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-0000000003ce","00000000-0000-0000-0000-0000000002d1",3,'','',6 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-0000000003dc","00000000-0000-0000-0000-0000000002d1",3,'','',6 );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-000000000261","00000000-0000-0000-0000-000000000235",'Where_To_Start','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-00000000024f","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-00000000032a","00000000-0000-0000-0000-0000000002d1",'Enum_Parameter','',"00000000-0000-0000-0000-00000000008b",'',"00000000-0000-0000-0000-000000000306","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-000000000350","00000000-0000-0000-0000-0000000002d1",'Enum_Parameter','',"00000000-0000-0000-0000-00000000008b",'',"00000000-0000-0000-0000-00000000032c","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-000000000352","00000000-0000-0000-0000-0000000002d1",'Subset_Param','',"00000000-0000-0000-0000-0000000000ac",'',"00000000-0000-0000-0000-00000000032c","00000000-0000-0000-0000-000000000350" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-000000000378","00000000-0000-0000-0000-0000000002d1",'Reason','',"00000000-0000-0000-0000-0000000000dd",'',"00000000-0000-0000-0000-000000000354","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-00000000039e","00000000-0000-0000-0000-0000000002d1",'Reason','',"00000000-0000-0000-0000-0000000000dd",'',"00000000-0000-0000-0000-00000000037a","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_ISM VALUES ( "00000000-0000-0000-0000-000000000235","00000000-0000-0000-0000-000000000034" );
INSERT INTO SM_ISM VALUES ( "00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-00000000006b" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-00000000024f","00000000-0000-0000-0000-000000000235","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000306","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-00000000032c","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000354","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-00000000037a","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-00000000024f","00000000-0000-0000-0000-000000000235","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000306","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-00000000032c","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000354","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-00000000037a","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_TAH VALUES ( "00000000-0000-0000-0000-000000000267","00000000-0000-0000-0000-000000000235","00000000-0000-0000-0000-000000000263" );
INSERT INTO SM_TAH VALUES ( "00000000-0000-0000-0000-0000000003a4","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-0000000003a0" );
INSERT INTO SM_TAH VALUES ( "00000000-0000-0000-0000-0000000003b2","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-0000000003ae" );
INSERT INTO SM_TAH VALUES ( "00000000-0000-0000-0000-0000000003c0","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-0000000003bc" );
INSERT INTO SM_TAH VALUES ( "00000000-0000-0000-0000-0000000003ce","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-0000000003ca" );
INSERT INTO SM_TAH VALUES ( "00000000-0000-0000-0000-0000000003dc","00000000-0000-0000-0000-0000000002d1","00000000-0000-0000-0000-0000000003d8" );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000004",1,"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000000",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000006",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000009",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000000c",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000000f",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000012",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000015",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000018",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000001b",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000001e",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000021",1,"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000000",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000023",1,"00000000-0000-0000-0000-000000000021","00000000-0000-0000-0000-000000000000",2 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000025",1,"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000023",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000027",1,"00000000-0000-0000-0000-000000000021","00000000-0000-0000-0000-000000000000",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000029",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000002d",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000030",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000034",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000038",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000003b",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000003f",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000043",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000046",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000004a",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000004e",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000051",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000055",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000059",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000005c",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000060",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000064",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000067",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000006b",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000006f",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000072",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000076",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000007a",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000007d",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000081",1,"00000000-0000-0000-0000-000000000027","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000008b",1,"00000000-0000-0000-0000-000000000027","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000094",1,"00000000-0000-0000-0000-000000000027","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000009e",1,"00000000-0000-0000-0000-000000000027","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000a8",1,"00000000-0000-0000-0000-000000000027","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000ac",1,"00000000-0000-0000-0000-000000000027","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000b0",1,"00000000-0000-0000-0000-000000000027","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000b3",1,"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000023",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000b5",1,"00000000-0000-0000-0000-0000000000b3","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000b9",1,"00000000-0000-0000-0000-0000000000b3","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000bd",1,"00000000-0000-0000-0000-0000000000b3","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000c1",1,"00000000-0000-0000-0000-0000000000b3","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000c5",1,"00000000-0000-0000-0000-0000000000b3","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000c9",1,"00000000-0000-0000-0000-0000000000b3","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000cd",1,"00000000-0000-0000-0000-0000000000b3","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000d1",1,"00000000-0000-0000-0000-0000000000b3","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000d5",1,"00000000-0000-0000-0000-0000000000b3","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000d9",1,"00000000-0000-0000-0000-0000000000b3","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000dd",1,"00000000-0000-0000-0000-0000000000b3","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000e5",1,"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000023",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000e7",1,"00000000-0000-0000-0000-0000000000e5","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000e9",1,"00000000-0000-0000-0000-000000000027","00000000-0000-0000-0000-000000000000",6 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000f6",1,"00000000-0000-0000-0000-0000000000e5","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000fa",1,"00000000-0000-0000-0000-0000000000e5","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000fe",1,"00000000-0000-0000-0000-0000000000e5","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000110",1,"00000000-0000-0000-0000-0000000000e5","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000114",1,"00000000-0000-0000-0000-0000000000e5","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000011c",1,"00000000-0000-0000-0000-0000000000e5","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000124",1,"00000000-0000-0000-0000-0000000000e5","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000012c",1,"00000000-0000-0000-0000-0000000000e5","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000134",1,"00000000-0000-0000-0000-0000000000e5","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000140",1,"00000000-0000-0000-0000-0000000000e5","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000146",1,"00000000-0000-0000-0000-000000000027","00000000-0000-0000-0000-000000000000",6 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000184",1,"00000000-0000-0000-0000-000000000027","00000000-0000-0000-0000-000000000000",6 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001a8",1,"00000000-0000-0000-0000-000000000027","00000000-0000-0000-0000-000000000000",6 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001b3",1,"00000000-0000-0000-0000-000000000027","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001b7",1,"00000000-0000-0000-0000-000000000027","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001ca",1,"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000023",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001cc",1,"00000000-0000-0000-0000-0000000001ca","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001ce",1,"00000000-0000-0000-0000-0000000001ca","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001d0",1,"00000000-0000-0000-0000-0000000001ca","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001d2",1,"00000000-0000-0000-0000-0000000001ca","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001d4",1,"00000000-0000-0000-0000-0000000001ca","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001d6",1,"00000000-0000-0000-0000-0000000001ca","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001d8",1,"00000000-0000-0000-0000-0000000001ca","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001da",1,"00000000-0000-0000-0000-0000000001ca","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001dc",1,"00000000-0000-0000-0000-0000000001ca","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001de",1,"00000000-0000-0000-0000-0000000001ca","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001e0",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000419",1,"00000000-0000-0000-0000-000000000027","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO model VALUES ( 'maslin' );
INSERT INTO option VALUES ( 'maslin','actiondialect','WASL' );
INSERT INTO option VALUES ( 'maslin','projectroot','./convertdir/UDT/' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000006","00000000-0000-0000-0000-000000000000",'MASLtype','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000009","00000000-0000-0000-0000-000000000000",'MASLunique','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000000c","00000000-0000-0000-0000-000000000000",'device','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000000f","00000000-0000-0000-0000-000000000000",'duration','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000012","00000000-0000-0000-0000-000000000000",'wstring','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000015","00000000-0000-0000-0000-000000000000",'long_integer','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000018","00000000-0000-0000-0000-000000000000",'byte','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000001b","00000000-0000-0000-0000-000000000000",'wcharacter','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000001e","00000000-0000-0000-0000-000000000000",'character','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000002d","00000000-0000-0000-0000-000000000000",'inst_ref<Object_With_Integers>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000030","00000000-0000-0000-0000-000000000000",'inst_ref_set<Object_With_Integers>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000038","00000000-0000-0000-0000-000000000000",'inst_ref<Object_Into_Bridge>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000003b","00000000-0000-0000-0000-000000000000",'inst_ref_set<Object_Into_Bridge>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000043","00000000-0000-0000-0000-000000000000",'inst_ref<Report_Data>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000046","00000000-0000-0000-0000-000000000000",'inst_ref_set<Report_Data>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000004e","00000000-0000-0000-0000-000000000000",'inst_ref<Test_Data>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000051","00000000-0000-0000-0000-000000000000",'inst_ref_set<Test_Data>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000059","00000000-0000-0000-0000-000000000000",'inst_ref<Object_With_Reals>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000005c","00000000-0000-0000-0000-000000000000",'inst_ref_set<Object_With_Reals>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000064","00000000-0000-0000-0000-000000000000",'inst_ref<Final_Test_Data>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000067","00000000-0000-0000-0000-000000000000",'inst_ref_set<Final_Test_Data>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000006f","00000000-0000-0000-0000-000000000000",'inst_ref<An_Active_Object>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000072","00000000-0000-0000-0000-000000000000",'inst_ref_set<An_Active_Object>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000007a","00000000-0000-0000-0000-000000000000",'inst_ref<Object_With_Enumerators>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000007d","00000000-0000-0000-0000-000000000000",'inst_ref_set<Object_With_Enumerators>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000081","00000000-0000-0000-0000-000000000000",'Time_Unit',' Used to define the granularity of Time
','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000008b","00000000-0000-0000-0000-000000000000",'Simple_Enumeration_Type','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000094","00000000-0000-0000-0000-000000000000",'Colour_Type','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000009e","00000000-0000-0000-0000-000000000000",'Temp_Type','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000a8","00000000-0000-0000-0000-000000000000",'Subset_Zero_Of_Integer','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000ac","00000000-0000-0000-0000-000000000000",'One_To_Maximum_Integer',' Insert system defined integer''last
','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000b0","00000000-0000-0000-0000-000000000000",'Timer_ID','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000b5","00000000-0000-0000-0000-000000000000",'Subset_1_Of_Integer','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000b9","00000000-0000-0000-0000-000000000000",'Subset_Minus_1_Of_Integer','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000bd","00000000-0000-0000-0000-000000000000",'Minimum_To_Minus_One_Integer','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000c1","00000000-0000-0000-0000-000000000000",'Minimum_To_Maximum_Integer','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000c5","00000000-0000-0000-0000-000000000000",'Subset_1_Of_Real','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000c9","00000000-0000-0000-0000-000000000000",'Subset_Minus_1_Of_Real','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000cd","00000000-0000-0000-0000-000000000000",'Subset_Zero_Of_Real','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000d1","00000000-0000-0000-0000-000000000000",'One_To_Maximum_Of_Real','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000d5","00000000-0000-0000-0000-000000000000",'Minimum_To_Minus_One_Of_Real','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-000000000000",'Mminimum_To_Maximum_Of_Real','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000dd","00000000-0000-0000-0000-000000000000",'Active_Object_Status_Type','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000001b3","00000000-0000-0000-0000-000000000000",'event','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000001b7","00000000-0000-0000-0000-000000000000",'instance','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000419","00000000-0000-0000-0000-000000000000",'Active_Object_Status_Type','','' );
