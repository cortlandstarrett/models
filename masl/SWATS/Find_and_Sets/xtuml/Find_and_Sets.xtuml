-- root-types-contained: Package_c
-- BP 7.1 content: StreamData syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000029",'Report_Data',2,'RD','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000034",'Left_Obj',3,'objLO','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-00000000003f",'Right_Obj',4,'objRO','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-00000000004a",'Assoc_Obj',5,'objAO','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000055",'Find_Many',9,'objFM',' This object verifies the statements:
 
 	find
 	find-all
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000060",'Find_Single',10,'objFSI',' This object verifies the statements:
 
 	find-one
 	find-only
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-00000000006b",'Find_Set',12,'objFS',' This object verifies that the following statements maybe peroformed on an existing set:
 
 	find-one
 	find-only
 	find
 	find-all
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000076",'Object_A',15,'objA',' This object contains data that is manipulated by other objects.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000081",'Object_B',16,'objB',' Object_B contains no instances and hence any operations performed upon it will return an empty set are an undefined instance handle.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-00000000008c",'Object_E',19,'objE',' This object contains data that is manipulated by other objects.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000152","00000000-0000-0000-0000-000000000029","00000000-0000-0000-0000-000000000000",'','','','Report_Data_Unique_id',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000015a","00000000-0000-0000-0000-000000000029","00000000-0000-0000-0000-000000000152",'','','','Reported_Domain_Number',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000160","00000000-0000-0000-0000-000000000034","00000000-0000-0000-0000-000000000000",'','','','objLO_id',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000168","00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-000000000000",'','','','objRO_id',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000170","00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-000000000000",'','','','idAO',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000186","00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-000000000000",'',' Preferred identifier.
','','idFM',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000018e","00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-000000000186",'',' This attribute is manipulated to indicate that the required operation was successful.
','','ResultFM',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000019b","00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-00000000018e",'','','','current_state',0,"ba5eda7a-def5-0000-0000-000000000006",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000001b3","00000000-0000-0000-0000-000000000060","00000000-0000-0000-0000-000000000000",'',' Preferred identifier.
','','idFSI',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000001bb","00000000-0000-0000-0000-000000000060","00000000-0000-0000-0000-0000000001b3",'',' This attribute is manipulated to indicate that the required operation was successful.
','','ResultFSI',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000001cc","00000000-0000-0000-0000-000000000060","00000000-0000-0000-0000-0000000001bb",'','','','current_state',0,"ba5eda7a-def5-0000-0000-000000000006",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000001ea","00000000-0000-0000-0000-00000000006b","00000000-0000-0000-0000-000000000000",'',' Preferred identifier.
','','idFS',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000001f2","00000000-0000-0000-0000-00000000006b","00000000-0000-0000-0000-0000000001ea",'',' This attribute is manipulated to indicate that the required operation was successful.
','','ResultFS',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000001ff","00000000-0000-0000-0000-00000000006b","00000000-0000-0000-0000-0000000001f2",'','','','current_state',0,"ba5eda7a-def5-0000-0000-000000000006",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000217","00000000-0000-0000-0000-000000000076","00000000-0000-0000-0000-000000000000",'',' Preferred identifier.
','','idA',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000021f","00000000-0000-0000-0000-000000000076","00000000-0000-0000-0000-000000000217",'',' An integer.
','','IntegerA',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000225","00000000-0000-0000-0000-000000000081","00000000-0000-0000-0000-000000000000",'',' Preferred identifier.
','','idB',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000022d","00000000-0000-0000-0000-00000000008c","00000000-0000-0000-0000-000000000000",'',' Preferred identifier.
','','idE',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000235","00000000-0000-0000-0000-00000000008c","00000000-0000-0000-0000-00000000022d",'',' An integer.
','','IntegerA',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000023b","00000000-0000-0000-0000-00000000008c","00000000-0000-0000-0000-000000000235",'',' An integer.
','','IntegerB',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000002ad","00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-000000000170",'','','','objLO_id',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000002c0","00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-0000000002ad",'','','','objRO_id',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000029" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000029" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000029" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000034" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000034" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000034" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000055" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000055" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000055" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000060" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000060" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000060" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000076" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000076" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000076" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000081" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000081" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000081" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-00000000008c" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-00000000008c" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-00000000008c" );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000152","00000000-0000-0000-0000-000000000029",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000160","00000000-0000-0000-0000-000000000034",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000168","00000000-0000-0000-0000-00000000003f",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000186","00000000-0000-0000-0000-000000000055",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-0000000001b3","00000000-0000-0000-0000-000000000060",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-0000000001ea","00000000-0000-0000-0000-00000000006b",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000217","00000000-0000-0000-0000-000000000076",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000225","00000000-0000-0000-0000-000000000081",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-00000000022d","00000000-0000-0000-0000-00000000008c",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-0000000002ad","00000000-0000-0000-0000-00000000004a",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-0000000002c0","00000000-0000-0000-0000-00000000004a",0,'' );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000152","00000000-0000-0000-0000-000000000029" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000015a","00000000-0000-0000-0000-000000000029" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000160","00000000-0000-0000-0000-000000000034" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000168","00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000170","00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000186","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000018e","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000019b","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000001b3","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000001bb","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000001cc","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000001ea","00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000001f2","00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000001ff","00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000217","00000000-0000-0000-0000-000000000076" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000021f","00000000-0000-0000-0000-000000000076" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000225","00000000-0000-0000-0000-000000000081" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000022d","00000000-0000-0000-0000-00000000008c" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000235","00000000-0000-0000-0000-00000000008c" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000023b","00000000-0000-0000-0000-00000000008c" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000152","00000000-0000-0000-0000-000000000029" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000015a","00000000-0000-0000-0000-000000000029" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000160","00000000-0000-0000-0000-000000000034" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000168","00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000170","00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000186","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000018e","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000019b","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000001b3","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000001bb","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000001cc","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000001ea","00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000001f2","00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000001ff","00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000217","00000000-0000-0000-0000-000000000076" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000021f","00000000-0000-0000-0000-000000000076" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000225","00000000-0000-0000-0000-000000000081" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000022d","00000000-0000-0000-0000-00000000008c" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000235","00000000-0000-0000-0000-00000000008c" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000023b","00000000-0000-0000-0000-00000000008c" );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-0000000002ad","00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-000000000160","00000000-0000-0000-0000-000000000034",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-0000000002c0","00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-000000000168","00000000-0000-0000-0000-00000000003f",0,'' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-000000000034",0,"00000000-0000-0000-0000-000000000160","00000000-0000-0000-0000-00000000012e","00000000-0000-0000-0000-00000000014e","00000000-0000-0000-0000-000000000132","00000000-0000-0000-0000-0000000002ad","00000000-0000-0000-0000-0000000002bf","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-00000000003f",0,"00000000-0000-0000-0000-000000000168","00000000-0000-0000-0000-00000000012e","00000000-0000-0000-0000-00000000014e","00000000-0000-0000-0000-00000000013b","00000000-0000-0000-0000-0000000002c0","00000000-0000-0000-0000-0000000002d2","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-000000000160","00000000-0000-0000-0000-000000000034",0,"00000000-0000-0000-0000-00000000012e","00000000-0000-0000-0000-000000000132" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-000000000168","00000000-0000-0000-0000-00000000003f",0,"00000000-0000-0000-0000-00000000012e","00000000-0000-0000-0000-00000000013b" );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-000000000194","00000000-0000-0000-0000-000000000055",'do_find_many','',"ba5eda7a-def5-0000-0000-000000000000",0,'#------------------------------------------------------------------------#
# Find many instances

Local_Test = Test_Number

#------------------------------------------------------------------------#
# Test 1 - Find where, no instances returned
#          Object to which the operation was performed contains no 
#          instances
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Local_Test, "1103-0000-01-0541", "Find and Sets", "objFM", "find-many on no instances"]
   [] = RPT8:Specify_Requid [Local_Test, "1241-0000-01-1210"]
   [] = RPT8:Specify_Requid [Local_Test, "1241-0000-01-0124"]

   Has_Failed = FALSE

   # Perform the test
   {setB} = find Object_B where idB > 0

   # Check that the set contains no instances
   if countof {setB} != 0 then
      [] = RPT3:Test_Failed["objFM", Local_Test, -1]
      Has_Failed = TRUE
   else
      temp = an_instanceFM.ResultFM + 10
      an_instanceFM.ResultFM = temp

      [] = RPT2:Test_Passed["objFM", Local_Test, temp]
   endif

# End Test 1

#------------------------------------------------------------------------#
# Test 2 - Find where, using a single condition, no instances returned
#------------------------------------------------------------------------#

   [Local_Test] = Find_and_Sets1::Increment[Local_Test]

   [] = RPT1:Start_Test[Local_Test, "1103-0000-01-0541", "Find and Sets", "objFM", "single condition find on no instances"]
   [] = RPT8:Specify_Requid [Local_Test, "1241-0000-01-1210"]
   [] = RPT8:Specify_Requid [Local_Test, "1241-0000-01-0124"]

   Has_Failed = FALSE

   # Perform the test
   {setA} = find Object_A where idA > 20

   # Check that the set contains no instances
   if countof {setA} != 0 then
      [] = RPT3:Test_Failed["objFM", Local_Test, -2]
      Has_Failed = TRUE
   else
      temp = an_instanceFM.ResultFM + 10
      an_instanceFM.ResultFM = temp
      [] = RPT2:Test_Passed["objFM", Local_Test, temp]
   endif

# End Test 2

#------------------------------------------------------------------------#
# Test 3 - Find where, only one condition is fulfilled, no instance
#          returned (AND)
#------------------------------------------------------------------------#

   [Local_Test] = Find_and_Sets1::Increment[Local_Test]

   [] = RPT1:Start_Test[Local_Test, "1103-0000-01-0541", "Find and Sets", "objFM", "find on one condition no instances"]
   [] = RPT8:Specify_Requid [Local_Test, "1241-0000-01-1210"]
   [] = RPT8:Specify_Requid [Local_Test, "1241-0000-01-0124"]

   Has_Failed = FALSE

   # Perform the test
   {setA} = find Object_A where idA = 2 & IntegerA = 666

   # Check that the set contains no instances
   if countof {setA} != 0 then
      [] = RPT3:Test_Failed["objFM", Local_Test, -3]
      Has_Failed = TRUE
   else
      temp = an_instanceFM.ResultFM + 10
      an_instanceFM.ResultFM = temp
      [] = RPT2:Test_Passed["objFM", Local_Test, temp]
   endif

# End Test 3

#------------------------------------------------------------------------#
# Test 4 - find where, using a single condition, some instances returned
#------------------------------------------------------------------------#

   [Local_Test] = Find_and_Sets1::Increment[Local_Test]

   [] = RPT1:Start_Test[Local_Test, "1103-0000-01-0541", "Find and Sets", "objFM", "single condition some instances"]
   [] = RPT8:Specify_Requid [Local_Test, "1241-0000-01-1210"]
   [] = RPT8:Specify_Requid [Local_Test, "1241-0000-01-0124"]

   Has_Failed = FALSE

   # Perform the test
   {setA} = find Object_A where idA < 4

   # Check that the set contains some instances and that it contains the
   # correct instances
   if countof {setA} != 3 then
      [] = RPT3:Test_Failed["objFM", Local_Test, -4]
      Has_Failed = TRUE
   else
      # Check each instance that is returned
      countA = 0
      countB = 0
      countC = 0

      for each_instanceA in {setA} do

         if each_instanceA.idA = 1 then
            countA = countA + 1
         else

            if each_instanceA.idA = 2 then
               countB = countB + 1
            else
   
               if each_instanceA.idA = 3 then
                  countC = countC + 1
               else
                  [] = RPT3:Test_Failed["objFM", Local_Test, -5]
                  Has_Failed = TRUE
               endif

            endif

         endif

      endfor

      # Check counter values
      if (countA != 1)|(countB != 1)|(countC != 1) then
         [] = RPT3:Test_Failed["objFM", Local_Test, -6]
         Has_Failed = TRUE
      else
         temp = an_instanceFM.ResultFM + 10
         an_instanceFM.ResultFM = temp
      endif

      if !Has_Failed then
         [] = RPT2:Test_Passed["objFM", Local_Test, temp]
      endif

   endif

# End Test 4

#------------------------------------------------------------------------#
# Test 5 - find where, multiple conditions are fulfilled, some instances 
#          returned
#------------------------------------------------------------------------#

   [Local_Test] = Find_and_Sets1::Increment[Local_Test]

   [] = RPT1:Start_Test[Local_Test, "1103-0000-01-0541", "Find and Sets", "objFM","on some instances"]
   [] = RPT8:Specify_Requid [Local_Test, "1241-0000-01-1210"]
   [] = RPT8:Specify_Requid [Local_Test, "1241-0000-01-0124"]

   Has_Failed = FALSE

   # Perform the test
   {setA} = find Object_A where idA = 4 | idA > 8

   # Check that the set contains some instances and that it contains the
   # correct instances

   if countof {setA} != 3 then
      [] = RPT3:Test_Failed["obj", Local_Test, -7]
      Has_Failed = TRUE
   else
      # Check each instance that is returned
      countA = 0
      countB = 0
      countC = 0

      for each_instanceA in {setA} do

         if each_instanceA.idA = 4 then
            countA = countA + 1
         else

            if each_instanceA.idA = 9 then
               countB = countB + 1

            else

               if each_instanceA.idA = 10 then
                  countC = countC + 1
               else
                  [] = RPT3:Test_Failed["objFM", Local_Test, -8]
                  Has_Failed = TRUE
               endif

            endif

         endif

      endfor

      # Check counter values
      if (countA != 1)|(countB != 1)|(countC != 1) then
         [] = RPT3:Test_Failed["objFM", Local_Test, -9]
         Has_Failed = TRUE
      else
         temp = an_instanceFM.ResultFM + 10
         an_instanceFM.ResultFM = temp
      endif

      if !Has_Failed then
         [] = RPT2:Test_Passed["objFM", Local_Test, temp]
      endif

   endif

# End Test 5

#------------------------------------------------------------------------#
# Test 6 - find where, multiple conditions are fulfilled, some instances 
#          returned
#          Specified criteria would hit the same instance several times
#------------------------------------------------------------------------#

   [Local_Test] = Find_and_Sets1::Increment[Local_Test]

   [] = RPT1:Start_Test[Local_Test, "1103-0000-01-0541", "Find and Sets", "objFM", "find where multiple conditions are fulfilled"]
   [] = RPT8:Specify_Requid [Local_Test, "1241-0000-01-1210"]
   [] = RPT8:Specify_Requid [Local_Test, "1241-0000-01-0124"]

   Has_Failed = FALSE

   # Perform the test
   {setA} = find Object_A where idA = 1 | idA < 4 | idA = 3

   # Check that the set contains some instances and that it contains the
   # correct instances
   if countof {setA} != 3 then
      [] = RPT3:Test_Failed["objFM", Local_Test, -10]
      Has_Failed = TRUE
   else
      # Check each instance that is returned
      countA = 0
      countB = 0
      countC = 0
      for each_instanceA in {setA} do

         if each_instanceA.idA = 1 then
            countA = countA + 1
         else

            if each_instanceA.idA = 2 then
               countB = countB + 1
            else

               if each_instanceA.idA = 3 then
                  countC = countC + 1
               else
                  [] = RPT3:Test_Failed["objFM", Local_Test,-11]
                  Has_Failed = TRUE
               endif

            endif

         endif

      endfor

      # Check counter values
      if (countA != 1)|(countB != 1)|(countC != 1) then
         [] = RPT3:Test_Failed["objFM", Local_Test, -12]
         Has_Failed = TRUE
      else
         temp = an_instanceFM.ResultFM + 10
        an_instanceFM.ResultFM = temp
      endif

      if !Has_Failed then
         [] = RPT2:Test_Passed["objFM", Local_Test,0]
      endif

   endif

# End Test 6

#------------------------------------------------------------------------#
# Test 7 - find-all, no instances returned
#          Object to which the operation was performed contains no 
#          instances
#------------------------------------------------------------------------#

   [Local_Test] = Find_and_Sets1::Increment[Local_Test]

   [] = RPT1:Start_Test[Local_Test, "1103-0000-01-0543", "Find and Sets", "objFM","on no instances"]
   [] = RPT8:Specify_Requid [Local_Test, "1241-0000-01-1211"]
   [] = RPT8:Specify_Requid [Local_Test, "1241-0000-01-0124"]

   Has_Failed = FALSE

   # Perform the test
   {setB} = find-all Object_B

   # Check that the set contains no instances
   if countof {setB} != 0 then
      [] = RPT3:Test_Failed["objFM", Local_Test,-13]
      Has_Failed = TRUE
   else
      temp = an_instanceFM.ResultFM + 10
      an_instanceFM.ResultFM = temp
      [] = RPT2:Test_Passed["objFM", Local_Test,temp]
   endif

# End Test 7

#------------------------------------------------------------------------#
# Local_Test 8 - find-all, some instances returned
#------------------------------------------------------------------------#

   [Local_Test] = Find_and_Sets1::Increment[Local_Test]

   [] = RPT1:Start_Test[Local_Test, "1103-0000-01-0543", "Find and Sets", "objFM","on some instances"]
   [] = RPT8:Specify_Requid [Local_Test, "1241-0000-01-1211"]

   Has_Failed = FALSE

   # Perform the test
   {setA} = find-all Object_A

   # Check that the set contains no instances
   if countof {setA} != 10 then
      [] = RPT3:Test_Failed["objFM", Local_Test, -14]
      Has_Failed = TRUE
   else
      temp = an_instanceFM.ResultFM + 10
      an_instanceFM.ResultFM = temp
      [] = RPT2:Test_Passed["objFM", Local_Test, temp]
   endif

# End Test 8

#------------------------------------------------------------------------#
# Test 9
#------------------------------------------------------------------------#

   [Local_Test] = Find_and_Sets1::Increment[Local_Test]

   [] = RPT1:Start_Test[Local_Test, "1103-0000-01-0543", "Find and Sets", "objFM","Repeat Find All"]

   count = 5

   loop

      theInt = 100 + count

      tempInstanceA = create Object_A with idA      = theInt &\
                                      IntegerA = theInt
      count = count - 1
      breakif count = 0

   endloop

   {setAA} = find-all Object_A

   if countof {setAA} = 15 then

      count = 5

      loop

         theInt = 200 + count

         tempInstanceA = create Object_A with idA      = theInt &\
                                         IntegerA = theInt
         count = count - 1
         breakif count = 0

      endloop

      {setAB} = find-all Object_A

      if countof {setAB} = 20 then

         [] = RPT2:Test_Passed["objA", Local_Test, 0]

      else

         [] = RPT3:Test_Failed["objA", Local_Test, -10]

      endif

   else

      [] = RPT3:Test_Failed["objA", Local_Test, -20]

   endif

#------------------------------------------------------------------------#
# Test 10
#------------------------------------------------------------------------#

   [Local_Test] = Find_and_Sets1::Increment[Local_Test]

   [] = RPT1:Start_Test[Local_Test, "1103-0000-01-0543", "Find and Sets", "objFM","Repeat Find All"]

   count = 5

   loop

      theInt = 300 + count

      tempInstanceA = create Object_A with idA      = theInt &\
                                      IntegerA = theInt
      count = count - 1
      breakif count = 0

   endloop

   {setAC} = find-all Object_A

   if countof {setAC} = 25 then

      count = 5

      loop

         theInt = 400 + count

         tempInstanceA = create Object_A with idA      = theInt &\
                                         IntegerA = theInt
         count = count - 1
         breakif count = 0

      endloop

      {setAC} = find-all Object_A

      if countof {setAC} = 30 then

         count = 5

         loop

            theInt = 500 + count

            tempInstanceA = create Object_A with idA      = theInt &\
                                                  IntegerA = theInt
            count = count - 1
            breakif count = 0

         endloop

         {setAC} = find-all Object_A

         if countof {setAC} = 35 then

            [] = RPT2:Test_Passed["objA", Local_Test, 0]

         else

            [] = RPT3:Test_Failed["objA", Local_Test, -10]

         endif

      else

         [] = RPT3:Test_Failed["objA", Local_Test, -20]

      endif

   else

      [] = RPT3:Test_Failed["objA", Local_Test, -30]

   endif

#------------------------------------------------------------------------#
# Test 11
#------------------------------------------------------------------------#

   [Local_Test] = Find_and_Sets1::Increment[Local_Test]

   [] = RPT1:Start_Test[Local_Test, "1103-0000-01-0543", "Find and Sets", "objFM","Repeat Find All"]


   count = 5

   loop

      instAO = create Assoc_Obj with idAO = count

      count = count - 1
      breakif count = 0

   endloop

   {setAO} = find-all Assoc_Obj

   if countof {setAO} = 5 then

      count = 5

      loop

         theInt = count + 5
         instAO = create Assoc_Obj with idAO = theInt

         count = count - 1
         breakif count = 0

      endloop

      {setAO} = find-all Assoc_Obj

      if countof {setAO} = 10 then
  
         count = 5

         loop

            theInt = count + 5
            instAO = create Assoc_Obj with idAO = theInt
   
            count = count - 1
            breakif count = 0

         endloop

         {setAO} = find-all Assoc_Obj

         if countof {setAO} = 15 then

            [] = RPT2:Test_Passed["objAO", Local_Test, 0]

         else

            [] = RPT3:Test_Failed["objAO", Local_Test, -10]

         endif

      else

         [] = RPT3:Test_Failed["objAO", Local_Test, -20]

      endif

   else

      [] = RPT3:Test_Failed["objAO", Local_Test, -30]

   endif


#------------------------------------------------------------------------#
# Test 12
#------------------------------------------------------------------------#

   [Local_Test] = Find_and_Sets1::Increment[Local_Test]

   [] = RPT1:Start_Test[Local_Test, "1103-0000-01-0543", "Find and Sets", "objFM","Find All in service"]


      count = 0

      loop

         theInt = 100 + count
         instAO = create Assoc_Obj with idAO = theInt
 
         count = count + 1
         breakif count = 5

      endloop

      [noInst] = Find_and_Sets6::FindAllTest[]
      [noInst] = Find_and_Sets6::FindAllTest[]
      [noInst] = Find_and_Sets6::FindAllTest[]

      if noInst = 20 then
         [] = RPT2:Test_Passed["objAO", Local_Test, 0]
      else
         [] = RPT3:Test_Failed["objAO", Local_Test, noInst]
      endif

   {setToDel} = find Object_A where idA >= 100
   delete {setToDel}






#------------------------------------------------------------------------#
# Test 13 - find-all, inclusive expressions,
#------------------------------------------------------------------------#

   [Local_Test] = Find_and_Sets1::Increment[Local_Test]

   [] = RPT1:Start_Test[Local_Test, "1103-0000-01-0541", "Find and Sets", "objFM", "inclusive and conditions"]
   [] = RPT8:Specify_Requid [Local_Test, "1241-0000-01-1210"]
   [] = RPT8:Specify_Requid [Local_Test, "1241-0000-01-0124"]

   Has_Failed = FALSE

   {setA} = find Object_A where idA > 1 & idA < 4

   countof_set_A = countof{setA}

   if countof_set_A = 2 then
      [] = RPT2:Test_Passed["objFM", Local_Test, countof_set_A]
   else
      [] = RPT3:Test_Failed["objFM", Local_Test, countof_set_A]
   endif

# End Test 9

#------------------------------------------------------------------------#
# Local_Test 10 - find-all, inclusive expressions,
#------------------------------------------------------------------------#

   [Local_Test] = Find_and_Sets1::Increment[Local_Test]

   [] = RPT1:Start_Test[Local_Test, "1103-0000-01-0541", "Find and Sets", "objFM", "inclusive or conditions"]
   [] = RPT8:Specify_Requid [Local_Test, "1241-0000-01-1210"]
   [] = RPT8:Specify_Requid [Local_Test, "1241-0000-01-0124"]

   Has_Failed = FALSE

   {setA} = find Object_A where idA > 1 | idA < 4

   countof_set_A = countof{setA}

   if countof_set_A = 10 then
      [] = RPT2:Test_Passed["objFM", Local_Test, countof_set_A]
   else
      [] = RPT3:Test_Failed["objFM", Local_Test, countof_set_A]
   endif

# End Test 10

#------------------------------------------------------------------------#
# Local_Test 11 - find-all, exclusive expressions, no instances returned 
#------------------------------------------------------------------------#

   [Local_Test] = Find_and_Sets1::Increment[Local_Test]

   [] = RPT1:Start_Test[Local_Test, "1103-0000-01-0541", "Find and Sets", "objFM", "exclusive and conditions"]
   [] = RPT8:Specify_Requid [Local_Test, "1241-0000-01-1210"]
   [] = RPT8:Specify_Requid [Local_Test, "1241-0000-01-0124"]

   Has_Failed = FALSE

   {setA} = find Object_A where idA > 4 & idA < 2

   countof_set_A = countof{setA}

   if countof_set_A = 0 then
      [] = RPT2:Test_Passed["objFM", Local_Test, countof_set_A]
   else
      [] = RPT3:Test_Failed["objFM", Local_Test, countof_set_A]
   endif

# End Test 11

#------------------------------------------------------------------------#
# Local_Test 12 - find-all, ordered conditions
#------------------------------------------------------------------------#

   [Local_Test] = Find_and_Sets1::Increment[Local_Test]

   [] = RPT1:Start_Test[Local_Test, "1103-0000-01-0541", "Find and Sets", "objFM","ordered conditions"]
   [] = RPT8:Specify_Requid [Local_Test, "1241-0000-01-1210"]
   [] = RPT8:Specify_Requid [Local_Test, "1241-0000-01-0124"]

   Has_Failed = FALSE

   {setA} = find Object_A where idA = 2 | idA > 4

   countof_set_A = countof{setA}

   if countof_set_A = 7 then
      [] = RPT2:Test_Passed["objFM", Local_Test, countof_set_A]
   else
      [] = RPT3:Test_Failed["objFM", Local_Test, countof_set_A]
   endif

# End Test 12

#------------------------------------------------------------------------#
# Local_Test 13 - Check that there is no limit on the number of instances
#                 a set variable can hold.
#------------------------------------------------------------------------#

   [Local_Test] = Find_and_Sets1::Increment[Local_Test]

   [] = RPT1:Start_Test[Local_Test, "1241-0000-01-0125", "Find and Sets", "objFM","ordered conditions"]
   [] = RPT8:Specify_Requid[Local_Test, "1241-0000-01-0119"]
   [] = RPT8:Specify_Requid[Local_Test, "1241-0000-01-0122"]
   [] = RPT8:Specify_Requid[Local_Test, "1241-0000-01-0126"]

   [] = RPT5:Test_Text [Local_Test, "More instances than ever required"]

   # Create LOTS of instances of Object_B
   Cnt = 1000000

   loop

      NewInstB = create Object_B with idB = Cnt
      Cnt = Cnt + 1
      breakif Cnt = 2000000

   endloop

   {setOfNewInstB} = find Object_B where idB >= 1000000

   NoInSet = countof{setOfNewInstB}

   if NoInSet = 1000000 then
      [] = RPT2:Test_Passed["objFM", Local_Test, NoInSet]
   else
      [] = RPT3:Test_Failed["objFM", Local_Test, NoInSet]
   endif   

# End Test 13

#------------------------------------------------------------------------#
# Local_Test 14 - Create LOTS more instance for a couple of other objetcs
#                 and make sure that all instances can be found.
#------------------------------------------------------------------------#
  
   [Local_Test] = Find_and_Sets1::Increment[Local_Test]

   [] = RPT1:Start_Test[Local_Test, "1241-0000-01-0125", "Find and Sets", "objFM","ordered conditions"]
   [] = RPT8:Specify_Requid[Local_Test, "1241-0000-01-0119"]
   [] = RPT8:Specify_Requid[Local_Test, "1241-0000-01-0122"]
   [] = RPT8:Specify_Requid[Local_Test, "1241-0000-01-0126"]

   [] = RPT5:Test_Text [Local_Test, "More instances than ever required"]

   # Create LOTS of instances of Object_A
   Cnt = 0

   loop

      NewInstA = create Object_A with IntegerA = Cnt &\
                                      idA      = 100
      Cnt = Cnt + 1
      breakif Cnt = 100000

   endloop

   # Create LOTS of instances of Object_E
   Cnt = 0

   loop

      NewInstE = create Object_E with IntegerA = Cnt &\
                                      idE      = 100
      Cnt = Cnt + 1
      breakif Cnt = 100000

   endloop

   {setOfNewInstB} = find Object_B where idB >= 1000000
   {setOfNewInstA} = find Object_A where idA = 100
   {setOfNewInstE} = find Object_E where idE = 100

   NoInSetA = countof{setOfNewInstA}
   NoInSetB = countof{setOfNewInstB}
   NoInSetE = countof{setOfNewInstE}

   if NoInSetA = 100000 then

      if NoInSetB = 1000000 then

         if NoInSetE = 100000 then
            [] = RPT2:Test_Passed["objFM", Local_Test, NoInSetE]
         else
            [] = RPT3:Test_Failed["objFM", Local_Test, NoInSetE]
         endif   

      else
         [] = RPT3:Test_Failed["objFM", Local_Test, NoInSetB]
      endif

   else
      [] = RPT3:Test_Failed["objFM", Local_Test, NoInSetA]
   endif

   delete {setOfNewInstB}
   delete {setOfNewInstA}
   delete {setOfNewInstE}

# End Test 14

#------------------------------------------------------------------------#
# Local_Test 15 - find
#------------------------------------------------------------------------#

   [Local_Test] = Find_and_Sets1::Increment[Local_Test]

   [] = RPT1:Start_Test[Local_Test, "1103-0000-01-0542", "Find and Sets", "objFM","Find without where"]

   [] = RPT5:Test_Text[Local_Test, "Find without Where is unsupported"]
   [] = RPT4:Test_Unsupported[Local_Test]

# End Test 14

#------------------------------------------------------------------------#
Returned_Number = Local_Test
#------------------------------------------------------------------------#
',3,'',"00000000-0000-0000-0000-000000000000",2,1 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-0000000001c1","00000000-0000-0000-0000-000000000060",'do_find_one','',"ba5eda7a-def5-0000-0000-000000000000",0,'#------------------------------------------------------------------------#
# Find-one
#------------------------------------------------------------------------#

Test_Number = Test

#------------------------------------------------------------------------#
# Test 1 - FIND-ONE, no instance is returned
#          The object to which the ''FIND'' is being performed contains no 
#          instances
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test [Test_Number, "1103-0000-01-0544", "Find and Sets", "objFSI find one", "on no instances"]
   [] = RPT8:Specify_Requid [Test_Number, "1241-0000-01-1206"]

   # Perform the test
   an_instanceB = find-one Object_B

   # Check that no instance is returned
   if an_instanceB != UNDEFINED then
      [] = RPT3:Test_Failed["objFSI find one", Test_Number,-1]
   else

      if an_instanceFSI = UNDEFINED then
         [] = RPT3:Test_Failed["objFSI", Test_Number, -2]
      else
         temp = an_instanceFSI.ResultFSI + 10
         an_instanceFSI.ResultFSI = temp
         [] = RPT2:Test_Passed["objFSI find one", Test_Number, temp]
      endif

   endif

# End Test 1

#------------------------------------------------------------------------#
# Test 2 - FIND-ONE WHERE, no instance is returned
#          The object to which the ''FIND'' is being performed contains no 
#          instances
#------------------------------------------------------------------------#

   [Test_Number] = Find_and_Sets1::Increment[Test_Number]

   [] = RPT1:Start_Test [Test_Number, "1103-0000-01-0545", "Find and Sets", "objFSI find one", "on no instances"]
   [] = RPT8:Specify_Requid [Test_Number, "1241-0000-01-1207"]

   # Perform the test
   an_instanceB = find-one Object_B where idB = 1

   # Check that no instance is returned
   if an_instanceB != UNDEFINED then
      [] = RPT3:Test_Failed["objFSI find one", Test_Number,-3]
   else

      if an_instanceFSI = UNDEFINED then
         [] = RPT3:Test_Failed["objFSI", Test_Number, -4]
      else
         temp = an_instanceFSI.ResultFSI + 10
         an_instanceFSI.ResultFSI = temp
         [] = RPT2:Test_Passed["objFSI find one", Test_Number,temp]
      endif

   endif

# End Test 2

#------------------------------------------------------------------------#
# Test 3 - FIND-ONE WHERE <single condition>, no instance returned
#------------------------------------------------------------------------#

   [Test_Number] = Find_and_Sets1::Increment[Test_Number]

   [] = RPT1:Start_Test [Test_Number, "1103-0000-01-0545", "Find and Sets", "objFSI find one", "on no instances"]
   [] = RPT8:Specify_Requid [Test_Number, "1241-0000-01-1207"]

   # Perform the test
   an_instanceA = find-one Object_A where IntegerA = 666

   # Check that no instance is returned
   if an_instanceA != UNDEFINED then
      [] = RPT3:Test_Failed["objFSI find one", Test_Number,-3]
   else
      temp = an_instanceFSI.ResultFSI + 10
      an_instanceFSI.ResultFSI = temp
      [] = RPT2:Test_Passed["objFSI find one", Test_Number, temp]
   endif

# End Test 3

#------------------------------------------------------------------------#
# Test 4 - FIND-ONE WHERE <multiple conditions>, no instance returned
#------------------------------------------------------------------------#

   [Test_Number] = Find_and_Sets1::Increment[Test_Number]

   [] = RPT1:Start_Test [Test_Number, "1103-0000-01-0545", "Find and Sets", "objFSI find one", "on no instances"]
   [] = RPT8:Specify_Requid [Test_Number, "1241-0000-01-1207"]

   # Perform the test
   an_instanceA = find-one Object_A where IntegerA = 666 & idA = 1

   # Check that no instance is returned
   if an_instanceA != UNDEFINED then
      [] = RPT3:Test_Failed["objFSI find one", Test_Number, -4]
   else
      temp = an_instanceFSI.ResultFSI + 10
      an_instanceFSI.ResultFSI = temp
      [] = RPT2:Test_Passed["objFSI find one", Test_Number, temp]
   endif

# End Test 4

#------------------------------------------------------------------------#
# Test 5 - FIND-ONE, an instance is returned
#------------------------------------------------------------------------#

   [Test_Number] = Find_and_Sets1::Increment[Test_Number]

   [] = RPT1:Start_Test [Test_Number, "1103-0000-01-0544", "Find and Sets", "objFSI find one", "one instance"]
   [] = RPT8:Specify_Requid [Test_Number, "1241-0000-01-1206"]

   # Perform the test
   an_instanceA = find-one Object_A

   # Check that an instance is returned
   if an_instanceA = UNDEFINED then
      [] = RPT3:Test_Failed["objFSI find one", Test_Number, -5]
   else
      temp = an_instanceFSI.ResultFSI + 10
      an_instanceFSI.ResultFSI = temp
      [] = RPT2:Test_Passed["objFSI find one", Test_Number, temp]
   endif

# End Test 5

#------------------------------------------------------------------------#
# Test 6 - FIND-ONE WHERE <single condition>, an instance is returned
#------------------------------------------------------------------------#

   [Test_Number] = Find_and_Sets1::Increment[Test_Number]

   [] = RPT1:Start_Test [Test_Number, "1103-0000-01-0545", "Find and Sets", "objFSI find one", "one instance"]
   [] = RPT8:Specify_Requid [Test_Number, "1241-0000-01-1207"]

   # Perform the test
   an_instanceA = find-one Object_A where idA = 1

   # Check that an instance is returned
   if (an_instanceA != UNDEFINED)then

      if (an_instanceA.idA != 1) then
         [] = RPT3:Test_Failed["objFSI find one", Test_Number, -6]
      else
         temp = an_instanceFSI.ResultFSI + 10
         an_instanceFSI.ResultFSI = temp
         [] = RPT2:Test_Passed["objFSI find one", Test_Number, temp]
      endif

   else
      [] = RPT3:Test_Failed["objFSI find one", Test_Number, -7]
   endif

# End Test 6

#------------------------------------------------------------------------#
# Test 7 - FIND-ONE WHERE <both conditions are fulfilled>, an instance is 
#          returned
#------------------------------------------------------------------------#

   [Test_Number] = Find_and_Sets1::Increment[Test_Number]

   [] = RPT1:Start_Test [Test_Number, "1103-0000-01-0545", "Find and Sets", "objFSI find one", "one instance"]
   [] = RPT8:Specify_Requid [Test_Number, "1241-0000-01-1207"]

   # Perform the test
   an_instanceA = find-one Object_A where idA = 1 | idA = 2

   # Check that an instance is returned
   if (an_instanceA != UNDEFINED)then

      if (an_instanceA.idA > 2) then
         [] = RPT3:Test_Failed["objFSI find one", Test_Number, -8]
      else
         temp = an_instanceFSI.ResultFSI + 10
         an_instanceFSI.ResultFSI = temp
         [] = RPT2:Test_Passed["objFSI find one", Test_Number, temp]
      endif

   else
      [] = RPT3:Test_Failed["objFSI find one", Test_Number, -9]
   endif

# End Test 7

#------------------------------------------------------------------------#
# Test 8 - FIND-ONE WHERE <only one conditions fulfilled>, an instance is 
#          returned
#------------------------------------------------------------------------#

   [Test_Number] = Find_and_Sets1::Increment[Test_Number]

   [] = RPT1:Start_Test [Test_Number, "1103-0000-01-0545", "Find and Sets", "objFSI find one", "one instance"]
   [] = RPT8:Specify_Requid [Test_Number, "1241-0000-01-1207"]

   # Perform the test
   an_instanceA = find-one Object_A where idA = 3 | idA = 666

   # Check that an instance is returned
   if (an_instanceA != UNDEFINED)then

      if(an_instanceA.idA != 3) then
         [] = RPT3:Test_Failed["objFSI find one", Test_Number, -10]
      else
         temp = an_instanceFSI.ResultFSI + 10
         an_instanceFSI.ResultFSI = temp
         [] = RPT2:Test_Passed["objFSI find one", Test_Number, temp]
      endif

   else
      [] = RPT3:Test_Failed["objFSI find one", Test_Number, -11]
   endif

# End Test 8

#------------------------------------------------------------------------#

Returned_Number = Test_Number',3,'',"00000000-0000-0000-0000-000000000000",2,1 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-0000000001c5","00000000-0000-0000-0000-000000000060",'do_find_only','',"ba5eda7a-def5-0000-0000-000000000000",0,'#------------------------------------------------------------------------#
# Find-only
#------------------------------------------------------------------------#

[Host] = WAW1:What_Env[]
Test = Test_Number

#------------------------------------------------------------------------#
# Test 1 - FIND-ONLY return the first instance of Object A found
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0546", "Find and Sets", "objFSI find only","Return first inst with find-only"]
   [] = RPT8:Specify_Requid [Test, "1241-0000-01-1208"]

   Has_Failed = FALSE

   # Perform the test

   if Host = "ISIM" then
      [] = RPT4:Test_Unsupported[Test]
   else
      an_instanceA = find-only Object_A

      # Check that an instance is returned
      if (an_instanceA = UNDEFINED) then
         [] = RPT3:Test_Failed["objFSI find only", Test,-4]
         Has_Failed = TRUE
      else
         temp = an_instanceFSI.ResultFSI + 10
         an_instanceFSI.ResultFSI = temp
         [] = RPT2:Test_Passed["objFSI find only", Test,temp]
      endif

   endif

# End Test 1


#------------------------------------------------------------------------#
# Test 2 - FIND-ONLY WHERE <single condition>, an instance is returned
#------------------------------------------------------------------------#

   [Test] = Find_and_Sets1::Increment[Test]

   [] = RPT1:Start_Test[Test, "1103-0000-01-0547", "Find and Sets", "objFSI find only","a condition an instance ret"]
   [] = RPT8:Specify_Requid [Test, "1241-0000-01-1209"]

   Has_Failed = FALSE

   # Perform the test
   an_instanceA = find-only Object_A where idA = 4

   # Check that an instance is returned
   if (an_instanceA = UNDEFINED)|(an_instanceA.idA != 4)then
      [] = RPT3:Test_Failed["objFSI find only", Test,-1]
      Has_Failed = TRUE
   else

      if an_instanceFSI = UNDEFINED then
         Has_Failed = TRUE
         [] = RPT3:Test_Failed["objFSI", Test, -2]
      else
         temp = an_instanceFSI.ResultFSI + 10
         an_instanceFSI.ResultFSI = temp
         [] = RPT2:Test_Passed["objFSI find only", Test,temp]
      endif

   endif

# End Test 2

#------------------------------------------------------------------------#
# Test 3 -  FIND-ONLY WHERE <only one condition fulfilled>, an instance 
#           is returned
#------------------------------------------------------------------------#

   [Test] = Find_and_Sets1::Increment[Test]

   [] = RPT1:Start_Test[Test, "1103-0000-01-0547", "Find and Sets", "objFSI find only","a condition an instance ret"]
   [] = RPT8:Specify_Requid [Test, "1241-0000-01-1209"]

   Has_Failed = FALSE

   # Perform the test
   an_instanceA = find-only Object_A where IntegerA = 666 | idA = 5

   # Check that an instance is returned
   if (an_instanceA = UNDEFINED)|(an_instanceA.idA != 5) then
      [] = RPT3:Test_Failed["objFSI find only", Test,-2]
      Has_Failed = TRUE
   else
      temp = an_instanceFSI.ResultFSI + 10
      an_instanceFSI.ResultFSI = temp
      [] = RPT2:Test_Passed["objFSI find only", Test,temp]
   endif

# End Test 3

#------------------------------------------------------------------------#
# Test 4 - FIND-ONLY WHERE <multiple conditions fulfilled>, an instance 
#          is returned
#------------------------------------------------------------------------#

   [Test] = Find_and_Sets1::Increment[Test]

   [] = RPT1:Start_Test[Test, "1103-0000-01-0547", "Find and Sets", "objFSI find only","mult conditions 1 instance ret"]
   [] = RPT8:Specify_Requid [Test, "1241-0000-01-1209"]

   Has_Failed = FALSE

   # Perform the test
   an_instanceA = find-only Object_A where IntegerA = 6 | idA = 6

   # Check that an instance is returned
   if (an_instanceA = UNDEFINED)|(an_instanceA.idA != 6) then
      [] = RPT3:Test_Failed["objFSI find only", Test,-3]
      Has_Failed = TRUE
   else
      temp = an_instanceFSI.ResultFSI + 10
      an_instanceFSI.ResultFSI = temp
      [] = RPT2:Test_Passed["objFSI find only", Test,temp]
   endif

# End Test 4

#------------------------------------------------------------------------#

Returned_Number = Test',3,'',"00000000-0000-0000-0000-0000000001c1",2,2 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-0000000001f8","00000000-0000-0000-0000-00000000006b",'do_find_set','',"ba5eda7a-def5-0000-0000-000000000000",0,'Test = Test_Number

#------------------------------------------------------------------------#
# Find on sets of instance handles
#------------------------------------------------------------------------#

# Create an initial set to perform the tests upon

{setA} = find Object_A where idA > 5

#------------------------------------------------------------------------#
# Test 1 - find-one
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "Null Requid", "Find and Sets", "objFS", "find one on set"]

has_failed = FALSE

#Perform the test

# an_instanceA = find-one {setA}

#Check the an instance is returned

# if an_instanceA = UNDEFINED then

   [] = RPT4:Test_Unsupported[Test]

# else


#   if an_instanceA.idA < 6 then

#      [] = RPT3:Test_Failed["objFS", Test,-1]
#      has_failed = TRUE
#   else
#      temp = an_instanceFS.ResultFS + 10
#      an_instanceFS.ResultFS = temp
#      [] = RPT2:Test_Passed["objFS", Test,temp]

#   endif

# endif

#------------------------------------------------------------------------#
# Test 2 - find-one where
#------------------------------------------------------------------------#

   [Test] = Find_and_Sets1::Increment[Test]

   [] = RPT1:Start_Test[Test, "Null Requid", "Find and Sets", "objFS", "find one  on set where"]

   has_failed = FALSE

   # Perform the test

   # an_instanceA = find-one {setA} where idA > 8

   # Check the an instance is returned
   # if an_instanceA = UNDEFINED then
        [] = RPT4:Test_Unsupported[Test]
   # else

   #   if an_instanceA.idA < 9 then
   #      [] = RPT3:Test_Failed["objFS", Test,-2]
   #      has_failed = TRUE
   #   else
   #      temp = an_instanceFS.ResultFS + 10
   #      an_instanceFS.ResultFS = temp
   #      [] = RPT2:Test_Passed["objFS", Test,temp]
   #   endif

   # endif
#------------------------------------------------------------------------#
# Test 3 - find-only
#------------------------------------------------------------------------#

   [Test] = Find_and_Sets1::Increment[Test]
 
   [] = RPT1:Start_Test[Test, "Null Requid", "Find and Sets", "objFS", "find  on set only"]

   has_failed = FALSE

   # Perform the test

   # an_instanceA = find-only {setA} where idA = 6

   # Check the an instance is returned
   # if an_instanceA = UNDEFINED then
      [] = RPT4:Test_Unsupported[Test]
   # else

   #   if an_instanceA.idA != 6 then
   #      [] = RPT3:Test_Failed["objFS", Test,-3]
   #      has_failed = TRUE
   #   else
   #      temp = an_instanceFS.ResultFS + 10
   #      an_instanceFS.ResultFS = temp
   #      [] = RPT2:Test_Passed["objFS", Test,temp]
   #   endif

   # endif

#------------------------------------------------------------------------#
# Test 4 - find where, using a single condition
#------------------------------------------------------------------------#

   [Test] = Find_and_Sets1::Increment[Test]

   [] = RPT1:Start_Test[Test, "Null Requid", "Find and Sets", "objFS","find on set where single condition"]

   has_failed = FALSE

   # Perform the test

   # {subsetA} = find {setA} where idA > 7

   # Check that the set contains some instances and that it contains the
   # correct instances

   # if countof {subsetA} = 0 then
      [] = RPT4:Test_Unsupported[Test]
   # else

   #   if countof {subsetA} != 3 then
   #      [] = RPT3:Test_Failed["objFS", Test,-4]
   #      has_failed = TRUE
   #   else

          # Check each instance that is returned
          # countA = 0
          #      countB = 0
          #      countC = 0

          #      for each_instanceA in {subsetA} do
#         if each_instanceA.idA = 8 then
#            countA = countA + 1
#         else
#            if each_instanceA.idA = 9 then
#               countB = countB + 1
#            else
#               if each_instanceA.idA = 10 then
#                  countC = countC + 1
#               else

#                  [] = RPT3:Test_Failed["objFS", Test,-5]
#                  has_failed = TRUE

#               endif
#            endif
#         endif
#      endfor

      #Check counter values
#      if (countA != 1)|(countB != 1)|(countC != 1) then
#         [] = RPT3:Test_Failed["objFS", Test,-6]
#         has_failed = TRUE
#      else
#         temp = an_instanceFS.ResultFS + 10
#         an_instanceFS.ResultFS = temp
#      endif

#      if !has_failed then
#         [] = RPT2:Test_Passed["objFS", Test,0]
#      endif
#
#   endif

#endif

#------------------------------------------------------------------------#
#Test 5
#find where, using multiple conditions
#------------------------------------------------------------------------#

[Test] = Find_and_Sets1::Increment[Test]
[] = RPT1:Start_Test[Test, "Null Requid", "Find and Sets", "objFS","find on set where multiple conditions"]

has_failed = FALSE

#Perform the test
# {subsetA} = find {setA} where idA > 8 | idA = 4 | idA = 6

# if countof {subsetA} = 0 then

   [] = RPT4:Test_Unsupported[Test]

# else


   #Check that the set contains some instances and that it contains the
   #correct instances
#   if countof {subsetA} != 3 then
#      [] = RPT3:Test_Failed["objFS", Test,-7]
#      has_failed = TRUE
#   else

      #Check each instance that is returned
#      countA = 0
#      countB = 0
#      countC = 0
#      for each_instanceA in {subsetA} do
#         if each_instanceA.idA = 6 then
#            countA = countA + 1
#         else
#            if each_instanceA.idA = 9 then
#               countB = countB + 1
#            else
#               if each_instanceA.idA = 10 then
#                  countC = countC + 1
#               else
#                  [] = RPT3:Test_Failed["objFS", Test,-8]
#                  has_failed = TRUE
#               endif
#            endif
#         endif
#      endfor

      #Check counter values
#      if (countA != 1)|(countB != 1)|(countC != 1) then
#         [] = RPT3:Test_Failed["objFS", Test,-9]
#         has_failed = TRUE
#      else
#         temp = an_instanceFS.ResultFS + 10
#         an_instanceFS.ResultFS = temp
#      endif

#      if !has_failed then
#         [] = RPT2:Test_Passed["objFS", Test,0]
#      endif

#   endif

# endif


#------------------------------------------------------------------------#



Returned_Test = Test',3,'',"00000000-0000-0000-0000-000000000000",2,1 );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-000000000195","00000000-0000-0000-0000-000000000194",'Test_Number',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-000000000196","00000000-0000-0000-0000-000000000194",'an_instanceFM',"00000000-0000-0000-0000-000000000059",0,'',"00000000-0000-0000-0000-000000000195",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-000000000197","00000000-0000-0000-0000-000000000194",'Returned_Number',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-000000000196",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000001c2","00000000-0000-0000-0000-0000000001c1",'Test',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000001c3","00000000-0000-0000-0000-0000000001c1",'an_instanceFSI',"00000000-0000-0000-0000-000000000064",0,'',"00000000-0000-0000-0000-0000000001c2",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000001c4","00000000-0000-0000-0000-0000000001c1",'Returned_Number',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-0000000001c3",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000001c6","00000000-0000-0000-0000-0000000001c5",'Test_Number',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000001c7","00000000-0000-0000-0000-0000000001c5",'an_instanceFSI',"00000000-0000-0000-0000-000000000064",0,'',"00000000-0000-0000-0000-0000000001c6",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000001c8","00000000-0000-0000-0000-0000000001c5",'Returned_Number',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-0000000001c7",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000001f9","00000000-0000-0000-0000-0000000001f8",'Test_Number',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000001fa","00000000-0000-0000-0000-0000000001f8",'an_instanceFS',"00000000-0000-0000-0000-00000000006f",0,'',"00000000-0000-0000-0000-0000000001f9",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000001fb","00000000-0000-0000-0000-0000000001f8",'Returned_Number',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-0000000001fa",'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-000000000006","ba5eda7a-def5-0000-0000-000000000004",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-000000000009","00000000-0000-0000-0000-000000000006",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-00000000000c","00000000-0000-0000-0000-000000000006",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-00000000000f","ba5eda7a-def5-0000-0000-000000000002",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-000000000012","ba5eda7a-def5-0000-0000-000000000004",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-000000000015","ba5eda7a-def5-0000-0000-000000000002",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-000000000018","ba5eda7a-def5-0000-0000-000000000002",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-00000000001b","ba5eda7a-def5-0000-0000-000000000002",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-00000000001e","ba5eda7a-def5-0000-0000-000000000002",0,'' );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000002","00000000-0000-0000-0000-000000000002",'types','',0 );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-000000000021","00000000-0000-0000-0000-000000000002","00000000-0000-0000-0000-000000000002",'Find_and_Sets','masl_domain',0 );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000002",'Find_and_Sets','',0 );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-000000000027","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000002",'Shared','',0 );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-00000000009e","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000002",'types','',0 );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-0000000000b2","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000002",'functions','',0 );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-000000000126","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000002",'scenarios','',0 );
INSERT INTO S_EDT VALUES ( "00000000-0000-0000-0000-000000000097" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-00000000009a",'Sly','',"00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000000" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-00000000009b",'Sandy','',"00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-00000000009a" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-00000000009c",'Wes','',"00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-00000000009b" );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000000b4","00000000-0000-0000-0000-000000000000",'Increment',' Increment a value by 1
','
# Increment value by and return
Incremented = Incremental + 1
',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,1 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000000c1","00000000-0000-0000-0000-000000000000",'Create_Report_Object','','# Find out of there already is one of these.
# It is not inconceivable that a report object still exists from a previous run.
# Report objects are not deleted at the end of a run, as certain events may
# still be en-queued.

old_report = find-one Report_Data

if old_report != UNDEFINED then
   delete old_report
endif

My_Report = create unique Report_Data with Reported_Domain_Number = 0

[] = RPT6:Domain_Test_Start["Find and Sets"]
',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,2 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000000c5","00000000-0000-0000-0000-000000000000",'Delete_Report_Object','','[] = RPT7:Domain_Test_Finished["Find and Sets"]

# Do not delete the Report_Data object, as there may be still events in
# the queue.',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,3 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000000c9","00000000-0000-0000-0000-000000000000",'Check_Enum','','switch The_Input_Value

   case ''Sly''
      The_Return_Value = 41
   case ''Sandy''
      The_Return_Value = 42
   case ''Wes''
      The_Return_Value = 43
   default
      The_Return_Value = -41
endswitch',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,4 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000000d1","00000000-0000-0000-0000-000000000000",'Insert_Mem_Leak_Test','','',"ba5eda7a-def5-0000-0000-000000000000",3,'',5,5 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000000d5","00000000-0000-0000-0000-000000000000",'FindAllTest','','{setAO} = find-all Assoc_Obj

InstCount = 0 

InstCount = countof {setAO}

noInst = InstCount',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,6 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000128","00000000-0000-0000-0000-000000000000",'Find_And_Sets_Main',' Find_And_Sets_Main
','#------------------------------------------------------------------------#
# Setup Test Data
#------------------------------------------------------------------------#

# Create several instances of each control object

count = 10
loop
   #Find Single
   newFSI = create Find_Single with idFSI     = count &\
                                    ResultFSI = 0

   #Find Many
   newFM  = create Find_Many with idFM     = count &\
                                  ResultFM = 0

   #Find Set
   newFS  = create Find_Set with idFS     = count &\
                                 ResultFS = 0 

   count = count - 1
   breakif count = 0
endloop


#Create several instances of Object_A

count = 10

loop
   newA = create Object_A with idA = count &\
                               IntegerA = count
   count = count - 1
   breakif count = 0
endloop

#Create several instances of Object_E

newE = create Object_E with idE = 1  & IntegerA = 5 & IntegerB = 2
newE = create Object_E with idE = 2  & IntegerA = 4 & IntegerB = 5
newE = create Object_E with idE = 3  & IntegerA = 1 & IntegerB = 1
newE = create Object_E with idE = 4  & IntegerA = 1 & IntegerB = 1
newE = create Object_E with idE = 5  & IntegerA = 2 & IntegerB = 3
newE = create Object_E with idE = 6  & IntegerA = 5 & IntegerB = 1
newE = create Object_E with idE = 7  & IntegerA = 1 & IntegerB = 3
newE = create Object_E with idE = 8  & IntegerA = 2 & IntegerB = 3
newE = create Object_E with idE = 9  & IntegerA = 1 & IntegerB = 2
newE = create Object_E with idE = 10 & IntegerA = 3 & IntegerB = 3

# #########################################################################


Test = 1

#------------------------------------------------------------------------#
# Find One
#------------------------------------------------------------------------#

   an_instanceFSI = find-one Find_Single where idFSI     = 1 & \
                                               ResultFSI = 0

   if an_instanceFSI != UNDEFINED then
      # Start the test
      [Returned_Test_Number] = objFSI1:do_find_one[Test, an_instanceFSI ] 
   endif

#------------------------------------------------------------------------#
# Find Single
#------------------------------------------------------------------------#

   an_instanceFSI = find-one Find_Single where idFSI = 2
   [Test] = Find_and_Sets1::Increment[Returned_Test_Number]

   # Start the test
   [Returned_Test_Number] = objFSI2:do_find_only[Test, an_instanceFSI]

#------------------------------------------------------------------------#
# Find Many
#------------------------------------------------------------------------#

   an_instanceFM = find-one Find_Many where idFM = 1
   [Test] = Find_and_Sets1::Increment[Returned_Test_Number]

   # Start the test
   [Returned_Test_Number] = objFM1:do_find_many[Test, an_instanceFM ]

#------------------------------------------------------------------------#
# Find Set
#------------------------------------------------------------------------#

   an_instanceFS = find-one Find_Set where idFS = 1
   [Test] = Find_and_Sets1::Increment[Returned_Test_Number]

   # Start the test
   [Returned_Test_Number] = objFS1:do_find_set[Test, an_instanceFS]

',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,1 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-00000000012a","00000000-0000-0000-0000-000000000000",'Start_Find_and_Sets_Tests',' Start Find and Sets Tests
','[] = Find_and_Sets2::Create_Report_Object[]
',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,2 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-00000000012c","00000000-0000-0000-0000-000000000000",'Finish_Find_and_Sets_Tests',' Finish Find and Sets Tests
','[] = Find_and_Sets3::Delete_Report_Object[]
',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,3 );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-0000000000bc","00000000-0000-0000-0000-0000000000b4",'Incremental',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-0000000000be","00000000-0000-0000-0000-0000000000b4",'Incremented',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-0000000000bc",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-0000000000cc","00000000-0000-0000-0000-0000000000c9",'The_Input_Value',"00000000-0000-0000-0000-000000000097",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-0000000000ce","00000000-0000-0000-0000-0000000000c9",'The_Return_Value',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-0000000000cc",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-0000000000d8","00000000-0000-0000-0000-0000000000d5",'noInst',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-00000000012e",1,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000034","00000000-0000-0000-0000-00000000012e","00000000-0000-0000-0000-000000000132","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-00000000012e","00000000-0000-0000-0000-00000000013b","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-00000000012e","00000000-0000-0000-0000-00000000014e","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-000000000034","00000000-0000-0000-0000-00000000012e","00000000-0000-0000-0000-000000000132",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-00000000012e","00000000-0000-0000-0000-00000000013b",0 );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-00000000012e","00000000-0000-0000-0000-00000000014e" );
INSERT INTO R_ASSOC VALUES ( "00000000-0000-0000-0000-00000000012e" );
INSERT INTO R_AONE VALUES ( "00000000-0000-0000-0000-000000000034","00000000-0000-0000-0000-00000000012e","00000000-0000-0000-0000-000000000132",1,0,'has' );
INSERT INTO R_AOTH VALUES ( "00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-00000000012e","00000000-0000-0000-0000-00000000013b",1,0,'has' );
INSERT INTO R_ASSR VALUES ( "00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-00000000012e","00000000-0000-0000-0000-00000000014e",0 );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000002d",0,"00000000-0000-0000-0000-000000000029" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000030",1,"00000000-0000-0000-0000-000000000029" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000038",0,"00000000-0000-0000-0000-000000000034" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000003b",1,"00000000-0000-0000-0000-000000000034" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000043",0,"00000000-0000-0000-0000-00000000003f" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000046",1,"00000000-0000-0000-0000-00000000003f" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000004e",0,"00000000-0000-0000-0000-00000000004a" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000051",1,"00000000-0000-0000-0000-00000000004a" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000059",0,"00000000-0000-0000-0000-000000000055" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000005c",1,"00000000-0000-0000-0000-000000000055" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000064",0,"00000000-0000-0000-0000-000000000060" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000067",1,"00000000-0000-0000-0000-000000000060" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000006f",0,"00000000-0000-0000-0000-00000000006b" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000072",1,"00000000-0000-0000-0000-00000000006b" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000007a",0,"00000000-0000-0000-0000-000000000076" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000007d",1,"00000000-0000-0000-0000-000000000076" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000085",0,"00000000-0000-0000-0000-000000000081" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000088",1,"00000000-0000-0000-0000-000000000081" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000090",0,"00000000-0000-0000-0000-00000000008c" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000093",1,"00000000-0000-0000-0000-00000000008c" );
INSERT INTO S_SDT VALUES ( "00000000-0000-0000-0000-0000000000a0" );
INSERT INTO S_SDT VALUES ( "00000000-0000-0000-0000-0000000000aa" );
INSERT INTO S_MBR VALUES ( "00000000-0000-0000-0000-0000000000a3",'an_integer_of_structure','',"00000000-0000-0000-0000-0000000000a0","ba5eda7a-def5-0000-0000-000000000002","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_MBR VALUES ( "00000000-0000-0000-0000-0000000000a5",'a_real_of_structure','',"00000000-0000-0000-0000-0000000000a0","ba5eda7a-def5-0000-0000-000000000003","00000000-0000-0000-0000-0000000000a3",'' );
INSERT INTO S_MBR VALUES ( "00000000-0000-0000-0000-0000000000a7",'some_text_of_structure','',"00000000-0000-0000-0000-0000000000a0","ba5eda7a-def5-0000-0000-000000000004","00000000-0000-0000-0000-0000000000a5",'' );
INSERT INTO S_MBR VALUES ( "00000000-0000-0000-0000-0000000000ad",'Number_Of_Simple_Structures','',"00000000-0000-0000-0000-0000000000aa","ba5eda7a-def5-0000-0000-000000000002","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_MBR VALUES ( "00000000-0000-0000-0000-0000000000af",'list_of_structures','',"00000000-0000-0000-0000-0000000000aa","00000000-0000-0000-0000-0000000000a0","00000000-0000-0000-0000-0000000000ad",'' );
INSERT INTO C_C VALUES ( "00000000-0000-0000-0000-000000000023","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000000",'Find_and_Sets',' Tests finds and set manipulations.
',0,"00000000-0000-0000-0000-000000000000",0,'','Find_and_Sets' );
INSERT INTO C_I VALUES ( "00000000-0000-0000-0000-0000000000b6","00000000-0000-0000-0000-000000000000",'Find_and_Sets','' );
INSERT INTO C_I VALUES ( "00000000-0000-0000-0000-0000000000db","00000000-0000-0000-0000-000000000000",'Find_and_SetsReport','' );
INSERT INTO C_I VALUES ( "00000000-0000-0000-0000-000000000112","00000000-0000-0000-0000-000000000000",'Find_and_SetsNav_to_Bridge','' );
INSERT INTO C_I VALUES ( "00000000-0000-0000-0000-00000000011c","00000000-0000-0000-0000-000000000000",'Find_and_SetsWhere_Are_We','' );
INSERT INTO C_P VALUES ( "00000000-0000-0000-0000-0000000000b8",'','Unnamed_Interface','','' );
INSERT INTO C_R VALUES ( "00000000-0000-0000-0000-0000000000dd",'','','Unnamed_Interface','' );
INSERT INTO C_R VALUES ( "00000000-0000-0000-0000-000000000114",'','','Unnamed_Interface','' );
INSERT INTO C_R VALUES ( "00000000-0000-0000-0000-00000000011e",'','','Unnamed_Interface','' );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-0000000000ba","00000000-0000-0000-0000-0000000000b6",0,'Increment','',1 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-0000000000c2","00000000-0000-0000-0000-0000000000b6",0,'Create_Report_Object','',2 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-0000000000c6","00000000-0000-0000-0000-0000000000b6",0,'Delete_Report_Object','',3 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-0000000000ca","00000000-0000-0000-0000-0000000000b6",0,'Check_Enum','',4 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-0000000000d2","00000000-0000-0000-0000-0000000000b6",0,'Insert_Mem_Leak_Test','',5 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-0000000000d6","00000000-0000-0000-0000-0000000000b6",0,'FindAllTest','',6 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-0000000000df","00000000-0000-0000-0000-0000000000db",0,'Start_Test','',1 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-0000000000e6","00000000-0000-0000-0000-0000000000db",0,'Test_Passed','',2 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-0000000000eb","00000000-0000-0000-0000-0000000000db",0,'Test_Failed','',3 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-0000000000f0","00000000-0000-0000-0000-0000000000db",0,'Test_Unsupported','',4 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-0000000000f3","00000000-0000-0000-0000-0000000000db",0,'Test_Text','',5 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-0000000000f7","00000000-0000-0000-0000-0000000000db",0,'Domain_Test_Start','',6 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-0000000000fa","00000000-0000-0000-0000-0000000000db",0,'Domain_Test_Finished','',7 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-0000000000fd","00000000-0000-0000-0000-0000000000db",0,'Specify_Requid','',8 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000116","00000000-0000-0000-0000-000000000112",0,'Big_Bridge_Nav','',1 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000120","00000000-0000-0000-0000-00000000011c",0,'What_Env','',1 );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-0000000000ba","ba5eda7a-def5-0000-0000-000000000000",'Increment','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-0000000000c2","ba5eda7a-def5-0000-0000-000000000000",'Create_Report_Object','',0,'',"00000000-0000-0000-0000-0000000000ba" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-0000000000c6","ba5eda7a-def5-0000-0000-000000000000",'Delete_Report_Object','',0,'',"00000000-0000-0000-0000-0000000000c2" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-0000000000ca","ba5eda7a-def5-0000-0000-000000000000",'Check_Enum','',0,'',"00000000-0000-0000-0000-0000000000c6" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-0000000000d2","ba5eda7a-def5-0000-0000-000000000000",'Insert_Mem_Leak_Test','',0,'',"00000000-0000-0000-0000-0000000000ca" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-0000000000d6","ba5eda7a-def5-0000-0000-000000000000",'FindAllTest','',0,'',"00000000-0000-0000-0000-0000000000d2" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-0000000000df","ba5eda7a-def5-0000-0000-000000000000",'Start_Test','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-0000000000e6","ba5eda7a-def5-0000-0000-000000000000",'Test_Passed','',0,'',"00000000-0000-0000-0000-0000000000df" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-0000000000eb","ba5eda7a-def5-0000-0000-000000000000",'Test_Failed','',0,'',"00000000-0000-0000-0000-0000000000e6" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-0000000000f0","ba5eda7a-def5-0000-0000-000000000000",'Test_Unsupported','',0,'',"00000000-0000-0000-0000-0000000000eb" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-0000000000f3","ba5eda7a-def5-0000-0000-000000000000",'Test_Text','',0,'',"00000000-0000-0000-0000-0000000000f0" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-0000000000f7","ba5eda7a-def5-0000-0000-000000000000",'Domain_Test_Start','',0,'',"00000000-0000-0000-0000-0000000000f3" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-0000000000fa","ba5eda7a-def5-0000-0000-000000000000",'Domain_Test_Finished','',0,'',"00000000-0000-0000-0000-0000000000f7" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-0000000000fd","ba5eda7a-def5-0000-0000-000000000000",'Specify_Requid','',0,'',"00000000-0000-0000-0000-0000000000fa" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000116","ba5eda7a-def5-0000-0000-000000000000",'Big_Bridge_Nav','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000120","ba5eda7a-def5-0000-0000-000000000000",'What_Env','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000000bd","00000000-0000-0000-0000-0000000000ba","ba5eda7a-def5-0000-0000-000000000002",'Incremental','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000000bf","00000000-0000-0000-0000-0000000000ba","ba5eda7a-def5-0000-0000-000000000002",'Incremented','',1,'',"00000000-0000-0000-0000-0000000000bd" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000000cd","00000000-0000-0000-0000-0000000000ca","00000000-0000-0000-0000-000000000097",'The_Input_Value','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000000cf","00000000-0000-0000-0000-0000000000ca","ba5eda7a-def5-0000-0000-000000000002",'The_Return_Value','',1,'',"00000000-0000-0000-0000-0000000000cd" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-0000000000d6","ba5eda7a-def5-0000-0000-000000000002",'noInst','',1,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000000e1","00000000-0000-0000-0000-0000000000df","ba5eda7a-def5-0000-0000-000000000002",'Test_Number','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000000e2","00000000-0000-0000-0000-0000000000df","ba5eda7a-def5-0000-0000-000000000004",'Requid','',0,'',"00000000-0000-0000-0000-0000000000e1" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000000e3","00000000-0000-0000-0000-0000000000df","ba5eda7a-def5-0000-0000-000000000004",'Invoking_Domain','',0,'',"00000000-0000-0000-0000-0000000000e2" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000000e4","00000000-0000-0000-0000-0000000000df","ba5eda7a-def5-0000-0000-000000000004",'Invoking_Object','',0,'',"00000000-0000-0000-0000-0000000000e3" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000000e5","00000000-0000-0000-0000-0000000000df","ba5eda7a-def5-0000-0000-000000000004",'Purpose','',0,'',"00000000-0000-0000-0000-0000000000e4" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000000e8","00000000-0000-0000-0000-0000000000e6","ba5eda7a-def5-0000-0000-000000000004",'Test_Object_Domain','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000000e9","00000000-0000-0000-0000-0000000000e6","ba5eda7a-def5-0000-0000-000000000002",'Test_Number','',0,'',"00000000-0000-0000-0000-0000000000e8" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000000ea","00000000-0000-0000-0000-0000000000e6","ba5eda7a-def5-0000-0000-000000000002",'Test_Value','',0,'',"00000000-0000-0000-0000-0000000000e9" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000000ed","00000000-0000-0000-0000-0000000000eb","ba5eda7a-def5-0000-0000-000000000004",'Failed_Domain_Object','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000000ee","00000000-0000-0000-0000-0000000000eb","ba5eda7a-def5-0000-0000-000000000002",'Failed_Test_Number','',0,'',"00000000-0000-0000-0000-0000000000ed" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000000ef","00000000-0000-0000-0000-0000000000eb","ba5eda7a-def5-0000-0000-000000000002",'Failed_Test_Value','',0,'',"00000000-0000-0000-0000-0000000000ee" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000000f2","00000000-0000-0000-0000-0000000000f0","ba5eda7a-def5-0000-0000-000000000002",'Unsupported_Test_Number','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000000f5","00000000-0000-0000-0000-0000000000f3","ba5eda7a-def5-0000-0000-000000000002",'Test_Number','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000000f6","00000000-0000-0000-0000-0000000000f3","ba5eda7a-def5-0000-0000-000000000004",'Free_Text','',0,'',"00000000-0000-0000-0000-0000000000f5" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000000f9","00000000-0000-0000-0000-0000000000f7","ba5eda7a-def5-0000-0000-000000000004",'This_Domain_Name','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000000fc","00000000-0000-0000-0000-0000000000fa","ba5eda7a-def5-0000-0000-000000000004",'This_Domain_Name','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000000ff","00000000-0000-0000-0000-0000000000fd","ba5eda7a-def5-0000-0000-000000000002",'Requid_Test_Number','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000100","00000000-0000-0000-0000-0000000000fd","ba5eda7a-def5-0000-0000-000000000004",'The_Requid_Itself','',0,'',"00000000-0000-0000-0000-0000000000ff" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000118","00000000-0000-0000-0000-000000000116","ba5eda7a-def5-0000-0000-000000000002",'Test','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000122","00000000-0000-0000-0000-000000000120","ba5eda7a-def5-0000-0000-000000000004",'Env_Text','',1,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_IR VALUES ( "00000000-0000-0000-0000-0000000000b8","00000000-0000-0000-0000-0000000000b6","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-0000000000b9" );
INSERT INTO C_IR VALUES ( "00000000-0000-0000-0000-0000000000dd","00000000-0000-0000-0000-0000000000db","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-0000000000de" );
INSERT INTO C_IR VALUES ( "00000000-0000-0000-0000-000000000114","00000000-0000-0000-0000-000000000112","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000115" );
INSERT INTO C_IR VALUES ( "00000000-0000-0000-0000-00000000011e","00000000-0000-0000-0000-00000000011c","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-00000000011f" );
INSERT INTO C_PO VALUES ( "00000000-0000-0000-0000-0000000000b9","00000000-0000-0000-0000-000000000023",'Find_and_Sets',0,0,'' );
INSERT INTO C_PO VALUES ( "00000000-0000-0000-0000-0000000000de","00000000-0000-0000-0000-000000000023",'Report',0,0,'RPT' );
INSERT INTO C_PO VALUES ( "00000000-0000-0000-0000-000000000115","00000000-0000-0000-0000-000000000023",'Nav_to_Bridge',0,0,'NTB' );
INSERT INTO C_PO VALUES ( "00000000-0000-0000-0000-00000000011f","00000000-0000-0000-0000-000000000023",'Where_Are_We',0,0,'WAW' );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-000000000101","00000000-0000-0000-0000-0000000000df","00000000-0000-0000-0000-0000000000dd" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-000000000103","00000000-0000-0000-0000-0000000000e6","00000000-0000-0000-0000-0000000000dd" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-000000000105","00000000-0000-0000-0000-0000000000eb","00000000-0000-0000-0000-0000000000dd" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-000000000107","00000000-0000-0000-0000-0000000000f0","00000000-0000-0000-0000-0000000000dd" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-000000000109","00000000-0000-0000-0000-0000000000f3","00000000-0000-0000-0000-0000000000dd" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-00000000010b","00000000-0000-0000-0000-0000000000f7","00000000-0000-0000-0000-0000000000dd" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-00000000010d","00000000-0000-0000-0000-0000000000fa","00000000-0000-0000-0000-0000000000dd" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-00000000010f","00000000-0000-0000-0000-0000000000fd","00000000-0000-0000-0000-0000000000dd" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-000000000119","00000000-0000-0000-0000-000000000116","00000000-0000-0000-0000-000000000114" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-000000000123","00000000-0000-0000-0000-000000000120","00000000-0000-0000-0000-00000000011e" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-000000000241","00000000-0000-0000-0000-0000000000ba","00000000-0000-0000-0000-0000000000b8" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-000000000243","00000000-0000-0000-0000-0000000000c2","00000000-0000-0000-0000-0000000000b8" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-000000000245","00000000-0000-0000-0000-0000000000c6","00000000-0000-0000-0000-0000000000b8" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-000000000247","00000000-0000-0000-0000-0000000000ca","00000000-0000-0000-0000-0000000000b8" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-000000000249","00000000-0000-0000-0000-0000000000d2","00000000-0000-0000-0000-0000000000b8" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-00000000024b","00000000-0000-0000-0000-0000000000d6","00000000-0000-0000-0000-0000000000b8" );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-000000000101",'','','',3,2,1 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-000000000103",'','','',3,2,2 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-000000000105",'','','',3,2,3 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-000000000107",'','','',3,2,4 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-000000000109",'','','',3,2,5 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-00000000010b",'','','',3,2,6 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-00000000010d",'','','',3,2,7 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-00000000010f",'','','',3,2,8 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-000000000119",'','','',3,2,1 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-000000000123",'','','',3,2,1 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-000000000241",'','','',3,6,0 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-000000000243",'','','',3,6,0 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-000000000245",'','','',3,6,0 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-000000000247",'','','',3,6,0 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-000000000249",'','','',3,6,0 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-00000000024b",'','','',3,6,0 );
INSERT INTO SM_SM VALUES ( "00000000-0000-0000-0000-000000000199",'',0 );
INSERT INTO SM_SM VALUES ( "00000000-0000-0000-0000-0000000001ca",'',0 );
INSERT INTO SM_SM VALUES ( "00000000-0000-0000-0000-0000000001fd",'',0 );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-0000000001a1","00000000-0000-0000-0000-000000000199","00000000-0000-0000-0000-000000000000",1,'Fault',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-0000000001a7","00000000-0000-0000-0000-000000000199","00000000-0000-0000-0000-000000000000",2,'Finished',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-0000000001ad","00000000-0000-0000-0000-000000000199","00000000-0000-0000-0000-000000000000",3,'Start',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-0000000001d2","00000000-0000-0000-0000-0000000001ca","00000000-0000-0000-0000-000000000000",1,'Fault',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-0000000001d8","00000000-0000-0000-0000-0000000001ca","00000000-0000-0000-0000-000000000000",2,'Finished',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-0000000001de","00000000-0000-0000-0000-0000000001ca","00000000-0000-0000-0000-000000000000",3,'StartA',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-0000000001e4","00000000-0000-0000-0000-0000000001ca","00000000-0000-0000-0000-000000000000",4,'StartB',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000205","00000000-0000-0000-0000-0000000001fd","00000000-0000-0000-0000-000000000000",1,'Fault',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-00000000020b","00000000-0000-0000-0000-0000000001fd","00000000-0000-0000-0000-000000000000",2,'Finished',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000211","00000000-0000-0000-0000-0000000001fd","00000000-0000-0000-0000-000000000000",3,'Start',0,'','','' );
INSERT INTO SM_MOORE VALUES ( "00000000-0000-0000-0000-000000000199" );
INSERT INTO SM_MOORE VALUES ( "00000000-0000-0000-0000-0000000001ca" );
INSERT INTO SM_MOORE VALUES ( "00000000-0000-0000-0000-0000000001fd" );
INSERT INTO SM_ISM VALUES ( "00000000-0000-0000-0000-000000000199","00000000-0000-0000-0000-000000000055" );
INSERT INTO SM_ISM VALUES ( "00000000-0000-0000-0000-0000000001ca","00000000-0000-0000-0000-000000000060" );
INSERT INTO SM_ISM VALUES ( "00000000-0000-0000-0000-0000000001fd","00000000-0000-0000-0000-00000000006b" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-0000000001a1","00000000-0000-0000-0000-000000000199","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-0000000001a7","00000000-0000-0000-0000-000000000199","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-0000000001ad","00000000-0000-0000-0000-000000000199","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-0000000001d2","00000000-0000-0000-0000-0000000001ca","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-0000000001d8","00000000-0000-0000-0000-0000000001ca","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-0000000001de","00000000-0000-0000-0000-0000000001ca","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-0000000001e4","00000000-0000-0000-0000-0000000001ca","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000205","00000000-0000-0000-0000-0000000001fd","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-00000000020b","00000000-0000-0000-0000-0000000001fd","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000211","00000000-0000-0000-0000-0000000001fd","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-0000000001a1","00000000-0000-0000-0000-000000000199","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-0000000001a7","00000000-0000-0000-0000-000000000199","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-0000000001ad","00000000-0000-0000-0000-000000000199","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-0000000001d2","00000000-0000-0000-0000-0000000001ca","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-0000000001d8","00000000-0000-0000-0000-0000000001ca","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-0000000001de","00000000-0000-0000-0000-0000000001ca","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-0000000001e4","00000000-0000-0000-0000-0000000001ca","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000205","00000000-0000-0000-0000-0000000001fd","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-00000000020b","00000000-0000-0000-0000-0000000001fd","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000211","00000000-0000-0000-0000-0000000001fd","00000000-0000-0000-0000-000000000000" );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000004",1,"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000000",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000006",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000009",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000000c",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000000f",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000012",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000015",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000018",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000001b",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000001e",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000021",1,"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000000",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000023",1,"00000000-0000-0000-0000-000000000021","00000000-0000-0000-0000-000000000000",2 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000025",1,"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000023",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000027",1,"00000000-0000-0000-0000-000000000021","00000000-0000-0000-0000-000000000000",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000029",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000002d",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000030",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000034",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000038",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000003b",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000003f",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000043",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000046",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000004a",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000004e",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000051",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000055",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000059",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000005c",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000060",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000064",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000067",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000006b",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000006f",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000072",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000076",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000007a",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000007d",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000081",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000085",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000088",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000008c",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000090",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000093",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000097",1,"00000000-0000-0000-0000-000000000027","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000009e",1,"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000023",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000a0",1,"00000000-0000-0000-0000-00000000009e","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000aa",1,"00000000-0000-0000-0000-00000000009e","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000b2",1,"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000023",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000b4",1,"00000000-0000-0000-0000-0000000000b2","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000b6",1,"00000000-0000-0000-0000-000000000027","00000000-0000-0000-0000-000000000000",6 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000c1",1,"00000000-0000-0000-0000-0000000000b2","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000c5",1,"00000000-0000-0000-0000-0000000000b2","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000c9",1,"00000000-0000-0000-0000-0000000000b2","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000d1",1,"00000000-0000-0000-0000-0000000000b2","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000d5",1,"00000000-0000-0000-0000-0000000000b2","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000db",1,"00000000-0000-0000-0000-000000000027","00000000-0000-0000-0000-000000000000",6 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000112",1,"00000000-0000-0000-0000-000000000027","00000000-0000-0000-0000-000000000000",6 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000011c",1,"00000000-0000-0000-0000-000000000027","00000000-0000-0000-0000-000000000000",6 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000126",1,"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000023",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000128",1,"00000000-0000-0000-0000-000000000126","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000012a",1,"00000000-0000-0000-0000-000000000126","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000012c",1,"00000000-0000-0000-0000-000000000126","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000012e",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO model VALUES ( 'maslin' );
INSERT INTO option VALUES ( 'maslin','actiondialect','WASL' );
INSERT INTO option VALUES ( 'maslin','projectroot','./convertdir/Find_and_Sets/' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000006","00000000-0000-0000-0000-000000000000",'MASLtype','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000009","00000000-0000-0000-0000-000000000000",'MASLunique','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000000c","00000000-0000-0000-0000-000000000000",'device','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000000f","00000000-0000-0000-0000-000000000000",'duration','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000012","00000000-0000-0000-0000-000000000000",'wstring','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000015","00000000-0000-0000-0000-000000000000",'long_integer','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000018","00000000-0000-0000-0000-000000000000",'byte','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000001b","00000000-0000-0000-0000-000000000000",'wcharacter','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000001e","00000000-0000-0000-0000-000000000000",'character','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000002d","00000000-0000-0000-0000-000000000000",'inst_ref<Report_Data>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000030","00000000-0000-0000-0000-000000000000",'inst_ref_set<Report_Data>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000038","00000000-0000-0000-0000-000000000000",'inst_ref<Left_Obj>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000003b","00000000-0000-0000-0000-000000000000",'inst_ref_set<Left_Obj>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000043","00000000-0000-0000-0000-000000000000",'inst_ref<Right_Obj>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000046","00000000-0000-0000-0000-000000000000",'inst_ref_set<Right_Obj>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000004e","00000000-0000-0000-0000-000000000000",'inst_ref<Assoc_Obj>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000051","00000000-0000-0000-0000-000000000000",'inst_ref_set<Assoc_Obj>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000059","00000000-0000-0000-0000-000000000000",'inst_ref<Find_Many>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000005c","00000000-0000-0000-0000-000000000000",'inst_ref_set<Find_Many>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000064","00000000-0000-0000-0000-000000000000",'inst_ref<Find_Single>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000067","00000000-0000-0000-0000-000000000000",'inst_ref_set<Find_Single>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000006f","00000000-0000-0000-0000-000000000000",'inst_ref<Find_Set>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000072","00000000-0000-0000-0000-000000000000",'inst_ref_set<Find_Set>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000007a","00000000-0000-0000-0000-000000000000",'inst_ref<Object_A>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000007d","00000000-0000-0000-0000-000000000000",'inst_ref_set<Object_A>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000085","00000000-0000-0000-0000-000000000000",'inst_ref<Object_B>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000088","00000000-0000-0000-0000-000000000000",'inst_ref_set<Object_B>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000090","00000000-0000-0000-0000-000000000000",'inst_ref<Object_E>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000093","00000000-0000-0000-0000-000000000000",'inst_ref_set<Object_E>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000000",'New_Enum_Type','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000a0","00000000-0000-0000-0000-000000000000",'Simple_Structure_Type','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000aa","00000000-0000-0000-0000-000000000000",'Complex_Structure_Type','','' );
