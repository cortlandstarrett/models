-- root-types-contained: Package_c
-- BP 7.1 content: StreamData syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000029",'A_Test_That_Passed',2,'PASS','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000034",'A_Test_That_Failed',3,'FAIL','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-00000000003f",'Domain_Details',4,'DD','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-00000000004a",'A_Test_That_Is_Unsupported',5,'UNSUPPORTED','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000055",'Duplicated_Result',6,'DUPLICATED','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000060",'Results_Of_Tests',7,'RESULTS',' Stores all of the results from the test made so that they may then be displayed once all the tests have been completed.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-00000000006b",'Test_Details',8,'TD','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000076",'Requirement_Identifier_For_Test',9,'RI',' This object shall store all the requirement identifiers associated with a specific test.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000081",'Supporting_Comments',10,'SC','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-00000000008c",'Test_Suite',11,'TS','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000097",'All_Requirements_In_Test_Suite',12,'REQS',' THis object shall store all the requirements identifiers that must be met in this test suite domain.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-0000000000a2",'Requirement_Met',13,'RM','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000285","00000000-0000-0000-0000-000000000029","00000000-0000-0000-0000-0000000006a3",'','','','Passed_Counter',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000293","00000000-0000-0000-0000-000000000034","00000000-0000-0000-0000-00000000068a",'','','','Failed_Counter',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000029b","00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-000000000000",'','','','Domain_Number',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000002a3","00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-00000000029b",'','','','Domain_Name',0,"ba5eda7a-def5-0000-0000-000000000004",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000002a9","00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-0000000002a3",'',' Use this for the last test that was reported.
','','Last_Reported_Test_Number',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000002c7","00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-000000000671",'','','','current_state',0,"ba5eda7a-def5-0000-0000-000000000006",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000033a","00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-000000000658",'','','','Unsupported_Counter',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000348","00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-00000000063f",'','','','Who_Reported_The_Duplicated_Result',0,"00000000-0000-0000-0000-0000000000ad",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000034e","00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-000000000348",'','','','Duplicated_Test_Count',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000354","00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-00000000034e",'','','','Duplicated_Test_Number',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000035a","00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-000000000354",'','','','Which_Test_Number',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000362","00000000-0000-0000-0000-000000000060","00000000-0000-0000-0000-000000000000",'',' The number of the test  
','','The_Number_Of_Test',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000368","00000000-0000-0000-0000-000000000060","00000000-0000-0000-0000-000000000362",'',' The name of the domain tested
','','The_Name_Of_The_Domain',0,"ba5eda7a-def5-0000-0000-000000000004",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000036e","00000000-0000-0000-0000-000000000060","00000000-0000-0000-0000-000000000368",'',' The result of the test perfomed. i.e. PASSED, FAILED, UNSUPPORTED
','','The_Result_Of_Test',0,"00000000-0000-0000-0000-0000000000ad",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000374","00000000-0000-0000-0000-000000000060","00000000-0000-0000-0000-00000000036e",'','','','The_Value_Of_The_Result',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000037a","00000000-0000-0000-0000-000000000060","00000000-0000-0000-0000-000000000374",'','','','The_Purpose_Of_Test',0,"ba5eda7a-def5-0000-0000-000000000004",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000380","00000000-0000-0000-0000-000000000060","00000000-0000-0000-0000-00000000037a",'',' Number of duplicated results in the test
','','The_No_Of_Duplicated_Results',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000386","00000000-0000-0000-0000-000000000060","00000000-0000-0000-0000-000000000380",'','','','The_Result_Of_Object',0,"ba5eda7a-def5-0000-0000-000000000004",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000392","00000000-0000-0000-0000-000000000060","00000000-0000-0000-0000-000000000626",'','','','Domain_Test_Details',0,"ba5eda7a-def5-0000-0000-000000000004",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000003a0","00000000-0000-0000-0000-00000000006b","00000000-0000-0000-0000-00000000060b",'','','','Test_Purpose',0,"ba5eda7a-def5-0000-0000-000000000004",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000003a6","00000000-0000-0000-0000-00000000006b","00000000-0000-0000-0000-0000000003a0",'','','','Tested_Object',0,"ba5eda7a-def5-0000-0000-000000000004",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000003ac","00000000-0000-0000-0000-00000000006b","00000000-0000-0000-0000-0000000003a6",'','','','The_Test_No',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000003b2","00000000-0000-0000-0000-00000000006b","00000000-0000-0000-0000-0000000003ac",'','','','Result_Found',0,"ba5eda7a-def5-0000-0000-000000000001",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000003b8","00000000-0000-0000-0000-000000000076","00000000-0000-0000-0000-000000000000",'','','','requid',0,"ba5eda7a-def5-0000-0000-000000000004",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000003ca","00000000-0000-0000-0000-000000000081","00000000-0000-0000-0000-0000000005f2",'','','','The_Comment',0,"ba5eda7a-def5-0000-0000-000000000004",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000003d0","00000000-0000-0000-0000-000000000081","00000000-0000-0000-0000-0000000003ca",'','','','The_Test_No',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000003d6","00000000-0000-0000-0000-000000000081","00000000-0000-0000-0000-0000000003d0",'','','','Comment_ID',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000003dc","00000000-0000-0000-0000-00000000008c","00000000-0000-0000-0000-000000000000",'','','','Unique_TS_Identifier',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000003ea","00000000-0000-0000-0000-00000000008c","00000000-0000-0000-0000-0000000003dc",'','','','current_state',0,"ba5eda7a-def5-0000-0000-000000000006",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000004a4","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000000",'','','','Unique_REQS_ID',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000004ac","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-0000000004a4",'','','','REQUID',0,"ba5eda7a-def5-0000-0000-000000000004",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000004b8","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-0000000005d9",'','','','Requid_Test_Status',0,"00000000-0000-0000-0000-0000000000d9",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000004be","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-0000000004b8",'','','','Requid_Text',0,"ba5eda7a-def5-0000-0000-000000000004",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000004c4","00000000-0000-0000-0000-0000000000a2","00000000-0000-0000-0000-000000000000",'','','','Unique_Req_Met_ID',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000004d2","00000000-0000-0000-0000-0000000000a2","00000000-0000-0000-0000-0000000005c0",'',' Unique domain number of the test that met the requirement.
','','Domain_Name',0,"ba5eda7a-def5-0000-0000-000000000004",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000004d8","00000000-0000-0000-0000-0000000000a2","00000000-0000-0000-0000-0000000004d2",'',' Number of the test that met the requirement.
','','Meeting_Test_Number',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000004de","00000000-0000-0000-0000-0000000000a2","00000000-0000-0000-0000-0000000004d8",'','','','Requid_Test_Result',0,"00000000-0000-0000-0000-0000000000ad",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000004e4","00000000-0000-0000-0000-0000000000a2","00000000-0000-0000-0000-0000000004de",'','','','Domain_Number',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000005c0","00000000-0000-0000-0000-0000000000a2","00000000-0000-0000-0000-0000000004c4",'','','','Unique_REQS_ID',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000005d9","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-0000000004ac",'','','','Unique_TS_Identifier',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000005f2","00000000-0000-0000-0000-000000000081","00000000-0000-0000-0000-000000000000",'','','','Domain_Number',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000060b","00000000-0000-0000-0000-00000000006b","00000000-0000-0000-0000-000000000000",'','','','Domain_Number',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000626","00000000-0000-0000-0000-000000000060","00000000-0000-0000-0000-000000000386",'','','','Domain_Number',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000063f","00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-000000000000",'','','','Domain_Number',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000658","00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-000000000000",'','','','Domain_Number',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000671","00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-0000000002a9",'','','','Unique_TS_Identifier',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000068a","00000000-0000-0000-0000-000000000034","00000000-0000-0000-0000-000000000000",'','','','Domain_Number',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000006a3","00000000-0000-0000-0000-000000000029","00000000-0000-0000-0000-000000000000",'','','','Domain_Number',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000006bc","00000000-0000-0000-0000-000000000076","00000000-0000-0000-0000-0000000003b8",'','','','Domain_Number',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000029" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000029" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000029" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000034" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000034" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000034" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000055" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000055" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000055" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000060" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000060" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000060" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000076" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000076" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000076" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000081" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000081" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000081" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-00000000008c" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-00000000008c" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-00000000008c" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000097" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000097" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000097" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-0000000000a2" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-0000000000a2" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-0000000000a2" );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-00000000029b","00000000-0000-0000-0000-00000000003f",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-0000000003dc","00000000-0000-0000-0000-00000000008c",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-0000000004a4","00000000-0000-0000-0000-000000000097",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-0000000004c4","00000000-0000-0000-0000-0000000000a2",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-00000000060b","00000000-0000-0000-0000-00000000006b",0,'' );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000285","00000000-0000-0000-0000-000000000029" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000293","00000000-0000-0000-0000-000000000034" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000029b","00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000002a3","00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000002a9","00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000002c7","00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000033a","00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000348","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000034e","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000354","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000035a","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000362","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000368","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000036e","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000374","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000037a","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000380","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000386","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000392","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000003a0","00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000003a6","00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000003ac","00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000003b2","00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000003b8","00000000-0000-0000-0000-000000000076" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000003ca","00000000-0000-0000-0000-000000000081" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000003d0","00000000-0000-0000-0000-000000000081" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000003d6","00000000-0000-0000-0000-000000000081" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000003dc","00000000-0000-0000-0000-00000000008c" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000003ea","00000000-0000-0000-0000-00000000008c" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000004a4","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000004ac","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000004b8","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000004be","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000004c4","00000000-0000-0000-0000-0000000000a2" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000004d2","00000000-0000-0000-0000-0000000000a2" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000004d8","00000000-0000-0000-0000-0000000000a2" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000004de","00000000-0000-0000-0000-0000000000a2" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000004e4","00000000-0000-0000-0000-0000000000a2" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000285","00000000-0000-0000-0000-000000000029" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000293","00000000-0000-0000-0000-000000000034" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000029b","00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000002a3","00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000002a9","00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000002c7","00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000033a","00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000348","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000034e","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000354","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000035a","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000362","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000368","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000036e","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000374","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000037a","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000380","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000386","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000392","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000003a0","00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000003a6","00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000003ac","00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000003b2","00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000003b8","00000000-0000-0000-0000-000000000076" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000003ca","00000000-0000-0000-0000-000000000081" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000003d0","00000000-0000-0000-0000-000000000081" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000003d6","00000000-0000-0000-0000-000000000081" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000003dc","00000000-0000-0000-0000-00000000008c" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000003ea","00000000-0000-0000-0000-00000000008c" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000004a4","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000004ac","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000004b8","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000004be","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000004c4","00000000-0000-0000-0000-0000000000a2" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000004d2","00000000-0000-0000-0000-0000000000a2" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000004d8","00000000-0000-0000-0000-0000000000a2" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000004de","00000000-0000-0000-0000-0000000000a2" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000004e4","00000000-0000-0000-0000-0000000000a2" );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-0000000005c0","00000000-0000-0000-0000-0000000000a2","00000000-0000-0000-0000-0000000004a4","00000000-0000-0000-0000-000000000097",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-0000000005d9","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-0000000003dc","00000000-0000-0000-0000-00000000008c",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-0000000005f2","00000000-0000-0000-0000-000000000081","00000000-0000-0000-0000-00000000029b","00000000-0000-0000-0000-00000000003f",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-00000000060b","00000000-0000-0000-0000-00000000006b","00000000-0000-0000-0000-00000000029b","00000000-0000-0000-0000-00000000003f",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000626","00000000-0000-0000-0000-000000000060","00000000-0000-0000-0000-00000000029b","00000000-0000-0000-0000-00000000003f",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-00000000063f","00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-00000000029b","00000000-0000-0000-0000-00000000003f",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000658","00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-00000000029b","00000000-0000-0000-0000-00000000003f",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000671","00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-0000000003dc","00000000-0000-0000-0000-00000000008c",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-00000000068a","00000000-0000-0000-0000-000000000034","00000000-0000-0000-0000-00000000029b","00000000-0000-0000-0000-00000000003f",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-0000000006a3","00000000-0000-0000-0000-000000000029","00000000-0000-0000-0000-00000000029b","00000000-0000-0000-0000-00000000003f",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-0000000006bc","00000000-0000-0000-0000-000000000076","00000000-0000-0000-0000-00000000029b","00000000-0000-0000-0000-00000000003f",0,'' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-0000000000a2","00000000-0000-0000-0000-000000000097",0,"00000000-0000-0000-0000-0000000004a4","00000000-0000-0000-0000-000000000256","00000000-0000-0000-0000-000000000263","00000000-0000-0000-0000-00000000025a","00000000-0000-0000-0000-0000000005c0","00000000-0000-0000-0000-0000000005d2","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-00000000008c",0,"00000000-0000-0000-0000-0000000003dc","00000000-0000-0000-0000-000000000241","00000000-0000-0000-0000-000000000245","00000000-0000-0000-0000-00000000024e","00000000-0000-0000-0000-0000000005d9","00000000-0000-0000-0000-0000000005eb","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-000000000081","00000000-0000-0000-0000-00000000003f",0,"00000000-0000-0000-0000-00000000029b","00000000-0000-0000-0000-00000000026b","00000000-0000-0000-0000-000000000278","00000000-0000-0000-0000-00000000026f","00000000-0000-0000-0000-0000000005f2","00000000-0000-0000-0000-000000000604","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-00000000006b","00000000-0000-0000-0000-00000000003f",0,"00000000-0000-0000-0000-00000000029b","00000000-0000-0000-0000-0000000001ed","00000000-0000-0000-0000-0000000001fa","00000000-0000-0000-0000-0000000001f1","00000000-0000-0000-0000-00000000060b","00000000-0000-0000-0000-00000000061d","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-000000000060","00000000-0000-0000-0000-00000000006b",0,"00000000-0000-0000-0000-00000000060b","00000000-0000-0000-0000-000000000202","00000000-0000-0000-0000-00000000020f","00000000-0000-0000-0000-000000000206","00000000-0000-0000-0000-000000000626","00000000-0000-0000-0000-000000000638","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-00000000003f",0,"00000000-0000-0000-0000-00000000029b","00000000-0000-0000-0000-0000000001c3","00000000-0000-0000-0000-0000000001d0","00000000-0000-0000-0000-0000000001c7","00000000-0000-0000-0000-00000000063f","00000000-0000-0000-0000-000000000651","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-00000000003f",0,"00000000-0000-0000-0000-00000000029b","00000000-0000-0000-0000-0000000001ae","00000000-0000-0000-0000-0000000001bb","00000000-0000-0000-0000-0000000001b2","00000000-0000-0000-0000-000000000658","00000000-0000-0000-0000-00000000066a","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-00000000008c",0,"00000000-0000-0000-0000-0000000003dc","00000000-0000-0000-0000-00000000022c","00000000-0000-0000-0000-000000000239","00000000-0000-0000-0000-000000000230","00000000-0000-0000-0000-000000000671","00000000-0000-0000-0000-000000000683","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-000000000034","00000000-0000-0000-0000-00000000003f",0,"00000000-0000-0000-0000-00000000029b","00000000-0000-0000-0000-000000000199","00000000-0000-0000-0000-0000000001a6","00000000-0000-0000-0000-00000000019d","00000000-0000-0000-0000-00000000068a","00000000-0000-0000-0000-00000000069c","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-000000000029","00000000-0000-0000-0000-00000000003f",0,"00000000-0000-0000-0000-00000000029b","00000000-0000-0000-0000-000000000184","00000000-0000-0000-0000-000000000191","00000000-0000-0000-0000-000000000188","00000000-0000-0000-0000-0000000006a3","00000000-0000-0000-0000-0000000006b5","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-000000000076","00000000-0000-0000-0000-00000000006b",0,"00000000-0000-0000-0000-00000000060b","00000000-0000-0000-0000-000000000217","00000000-0000-0000-0000-000000000224","00000000-0000-0000-0000-00000000021b","00000000-0000-0000-0000-0000000006bc","00000000-0000-0000-0000-0000000006ce","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-0000000004a4","00000000-0000-0000-0000-000000000097",0,"00000000-0000-0000-0000-000000000256","00000000-0000-0000-0000-00000000025a" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-0000000003dc","00000000-0000-0000-0000-00000000008c",0,"00000000-0000-0000-0000-000000000241","00000000-0000-0000-0000-00000000024e" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-00000000029b","00000000-0000-0000-0000-00000000003f",0,"00000000-0000-0000-0000-00000000026b","00000000-0000-0000-0000-00000000026f" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-00000000029b","00000000-0000-0000-0000-00000000003f",0,"00000000-0000-0000-0000-0000000001ed","00000000-0000-0000-0000-0000000001f1" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-00000000060b","00000000-0000-0000-0000-00000000006b",0,"00000000-0000-0000-0000-000000000202","00000000-0000-0000-0000-000000000206" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-00000000029b","00000000-0000-0000-0000-00000000003f",0,"00000000-0000-0000-0000-0000000001c3","00000000-0000-0000-0000-0000000001c7" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-00000000029b","00000000-0000-0000-0000-00000000003f",0,"00000000-0000-0000-0000-0000000001ae","00000000-0000-0000-0000-0000000001b2" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-0000000003dc","00000000-0000-0000-0000-00000000008c",0,"00000000-0000-0000-0000-00000000022c","00000000-0000-0000-0000-000000000230" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-00000000029b","00000000-0000-0000-0000-00000000003f",0,"00000000-0000-0000-0000-000000000199","00000000-0000-0000-0000-00000000019d" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-00000000029b","00000000-0000-0000-0000-00000000003f",0,"00000000-0000-0000-0000-000000000184","00000000-0000-0000-0000-000000000188" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-00000000060b","00000000-0000-0000-0000-00000000006b",0,"00000000-0000-0000-0000-000000000217","00000000-0000-0000-0000-00000000021b" );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-00000000028b","00000000-0000-0000-0000-000000000029",'Got_One',' A test has passed, update the attribute accordingly.
',"ba5eda7a-def5-0000-0000-000000000000",0,'
The_Passed_Instance = Invoker_Domain_IH -> R1.A_Test_That_Passed

if The_Passed_Instance != UNDEFINED then

   local_increment = The_Passed_Instance.Passed_Counter

   local_increment = local_increment + 1

   The_Passed_Instance.Passed_Counter = local_increment

else

   [] = RP7::Report_Run_Time_Error["Can not find a passed instance associated with this domain"]
 
endif
',3,'',"00000000-0000-0000-0000-000000000000",2,1 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-000000000299","00000000-0000-0000-0000-000000000034",'You_Goofed_Boy','',"ba5eda7a-def5-0000-0000-000000000000",0,'The_Failed_Instance = Invoker_Domain_IH -> R2.A_Test_That_Failed

if The_Failed_Instance != UNDEFINED then

   local_increment = The_Failed_Instance.Failed_Counter

   local_increment = local_increment + 1

   The_Failed_Instance.Failed_Counter = local_increment

else

   [] = RP7::Report_Run_Time_Error["Can not find a failed instance associated with this domain"]
 
endif
',3,'',"00000000-0000-0000-0000-000000000000",2,1 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-0000000002b5","00000000-0000-0000-0000-00000000003f",'A_Test_Has_Passed','',"ba5eda7a-def5-0000-0000-000000000000",0,'
local_result_found  = FALSE
local_test_purpose  = " "
local_tested_object = " "
local_invoking_domain = Invoking_Domain
local_domain_test_details = Details_Of_Test
local_test_number = New_Test_Number

# For requirement identifier tracking, update the requirement status
[] = RP13::Requirement_Tracker[local_invoking_domain, local_test_number, ''Passed'']

The_Domain_IH = find-one Domain_Details where Domain_Number = local_invoking_domain

if The_Domain_IH != UNDEFINED then
      
   {Set_Of_Test_Details} = The_Domain_IH -> R8.Test_Details

   for a_test in {Set_Of_Test_Details} do
      if a_test.The_Test_No  = New_Test_Number then
         a_test.Result_Found = TRUE
         local_result_found  = TRUE
         local_test_purpose  = a_test.Test_Purpose
         local_tested_object = a_test.Tested_Object
      endif
       
   endfor      

   if New_Test_Number != The_Domain_IH.Last_Reported_Test_Number then      

      # New stuff 24/04/01
      # Find the matching instance from the objects in the set returned from a navigation.
      # A simple find operation could return instances created for other domains!

      {set_of_duplicated_results} = The_Domain_IH -> R4.Duplicated_Result
      for a_duplicated_result in {set_of_duplicated_results} do

         if a_duplicated_result.Duplicated_Test_Number = The_Domain_IH.Last_Reported_Test_Number then

            the_d_r_ih = a_duplicated_result

         endif

      endfor


      # New stuff 24/04/01
      # Use the navigation rather than find to make sure we get the instance
      # that we are expecting to see.
      {Local_Set_Of_Test_Details} = The_Domain_IH -> R8.Test_Details
      for a_test_detail in {Local_Set_Of_Test_Details} do

         if  a_test_detail.The_Test_No = The_Domain_IH.Last_Reported_Test_Number then

            the_old_results_ih = a_test_detail -> R6.Results_Of_Tests

         endif
      endfor

      if the_d_r_ih != UNDEFINED and the_old_results_ih != UNDEFINED then         
         the_old_results_ih.The_No_Of_Duplicated_Results = the_d_r_ih.Duplicated_Test_Count
      endif

      [] = PASS1:Got_One[The_Domain_IH]

      The_Domain_IH.Last_Reported_Test_Number = New_Test_Number

      new_results_of_test_instance = create Results_Of_Tests with \
         The_Number_Of_Test           = New_Test_Number &\
         The_Name_Of_The_Domain       = The_Domain_IH.Domain_Name &\
         The_Result_Of_Test           = ''Passed'' &\ 
         The_Value_Of_The_Result      = New_Test_Result_Value &\        
         The_Purpose_Of_Test          = local_test_purpose &\
         The_No_Of_Duplicated_Results = 0 &\
         The_Result_Of_Object         = local_tested_object &\
         Domain_Test_Details          = local_domain_test_details

      
      #find the test data that matches the test result
# Can''t use referential attribute to find the Test_Details.
#      Matching_Test_Details = find-one Test_Details where The_Test_No = New_Test_Number and \
#                                 Domain_Number = local_invoking_domain

      {Matching_Test_Details_Set} = The_Domain_IH -> R8.Test_Details

      for Matching_Test_Details in {Matching_Test_Details_Set} do

         breakif Matching_Test_Details.The_Test_No = New_Test_Number

      endfor

      # Link this report to the matching test details if it exists

      if Matching_Test_Details != UNDEFINED then 

         link new_results_of_test_instance R6 Matching_Test_Details
      
      else

         [] = RP9::Test_Anomalous_Behaviour[New_Test_Number,"Passed. No Test Details Found"]

      endif

   else

      # Find the duplicated result IH that was linked in when duplication 
      # was first seen.
 
      # Duplicate report found.

#      the_d_r_ih = find-one Duplicated_Result where \
#         Duplicated_Test_Number = New_Test_Number and \
#         Domain_Number = local_invoking_domain

      {Duplicated_Reports} = The_Domain_IH -> R4.Duplicated_Result

      for the_d_r_ih in {Duplicated_Reports} do
          breakif the_d_r_ih.Duplicated_Test_Number = New_Test_Number
      endfor


      if the_d_r_ih = UNDEFINED then
         new_duplicated_instance               = create Duplicated_Result with \
            Duplicated_Test_Number             = New_Test_Number &\
            Who_Reported_The_Duplicated_Result = ''Passed''        &\
            Duplicated_Test_Count              = 0

         link new_duplicated_instance R4 The_Domain_IH
  
         the_d_r_ih = new_duplicated_instance

      else

         # Check to see if the reported result is the same! Passed then failed? We need to know.

#         Previous_Reported_Result = find-one Results_Of_Tests where Domain_Number = local_invoking_domain &\
#                                       The_Number_Of_Test = New_Test_Number

         {Matching_Test_Details_Set} = The_Domain_IH -> R8.Test_Details

         for Matching_Test_Details in {Matching_Test_Details_Set} do

            breakif Matching_Test_Details.The_Test_No = New_Test_Number

         endfor

         if Matching_Test_Details != UNDEFINED then
            Previous_Reported_Result = Matching_Test_Details -> R6.Results_Of_Tests       
         else
            [] = RP9::Test_Anomalous_Behaviour[New_Test_Number,"Duplicated Pass. No Test Details Found"]
         endif


         if Previous_Reported_Result != UNDEFINED then

            if Previous_Reported_Result.The_Result_Of_Test != ''Passed'' then

               [] = RP9::Test_Anomalous_Behaviour[New_Test_Number, "Inconsistent duplicated pass result"]

            endif

         else

            # Big problems, we thought this was duplicated, but it would appear not!

            [] = RP9::Test_Anomalous_Behaviour[New_Test_Number, "Error in duplication of test passed result"]

         endif

      endif      



      [] = DUPLICATED1:Duplicated_Result_Found[the_d_r_ih]       
      
      The_Domain_IH.Last_Reported_Test_Number = New_Test_Number
      
   endif

else

   [] = RP7::Report_Run_Time_Error["Test Passed undefined domain details IH"]
   
endif',3,'',"00000000-0000-0000-0000-000000000000",2,1 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-0000000002ba","00000000-0000-0000-0000-00000000003f",'A_Test_Has_Failed','',"ba5eda7a-def5-0000-0000-000000000000",0,'
local_result_found  = FALSE
local_test_purpose  = " "
local_tested_object = " "
local_invoking_domain = Invoking_Domain
local_domain_test_details = Details_Of_Test
local_new_test_number = New_Test_Number

# For requirement identifier tracking, update the requirement status
[] = RP13::Requirement_Tracker[local_invoking_domain, local_new_test_number, ''Failed'']

The_Domain_IH = find-one Domain_Details where Domain_Number = local_invoking_domain

if The_Domain_IH != UNDEFINED then
   
   {Matching_Test_Details_Set} = The_Domain_IH -> R8.Test_Details
   {Duplicated_Reports}        = The_Domain_IH -> R4.Duplicated_Result

   for Matching_Test_Details in {Matching_Test_Details_Set} do
      breakif Matching_Test_Details.The_Test_No = local_new_test_number
   endfor
   
   if Matching_Test_Details != UNDEFINED then
      Matching_Test_Details.Result_Found = TRUE
      local_result_found  = TRUE
      local_test_purpose  = Matching_Test_Details.Test_Purpose
      local_tested_object = Matching_Test_Details.Tested_Object
   endif 

   # Not duplicated, so 
   if New_Test_Number != The_Domain_IH.Last_Reported_Test_Number then      

#      the_d_r_ih = find-one Duplicated_Result where Duplicated_Test_Number = The_Domain_IH.Last_Reported_Test_Number \
#                   and Domain_Number = local_invoking_domain

      for the_d_r_ih in {Duplicated_Reports} do
          breakif the_d_r_ih.Duplicated_Test_Number = The_Domain_IH.Last_Reported_Test_Number
      endfor


#      the_results_ih = find-one Results_Of_Tests where The_Number_Of_Test = The_Domain_IH.Last_Reported_Test_Number \
#                   and Domain_Number = local_invoking_domain


      the_results_ih = Matching_Test_Details -> R6.Results_Of_Tests

      for the_d_r_ih in {Duplicated_Reports} do
          breakif the_d_r_ih.Duplicated_Test_Number = New_Test_Number
      endfor


      if the_d_r_ih != UNDEFINED and the_results_ih != UNDEFINED then         
         the_results_ih.The_No_Of_Duplicated_Results = the_d_r_ih.Duplicated_Test_Count
      endif

      [] = FAIL1:You_Goofed_Boy[The_Domain_IH]

      The_Domain_IH.Last_Reported_Test_Number = New_Test_Number

      new_results_of_test_instance = create Results_Of_Tests with \
         The_Number_Of_Test           = New_Test_Number &\
         The_Name_Of_The_Domain       = The_Domain_IH.Domain_Name &\
         The_Result_Of_Test           = ''Failed'' &\ 
         The_Value_Of_The_Result      = New_Test_Result_Value &\        
         The_Purpose_Of_Test          = local_test_purpose &\
         The_No_Of_Duplicated_Results = 0 &\
         The_Result_Of_Object         = local_tested_object &\
         Domain_Test_Details          = local_domain_test_details
     

      #find the test data that matches the test result
#      Matching_Test_Details = find-one Test_Details where The_Test_No = New_Test_Number and \
#                                 Domain_Number = local_invoking_domain


      # Link this report to the matching test details if it exists

      if Matching_Test_Details != UNDEFINED then 

         link new_results_of_test_instance R6 Matching_Test_Details
      
      else

         [] = RP9::Test_Anomalous_Behaviour[New_Test_Number,"Failed. No Test Details Found"]

      endif

 
   else

      # Find the duplicated result IH that was linked in when duplication 
      # was first seen.
 
      # Duplicate report found.

#      the_d_r_ih = find-one Duplicated_Result where \
#         Duplicated_Test_Number = New_Test_Number \
#         and Domain_Number = local_invoking_domain

      for the_d_r_ih in {Duplicated_Reports} do
          breakif the_d_r_ih.Duplicated_Test_Number = New_Test_Number
      endfor

      if the_d_r_ih = UNDEFINED then

         # First time this duplication has been seen

         new_duplicated_instance               = create Duplicated_Result with \
            Duplicated_Test_Number             = New_Test_Number &\
            Who_Reported_The_Duplicated_Result = ''Passed''        &\
            Duplicated_Test_Count              = 0

         link new_duplicated_instance R4 The_Domain_IH
  
         the_d_r_ih = new_duplicated_instance

     else

         # Check to see if the reported result is the same! Passed then failed? We need to know.

#         Previous_Reported_Result = find-one Results_Of_Tests where Domain_Number = local_invoking_domain &\
#                                       The_Number_Of_Test = New_Test_Number

         Previous_Reported_Result = Matching_Test_Details -> R6.Results_Of_Tests

         if Previous_Reported_Result != UNDEFINED then

            if Previous_Reported_Result.The_Result_Of_Test != ''Failed'' then

               [] = RP9::Test_Anomalous_Behaviour[New_Test_Number, "Inconsistent duplicated fail result"]

            endif

         else

            # Big problems, we thought this was duplicated, but it would appear not!

            [] = RP9::Test_Anomalous_Behaviour[New_Test_Number, "Error in duplication of test failed result"]

         endif


      endif      



      [] = DUPLICATED1:Duplicated_Result_Found[the_d_r_ih]       
      
      The_Domain_IH.Last_Reported_Test_Number = New_Test_Number
      
   endif

else

   [] = RP7::Report_Run_Time_Error["Test Passed undefined domain details IH"]
   
endif


',3,'',"00000000-0000-0000-0000-0000000002b5",2,2 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-0000000002bf","00000000-0000-0000-0000-00000000003f",'A_Test_Is_Unsupported','',"ba5eda7a-def5-0000-0000-000000000000",0,'local_result_found  = FALSE
local_test_purpose  = " "
local_tested_object = " "

local_invoking_domain = Invoking_Domain
local_test_number     = New_Test_Number

# For requirement identifier tracking, update the requirement status
[] = RP13::Requirement_Tracker[local_invoking_domain, local_test_number, ''Unsupported'']

The_Domain_IH = find-one Domain_Details where Domain_Number = local_invoking_domain

if The_Domain_IH != UNDEFINED then
      
   {Set_Of_Test_Details} = The_Domain_IH -> R8.Test_Details
   {Duplicated_Reports}  = The_Domain_IH -> R4.Duplicated_Result

   for Matching_Test_Details in {Set_Of_Test_Details} do
       breakif Matching_Test_Details.The_Test_No = New_Test_Number
   endfor

   if Matching_Test_Details != UNDEFINED then
      Matching_Test_Details.Result_Found = TRUE
      local_result_found  = TRUE
      local_test_purpose  = Matching_Test_Details.Test_Purpose
      local_tested_object = Matching_Test_Details.Tested_Object
   endif 

 
   if New_Test_Number != The_Domain_IH.Last_Reported_Test_Number then      

#      the_d_r_ih = find-one Duplicated_Result where Duplicated_Test_Number = The_Domain_IH.Last_Reported_Test_Number

      for the_d_r_ih in {Duplicated_Reports} do
          breakif the_d_r_ih.Duplicated_Test_Number = The_Domain_IH.Last_Reported_Test_Number
      endfor

#      the_results_ih = find-one Results_Of_Tests where The_Number_Of_Test = The_Domain_IH.Last_Reported_Test_Number
      the_results_ih = Matching_Test_Details -> R6.Results_Of_Tests

      if the_d_r_ih != UNDEFINED and the_results_ih != UNDEFINED then         
         the_results_ih.The_No_Of_Duplicated_Results = the_d_r_ih.Duplicated_Test_Count
      endif

      [] = UNSUPPORTED1:Not_Done_It_Yet[The_Domain_IH]

      The_Domain_IH.Last_Reported_Test_Number = New_Test_Number

      new_results_of_test_instance = create Results_Of_Tests with \
         The_Number_Of_Test           = New_Test_Number &\
         The_Name_Of_The_Domain       = The_Domain_IH.Domain_Name &\
         The_Result_Of_Test           = ''Unsupported'' &\ 
         The_Value_Of_The_Result      = 0 &\        
         The_Purpose_Of_Test          = local_test_purpose &\
         The_No_Of_Duplicated_Results = 0 &\
         The_Result_Of_Object         = local_tested_object &\
         Domain_Test_Details          = " "

      # Link this report to the matching test details if it exists

      if Matching_Test_Details != UNDEFINED then 

         link new_results_of_test_instance R6 Matching_Test_Details
      
      else

         [] = RP9::Test_Anomalous_Behaviour[New_Test_Number,"Unsupported. No Test Details Found"]

      endif

   else

      # Find the duplicated result IH that was linked in when duplication 
      # was first seen.
 
      # Duplicate report found.

#      the_d_r_ih = find-one Duplicated_Result where \
#         Duplicated_Test_Number = New_Test_Number

      {Duplicated_Reports} = The_Domain_IH -> R4.Duplicated_Result
      for the_d_r_ih in {Duplicated_Reports} do
          breakif the_d_r_ih.Duplicated_Test_Number = New_Test_Number
      endfor


      if the_d_r_ih = UNDEFINED then
         new_duplicated_instance               = create Duplicated_Result with \
            Duplicated_Test_Number             = New_Test_Number &\
            Who_Reported_The_Duplicated_Result = ''Passed''        &\
            Duplicated_Test_Count              = 0

         link new_duplicated_instance R4 The_Domain_IH
  
         the_d_r_ih = new_duplicated_instance

     else

         # Check to see if the reported result is the same! Passed then failed? We need to know.


         Previous_Reported_Result = Matching_Test_Details -> R6.Results_Of_Tests

         if Previous_Reported_Result != UNDEFINED then

            if Previous_Reported_Result.The_Result_Of_Test != ''Unsupported'' then

               [] = RP9::Test_Anomalous_Behaviour[New_Test_Number, "Inconsistent duplicated unsupported result"]

            endif

         else

            # Big problems, we thought this was duplicated, but it would appear not!

            [] = RP9::Test_Anomalous_Behaviour[New_Test_Number, "Error in duplication of test unsupported result"]

         endif



      endif      



      [] = DUPLICATED1:Duplicated_Result_Found[the_d_r_ih]       
      
      The_Domain_IH.Last_Reported_Test_Number = New_Test_Number
      
   endif

else

   [] = RP7::Report_Run_Time_Error["Test Passed undefined domain details IH"]
   
endif

',3,'',"00000000-0000-0000-0000-0000000002ba",2,3 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-0000000002c2","00000000-0000-0000-0000-00000000003f",'End_Of_Test','',"ba5eda7a-def5-0000-0000-000000000000",0,'

if The_Domain != UNDEFINED then

   {Failed_Data} is Failed_Tests_Record_Type

   {Unsupported_Data} is Unsupported_Tests_Record_Type

   {Duplicated_Data} is Duplicated_Tests_Record_Type

   # find the objects detailing the pass/fail & unsupported data
   Tell_Me_About_The_Passes        = The_Domain -> R1.A_Test_That_Passed
   Tell_Me_About_The_Failures      = The_Domain -> R2.A_Test_That_Failed
   Tell_Me_About_The_Unsupported   = The_Domain -> R3.A_Test_That_Is_Unsupported
   {Tell_Me_About_The_Duplicated}  = The_Domain -> R4.Duplicated_Result
   {Tell_Me_About_The_Tests}       = The_Domain -> R8.Test_Details
   {Tell_Me_About_The_Comments}    = The_Domain -> R9.Supporting_Comments

   Local_Total_Duplicated_Count = 0

   # Dump out the details
   Local_Passed          = Tell_Me_About_The_Passes.Passed_Counter
   Local_Failed          = Tell_Me_About_The_Failures.Failed_Counter
   Local_Unsupported     = Tell_Me_About_The_Unsupported.Unsupported_Counter
   Local_The_Domain_Name = The_Domain.Domain_Name

   local_next_test_number = 0
   local_all_test_results_dumped = FALSE
   local_match_found = FALSE

   domain_name_for_file_handling = The_Domain.Domain_Name
   domain_number_for_file_handling = The_Domain.Domain_Number


   # Open a new output file for writing the results to. This will only be done for ADA runs.
   #


#$ADA_INLINE
#with Test_Suite_Text_IO;
#Test_Suite_Text_IO.Open_File_For_Writing(
   #    Name_Of_File             => domain_name_for_file_handling,
   #    Unique_Domain_Identifier => domain_number_for_file_handling);
#$END_ADAINLINE


   # Loop through all of the tests until all of the tests results have been dumped
   loop

      # Get the next test number 
      local_next_test_number = local_next_test_number + 1
      local_match_found = FALSE

      # Obtain a single instance of the test details and obtain the results for that instance
      for Each_Test_Result in {Tell_Me_About_The_Tests} do     

         Tell_Me_About_The_Results = Each_Test_Result -> R6.Results_Of_Tests

         # Sitting in this loop is a good place to now retrieve the
         # requirement identifiers that may be associated with this test.

         {All_The_Requirements} = Each_Test_Result -> R7.Requirement_Identifier_For_Test

         How_Many_Requirements = countof {All_The_Requirements}


         # If results have been found for the current instance 
         if Tell_Me_About_The_Results != UNDEFINED then

            # If the reult of the current instance = the current test to be dumped obtain the reults data
            if Tell_Me_About_The_Results.The_Number_Of_Test = local_next_test_number then
               local_match_found             = TRUE
               Local_Test_Number             = Tell_Me_About_The_Results.The_Number_Of_Test
               Local_Test_Domain_Name        = Tell_Me_About_The_Results.The_Name_Of_The_Domain 
               Local_Duplicated_Result_Count = Tell_Me_About_The_Results.The_No_Of_Duplicated_Results
               Local_The_Object              = Tell_Me_About_The_Results.The_Result_Of_Object
               Local_Result_Value            = Tell_Me_About_The_Results.The_Value_Of_The_Result
               Local_Test_Details            = Tell_Me_About_The_Results.Domain_Test_Details

               Local_Test_Purpose     = Tell_Me_About_The_Results.The_Purpose_Of_Test

               {Local_Comments}    = find Supporting_Comments where The_Test_No = local_next_test_number & Comment_ID = The_Domain.Domain_Number


               # If the test passed set the test result to passed
               if Tell_Me_About_The_Results.The_Result_Of_Test = ''Passed'' then  

                  Local_Test_Result      = "PASSED"

               else
   
                  # If the test failed set the test result to failed
                  if Tell_Me_About_The_Results.The_Result_Of_Test = ''Failed'' then  

                     Local_Test_Result      = "** ** FAILED ** **"
                     # Stash the failed test number to dump out later.
                     append [Local_Test_Number] to {Failed_Data}

                  else
                    
                     # If the test failed set the test result to unsupported
                     if Tell_Me_About_The_Results.The_Result_Of_Test = ''Unsupported'' then

                        Local_Test_Result = "UNSUPPORTED"
                        #stash the unsupported test number to dump out later
                        append [Local_Test_Number, Local_Test_Purpose] to {Unsupported_Data}

                     else

                        # Neither fish nor fowl, should NEVER happen.
                        Local_Test_Result = "UNKNOWN"
                        [] = RP9::Test_Anomalous_Behaviour[Local_Test_Number, "UNKNOWN result"]
 
                     endif

                  endif

               endif
 

               Local_Total_Duplicated_Count = Local_Total_Duplicated_Count + Local_Duplicated_Result_Count
 
               #stash the duplicated count for this test
               if Local_Duplicated_Result_Count > 0 then
                  append [Local_Test_Number, Local_Duplicated_Result_Count ] to {Duplicated_Data}
               endif

               $INLINE

                  fprintf(stderr, " \n");
                  fprintf(stderr, "---------------------------------------------------------------------------\n");
                  fprintf(stderr, "Domain                      %s\n", Local_Test_Domain_Name);
                  fprintf(stderr, "Test Number                 %d\n", Local_Test_Number);
                  fprintf(stderr, "Object                      %s\n", Local_The_Object);
                  fprintf(stderr, "Duplicated Results          %d\n", Local_Duplicated_Result_Count);
                  fprintf(stderr, "Test Purpose                %s\n", Local_Test_Purpose);
                  
               $ENDINLINE

               for Next_Comment in {Local_Comments} do
                  A_Comment = Next_Comment.The_Comment
                  $INLINE
                     fprintf(stderr, "Comments -                  %s\n", A_Comment);
                  $ENDINLINE
               endfor

               #$ADA_INLINE

                  # Test_Suite_Text_IO.Dump_String("");
                  # Test_Suite_Text_IO.Dump_String("---------------------------------------------------------------------------");
                  # Test_Suite_Text_IO.Dump_String("Domain                       " & Local_Test_Domain_Name);
                  # Test_Suite_Text_IO.Dump_String("Object                       " & Local_The_Object);
                  # Test_Suite_Text_IO.Dump_String("Test Number                  " & integer''image(integer(Local_Test_Number )) );
                  # Test_Suite_Text_IO.Dump_String("Duplicated Tests For Domain  " & integer''image(integer(Local_Duplicated_Result_Count )) );
                  # Test_Suite_Text_IO.Dump_String("Test Purpose                 " & Local_Test_Purpose);


               #$END_ADAINLINE

               for each_comment in {Local_Comments} do
                  A_Comment = each_comment.The_Comment
                  #$ADA_INLINE
                     # Test_Suite_Text_IO.Dump_String("Comments -                   " & A_Comment);
                  #$END_ADAINLINE
               endfor

               # Dump out any other specified requirement identifiers.
               if How_Many_Requirements > 0 then

                  First_Time_Through = TRUE

                  for Individual_Requid in {All_The_Requirements} do
                      Local_Test_Req_ID = Individual_Requid.requid

                      if First_Time_Through = TRUE then

                         $INLINE
                           fprintf(stderr, "Requirement Identifier(s)   %s\n", Local_Test_Req_ID );
                         $ENDINLINE

                         
                         #$ADA_INLINE
                            #Test_Suite_Text_IO.Display_Requid ("Requirement Identifier(s)    " , 
                            #    Local_Test_Req_ID);
                         #$END_ADAINLINE

                      else
                         $INLINE
                           fprintf(stderr, "                            %s\n", Local_Test_Req_ID );
                         $ENDINLINE

                         
                         #$ADA_INLINE
                            #Test_Suite_Text_IO.Display_Requid ("                              " , 
                            #    Specific_Requid => Local_Test_Req_ID);
                         #$END_ADAINLINE

                      endif


                     First_Time_Through = FALSE

                  endfor
               endif

               $INLINE
                  fprintf(stderr, "\n");
                  fprintf(stderr, "Result data                 %s\n", Local_Test_Details );
                  fprintf(stderr, "Test Result                 %s with %d\n", Local_Test_Result, Local_Result_Value);
               $ENDINLINE
 
               #$ADA_INLINE
                  #Test_Suite_Text_IO.Dump_String("");
                  #Test_Suite_Text_IO.Dump_String("Result data                  " & Local_Test_Details);
                  #Test_Suite_Text_IO.Dump_String("Test Result                  " & Local_Test_Result & "with " &  
                  #    integer''image(integer(Local_Result_Value ))  );
               #$END_ADAINLINE


            endif
         
            # If all of the tests have been dumped then set the all results dumped flag to TRUE
            if local_next_test_number >= countof {Tell_Me_About_The_Tests} then
               local_all_test_results_dumped = TRUE
            endif
      

         else
            # Not found a result for this test
            [] = RP9::Test_Anomalous_Behaviour[Each_Test_Result.The_Test_No, "One or More Results Were Not Found"]

         endif

         # If a match between the result test number and required test number has been found then break out of the for loop
         breakif local_match_found = TRUE

      endfor

      # If all of the reults have been dumped then break out of the loop
      breakif local_all_test_results_dumped = TRUE 

   endloop

   # If there was some failures found during the run

   Total_Number_Of_Tests_Attempted = Local_Passed + Local_Failed + Local_Unsupported

   $INLINE
      fprintf(stderr, " \n");
      fprintf(stderr,"***************************************************************************\n");
      fprintf(stderr,"***************************************************************************\n");
      fprintf(stderr, " \n");
      fprintf(stderr, "Overall Results for domain      %s\n", Local_The_Domain_Name);
      fprintf(stderr, "Total  Tests      %d\n", Total_Number_Of_Tests_Attempted);
      fprintf(stderr, "Passed Tests      %d\n", Local_Passed);
      fprintf(stderr, "Failed Tests      %d\n", Local_Failed);
   $ENDINLINE

   #$ADA_INLINE
      #Test_Suite_Text_IO.Dump_String("");
      #Test_Suite_Text_IO.Dump_String("***************************************************************************");
      #Test_Suite_Text_IO.Dump_String("***************************************************************************");
      #Test_Suite_Text_IO.Dump_String("");
      #Test_Suite_Text_IO.Dump_String("Overall Results for domain " & Local_The_Domain_Name);
      #Test_Suite_Text_IO.Dump_String("Total Tests       " & integer''image(integer(Total_Number_Of_Tests_Attempted )) );
      #Test_Suite_Text_IO.Dump_String("Passed Tests      " & integer''image(integer(Local_Passed )) );
      #Test_Suite_Text_IO.Dump_String("Failed Tests      " & integer''image(integer(Local_Failed )) );
   #$END_ADAINLINE

   if Local_Failed != 0 then
      for [Local_Failed_Test_Number] in {Failed_Data} do

         $INLINE
            fprintf(stderr, " failure found in test %d\n", Local_Failed_Test_Number);
         $ENDINLINE

         #$ADA_INLINE
            #Test_Suite_Text_IO.Dump_String(" failure found in test " & 
            #    integer''image(integer( Local_Failed_Test_Number )) );
         #$END_ADAINLINE

      endfor
   endif

   $INLINE
   fprintf(stderr, "Unsupported Tests %d\n", Local_Unsupported);
   $ENDINLINE

   #$ADA_INLINE
   #Test_Suite_Text_IO.Dump_String("Unsupported Tests " & 
   #    integer''image(integer( Local_Unsupported )) );
   #$END_ADAINLINE

   if countof {Unsupported_Data} != 0 then

      for [This_Unsupported_Test_Number, This_Test_Details_Text] in {Unsupported_Data} do

         $INLINE
            fprintf(stderr, " test %d was testing for %s\n", This_Unsupported_Test_Number, This_Test_Details_Text  );
         $ENDINLINE

         #$ADA_INLINE
            #Test_Suite_Text_IO.Dump_String(" test " & integer''image(integer( This_Unsupported_Test_Number )) & 
            # " was testing for " & This_Test_Details_Text );
         #$END_ADAINLINE

      endfor

   endif


   $INLINE
      fprintf(stderr, "Total Duplicated Tests  %d\n", Local_Total_Duplicated_Count);
   $ENDINLINE

   #$ADA_INLINE
   #Test_Suite_Text_IO.Dump_String("Total Duplicated Tests  " & 
   #    integer''image(integer( Local_Total_Duplicated_Count )) );
   #$END_ADAINLINE


   if countof {Duplicated_Data} != 0 then

      for [This_Duplicated_Test_Number, Number_Of_Duplicated_Results] in {Duplicated_Data} do

         if Number_Of_Duplicated_Results > 1 then
            $INLINE
               fprintf(stderr, " test %d had %d duplicated results\n", This_Duplicated_Test_Number, Number_Of_Duplicated_Results );
            $ENDINLINE

            #$ADA_INLINE
               #Test_Suite_Text_IO.Dump_String(" test " & integer''image(integer( This_Duplicated_Test_Number )) & " had " & 
               #    integer''image(integer(Number_Of_Duplicated_Results)) & " duplicated results" );
            #$END_ADAINLINE

         else
            $INLINE
               fprintf(stderr, " test %d had %d duplicated result\n", This_Duplicated_Test_Number, Number_Of_Duplicated_Results );
            $ENDINLINE

            #$ADA_INLINE
               #Test_Suite_Text_IO.Dump_String(" test " & integer''image(integer( This_Duplicated_Test_Number )) & " had " & 
               #    integer''image(integer(Number_Of_Duplicated_Results)) & " duplicated result" );
            #$END_ADAINLINE

         endif

      endfor

   endif


   $INLINE
      fprintf(stderr, " \n");
      fprintf(stderr,"***************************************************************************\n");
      fprintf(stderr,"***************************************************************************\n");
      fprintf(stderr, " \n");
   $ENDINLINE


   #$ADA_INLINE
      #Test_Suite_Text_IO.Dump_String("");
      #Test_Suite_Text_IO.Dump_String("***************************************************************************");
      #Test_Suite_Text_IO.Dump_String("***************************************************************************");
      #Test_Suite_Text_IO.Dump_String("");
   #$END_ADAINLINE


 

   # Unlink R1, R2 & R3
   unlink The_Domain R1 Tell_Me_About_The_Passes
   delete Tell_Me_About_The_Passes

   unlink The_Domain R2 Tell_Me_About_The_Failures
   delete Tell_Me_About_The_Failures

   unlink The_Domain R3 Tell_Me_About_The_Unsupported
   delete Tell_Me_About_The_Unsupported
   
   # Unlink and delete each instance of the duplicated results
   for each_duplicated_set in {Tell_Me_About_The_Duplicated} do
      unlink The_Domain R4 each_duplicated_set
      delete each_duplicated_set
   endfor
   
   for inst_of_comment in {Tell_Me_About_The_Comments} do
      unlink The_Domain R9 inst_of_comment
      delete inst_of_comment
   endfor


   # Obtain each instance of the test details unlink and delete the results of the 
   # instance then unlink and delete the test details instance

   no_more_results = FALSE


   {All_Of_The_Tests} = The_Domain -> R8.Test_Details   

   for Each_Test in {All_Of_The_Tests} do
      
      if Each_Test != UNDEFINED then
         
         res = Each_Test -> R6.Results_Of_Tests

        if res != UNDEFINED then
           unlink Each_Test R6 res
           delete res

        else

           # Couldn''t find the results for this test
           [] = RP9::Test_Anomalous_Behaviour[Each_Test.The_Test_No, "One or More Results Were Not Found"]

        endif  

        unlink Each_Test R8 The_Domain

        # any left
        still_res = Each_Test -> R6.Results_Of_Tests
        if still_res != UNDEFINED then
           # This is technically an error condition
           # all outstanding relationships should already have been unlinked
           # but they haven''t
           unlink Each_Test R6 still_res
           delete still_res
        endif

        # Now sort out the linked in requirement identifier object.

        {set_of_requids} = Each_Test -> R7.Requirement_Identifier_For_Test
        for each_requid in {set_of_requids} do
           unlink Each_Test R7 each_requid
           delete each_requid
        endfor

        delete Each_Test

      else

         # Couldn''t find the Test_Details for this test
           [] = RP7::Report_Run_Time_Error["One Or More Test Details Were Not Found"]

      endif

   endfor


   # closes the open ada file

   #$ADA_INLINE
   #Test_Suite_Text_IO.Close_File_For_Writing(
      #    Name_Of_File             => domain_name_for_file_handling,
      #    Unique_Domain_Identifier => domain_number_for_file_handling);
   #$END_ADAINLINE


   #If the Test Suite object exists, initiate requirements analysis.
   # .... and if the current state is ''Waiting'', ie. it has been triggered from the
   # idle state into Waiting by the Scenario 4 being called at the end of a test run.

   The_Requirements_Object = find-one Test_Suite

   if The_Requirements_Object != UNDEFINED then 

      if The_Requirements_Object.Current_State = ''Waiting'' then
         generate TS1:Perform_Analysis() to The_Requirements_Object
      endif

   endif

else

   [] = RP7::Report_Run_Time_Error["Undefined Domain"]

endif
',3,'',"00000000-0000-0000-0000-0000000002bf",2,4 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-000000000340","00000000-0000-0000-0000-00000000004a",'Not_Done_It_Yet','',"ba5eda7a-def5-0000-0000-000000000000",0,'The_Unsupported_Instance = Invoker_Domain_IH -> R3.A_Test_That_Is_Unsupported

if The_Unsupported_Instance != UNDEFINED then

   local_increment = The_Unsupported_Instance.Unsupported_Counter

   local_increment = local_increment + 1

   The_Unsupported_Instance.Unsupported_Counter = local_increment

else

   [] = RP7::Report_Run_Time_Error["Can not find an unsupported instance associated with this domain"]
 
endif
',3,'',"00000000-0000-0000-0000-000000000000",2,1 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-000000000360","00000000-0000-0000-0000-000000000055",'Duplicated_Result_Found','',"ba5eda7a-def5-0000-0000-000000000000",0,'
if Invoker_Domain_IH != UNDEFINED then

    local_increment = Invoker_Domain_IH.Duplicated_Test_Count
 
    local_increment = local_increment + 1

    Invoker_Domain_IH.Duplicated_Test_Count = local_increment

else

   [] = RP7::Report_Run_Time_Error["Can not find a duplicated instance associated with this domain"]
 
endif
',3,'',"00000000-0000-0000-0000-000000000000",2,1 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-0000000003e4","00000000-0000-0000-0000-00000000008c",'Add_Requirement','',"ba5eda7a-def5-0000-0000-000000000000",0,'# Specify a requirement identifier that must be met by this test suite

Exists = find-one All_Requirements_In_Test_Suite where REQUID = New_Requid

Me = find-one Test_Suite

if Me != UNDEFINED then

  [] = RP7::Report_Run_Time_Error["Test Suite not configured for requid capture"]

else


   if Exists != UNDEFINED then

      [] = RP7::Report_Run_Time_Error["Requid already specified"]

   else

      The_New_Requirement_id = create unique All_Requirements_In_Test_Suite with REQUID = New_Requid &\
         Requid_Test_Status = ''Not_Tested'' & Requid_Text = New_Requid_Text

      link Me R11 The_New_Requirement_id

   endif

endif',3,'',"00000000-0000-0000-0000-000000000000",2,1 );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-00000000028c","00000000-0000-0000-0000-00000000028b",'Invoker_Domain_IH',"00000000-0000-0000-0000-000000000043",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-00000000029a","00000000-0000-0000-0000-000000000299",'Invoker_Domain_IH',"00000000-0000-0000-0000-000000000043",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000002b6","00000000-0000-0000-0000-0000000002b5",'New_Test_Number',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000002b7","00000000-0000-0000-0000-0000000002b5",'Invoking_Domain',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-0000000002b6",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000002b8","00000000-0000-0000-0000-0000000002b5",'New_Test_Result_Value',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-0000000002b7",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000002b9","00000000-0000-0000-0000-0000000002b5",'Details_Of_Test',"ba5eda7a-def5-0000-0000-000000000004",0,'',"00000000-0000-0000-0000-0000000002b8",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000002bb","00000000-0000-0000-0000-0000000002ba",'New_Test_Number',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000002bc","00000000-0000-0000-0000-0000000002ba",'Invoking_Domain',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-0000000002bb",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000002bd","00000000-0000-0000-0000-0000000002ba",'New_Test_Result_Value',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-0000000002bc",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000002be","00000000-0000-0000-0000-0000000002ba",'Details_Of_Test',"ba5eda7a-def5-0000-0000-000000000004",0,'',"00000000-0000-0000-0000-0000000002bd",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000002c0","00000000-0000-0000-0000-0000000002bf",'New_Test_Number',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000002c1","00000000-0000-0000-0000-0000000002bf",'Invoking_Domain',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-0000000002c0",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000002c3","00000000-0000-0000-0000-0000000002c2",'The_Domain',"00000000-0000-0000-0000-000000000043",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-000000000341","00000000-0000-0000-0000-000000000340",'Invoker_Domain_IH',"00000000-0000-0000-0000-000000000043",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-000000000361","00000000-0000-0000-0000-000000000360",'Invoker_Domain_IH',"00000000-0000-0000-0000-000000000059",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000003e5","00000000-0000-0000-0000-0000000003e4",'New_Requid',"ba5eda7a-def5-0000-0000-000000000004",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000003e6","00000000-0000-0000-0000-0000000003e4",'New_Requid_Text',"ba5eda7a-def5-0000-0000-000000000004",0,'',"00000000-0000-0000-0000-0000000003e5",'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-000000000006","ba5eda7a-def5-0000-0000-000000000004",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-000000000009","00000000-0000-0000-0000-000000000006",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-00000000000c","00000000-0000-0000-0000-000000000006",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-00000000000f","ba5eda7a-def5-0000-0000-000000000002",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-000000000012","ba5eda7a-def5-0000-0000-000000000004",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-000000000015","ba5eda7a-def5-0000-0000-000000000002",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-000000000018","ba5eda7a-def5-0000-0000-000000000002",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-00000000001b","ba5eda7a-def5-0000-0000-000000000002",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-00000000001e","ba5eda7a-def5-0000-0000-000000000002",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-0000000000b7","00000000-0000-0000-0000-000000000006",0,'integer' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-0000000000ba","00000000-0000-0000-0000-000000000006",0,'string' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-0000000000bd","00000000-0000-0000-0000-000000000006",0,'string' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-0000000000c0","00000000-0000-0000-0000-000000000006",0,'integer' );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000002","00000000-0000-0000-0000-000000000002",'types','',0 );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-000000000021","00000000-0000-0000-0000-000000000002","00000000-0000-0000-0000-000000000002",'RP','masl_domain',0 );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000002",'RP','',0 );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-000000000027","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000002",'Shared','',0 );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-0000000000b5","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000002",'types','',0 );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-0000000000df","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000002",'functions','',0 );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-00000000015c","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000002",'scenarios','',0 );
INSERT INTO S_EDT VALUES ( "00000000-0000-0000-0000-0000000000ad" );
INSERT INTO S_EDT VALUES ( "00000000-0000-0000-0000-0000000000d9" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000b0",'Passed','',"00000000-0000-0000-0000-0000000000ad","00000000-0000-0000-0000-000000000000" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000b1",'Failed','',"00000000-0000-0000-0000-0000000000ad","00000000-0000-0000-0000-0000000000b0" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000b2",'Unsupported','',"00000000-0000-0000-0000-0000000000ad","00000000-0000-0000-0000-0000000000b1" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000b3",'Unknown','',"00000000-0000-0000-0000-0000000000ad","00000000-0000-0000-0000-0000000000b2" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000dc",'Not_Tested','',"00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-000000000000" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000dd",'Tested','',"00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-0000000000dc" );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000000e1","00000000-0000-0000-0000-000000000000",'Test_Passed',' Same function as domain based synch service.
','Invoking_Domain_Number = Passed_Domain_Number

the_test = Passed_Test_Number

the_val  = Passed_Test_Result_Value

the_domain = Passed_Domain

[] = DD1:A_Test_Has_Passed[the_test, Invoking_Domain_Number, the_val, the_domain]

$INLINE
fprintf(stderr, "Test Number %d %s has PASSED with  %d\n",
        the_test, the_domain, the_val);
$ENDINLINE


# $ADA_INLINE
# with Ada.Text_IO;
#
# 
# -- Ada.Text_IO.Put_Line("Object " & the_domain & 
# --                     " Test Number " & integer''image(integer(the_test)) & 
# --                     " has PASSED with " & integer''image(integer(the_val)));
#
# $END_ADAINLINE


',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,1 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000000f2","00000000-0000-0000-0000-000000000000",'Test_Failed','','the_test = the_test_no
the_val = the_test_value

the_domain = Failed_Domain

the_domain_number = Failed_Domain_Number

[] = DD2:A_Test_Has_Failed[the_test, the_domain_number, the_val, the_domain]

$INLINE
fprintf(stderr, "Test Number %d has **** FAILED **** with %d\n",
        the_test, the_val);
$ENDINLINE

#$ADA_INLINE
# with Ada.Text_IO;
#
# -- Ada.Text_IO.New_Line(1);
# -- Ada.Text_IO.Put_Line("Object " & the_domain & 
# --                    " Test Number " & integer''image(integer(the_test)) & 
# --                    " has **** FAILED **** with " & integer''image(integer(the_val)));
# -- Ada.Text_IO.New_Line(1);
#$END_ADAINLINE




',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,2 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000000fe","00000000-0000-0000-0000-000000000000",'Test_Unsupported','','the_test = Unsupported_Test_Number

the_domain = Unsupported_Domain_Number

[] = DD3:A_Test_Is_Unsupported[the_test, the_domain]

$INLINE
fprintf(stderr, "Test Number %d is UNSUPPORTED\n",
        the_test);
$ENDINLINE


#$ADA_INLINE
# with Ada.Text_IO;
#
# 
# -- Ada.Text_IO.Put_Line("Test Number " & integer''image(integer(the_test)) & 
# --                     " is UNSUPPORTED");
#
#$END_ADAINLINE



',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,3 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000106","00000000-0000-0000-0000-000000000000",'Test_Description','','#match_found = FALSE

the_domain = Write_Invoker_Domain_Name

the_test_number = Write_Test_Number

the_purpose = Write_Test_Purpose

the_object = Write_Object

the_requid = Write_Requid

the_domain_number = Write_Invoker_Domain_Number

The_Domain_Details = find-one Domain_Details where Domain_Number = the_domain_number


Found_The_Test_Details = FALSE

if The_Domain_Details != UNDEFINED then
  
   # Have we already got this Test Details?

   {Set_Of_Already_Reported_Test_Details} = The_Domain_Details -> R8.Test_Details

   for Each_Known_Test_Detail in {Set_Of_Already_Reported_Test_Details} do

      if Each_Known_Test_Detail.The_Test_No = the_test_number then

         Found_The_Test_Details = TRUE

         # Got another test details for this test
         [] = RP9::Test_Anomalous_Behaviour[the_test_number, "Duplicated test details received"]

      endif

   endfor


   # Haven''t already got this one
   if Found_The_Test_Details = FALSE then


      The_Test_Details = create Test_Details with \
          Test_Purpose  = the_purpose &\
          Tested_Object = the_object  &\
          The_Test_No   = the_test_number &\
          Result_Found  = FALSE

      # Create new requirement identifier for test object and link it.

      New_Requid_For_Test = create Requirement_Identifier_For_Test with requid = the_requid

      link The_Domain_Details R8 The_Test_Details

      link The_Test_Details R7 New_Requid_For_Test

      # Stash the requirement identifier so it can be checked off against the specified
      # requirements for this test run.

      [] = RP10::Specify_Requid[the_domain_number, the_test_number, the_requid]


      $INLINE
       fprintf(stderr, " \n");
       fprintf(stderr,"***************************************************************************\n");
       fprintf(stderr, "Test Number           : %d\n", the_test_number);
       fprintf(stderr, "Requirment identifier : %s\n", the_requid);
       fprintf(stderr, "Domain                : %s\n", the_domain);
       fprintf(stderr, "Invoker object        : %s\n", the_object);
       fprintf(stderr, "Testing for           : %s\n", the_purpose);
       fprintf(stderr, " \n");
      $ENDINLINE

   endif

else

   # Got another test details for this test
   [] = RP7::Report_Run_Time_Error["No domain details reported"]

endif',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,4 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000116","00000000-0000-0000-0000-000000000000",'Test_Text',' Free form description for a test
','the_test_number = Text_Test_Number
the_text        = Free_Text

This_Domain = find-one Domain_Details where Domain_Number = Domain_No

$INLINE
fprintf(stderr, " \n");
fprintf(stderr, "TEXT NOTE\n");
fprintf(stderr, "Test Number %d  %s\n", the_test_number, the_text);
fprintf(stderr, " \n");
$ENDINLINE

#$ADA_INLINE
# with Ada.Text_IO;
#
# -- Ada.Text_IO.New_Line(1);
# -- Ada.Text_IO.Put_Line("TEXT NOTE");
# -- Ada.Text_IO.Put_Line("Test Number "  & integer''image(integer(the_test_number)) );
# -- Ada.Text_IO.Put("  "  & the_text);
# -- Ada.Text_IO.New_Line(1);
#
#$END_ADAINLINE


{Matching_Test_Details_Set} = This_Domain -> R8.Test_Details
for The_Test in {Matching_Test_Details_Set} do
    breakif The_Test.The_Test_No = Domain_No
endfor

if The_Test != UNDEFINED then

   The_Domain_Details = The_Test -> R8.Domain_Details

   if The_Domain_Details != UNDEFINED then

      The_Supporting_Comment = create Supporting_Comments with Comment_ID  = Domain_No &\
                                                               The_Comment = the_text  &\
                                                               The_Test_No = the_test_number

         link The_Supporting_Comment R9 The_Domain_Details

   else
      [] = RP9::Test_Anomalous_Behaviour[Domain_No, "Domain and Test unlinked"]
   endif

else
   [] = RP9::Test_Anomalous_Behaviour[Domain_No, "Received a comment for unknown test"]
endif
',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,5 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000120","00000000-0000-0000-0000-000000000000",'Create_New_Domain_Test',' This service shall create a unique object for reporting a test pass or fail.
 It shall report its'' own unique identifer to the invoking domain, returned via the bridge. This is so that the reporting domain can specify which object to report into. There can be more than one object in existance at any one time. THis is due to the way the event queue is asynchronous, and service invocations are sysnchronous.
 
','
# Create new domain test

new_domain_test = create unique Domain_Details with \
   Domain_Name               = Invoker_Domain_Name &\
   Last_Reported_Test_Number = 0 &\
   Current_State             = ''Idle''

new_pass = create A_Test_That_Passed with \
    Passed_Counter = 0

new_fail = create A_Test_That_Failed with \
   Failed_Counter = 0

new_unsupported = create A_Test_That_Is_Unsupported with \
   Unsupported_Counter = 0

new_duplicated = create Duplicated_Result with \ 
   Duplicated_Test_Count = 0


# if the Test Suite object has been created, link it to this domain details
The_Test_Suite = find-one Test_Suite

if The_Test_Suite != UNDEFINED then
   link new_domain_test R10 The_Test_Suite 
endif

link new_domain_test R1 new_pass
link new_domain_test R2 new_fail
link new_domain_test R3 new_unsupported
link new_domain_test R4 new_duplicated


Unique_ID = new_domain_test.Domain_Number


Domain_Unique_Identifier = Unique_ID',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,6 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000128","00000000-0000-0000-0000-000000000000",'Report_Run_Time_Error','','the_detail = Detail



$INLINE
 fprintf(stderr, "\n");
 fprintf(stderr,"======================= RUN TIME ERROR ENCOUNTERED =======================\n");
 fprintf(stderr, "\n");
 fprintf(stderr, "Report : %s\n", the_detail);
 fprintf(stderr, " \n");
 fprintf(stderr,"======================= ************************** =======================\n");
 fprintf(stderr, "\n");
$ENDINLINE


#$ADA_INLINE
# with Ada.Text_IO;
# Ada.Text_IO.New_Line(1);
# Ada.Text_IO.Put_Line("======================= RUN TIME ERROR ENCOUNTERED =======================");
# Ada.Text_IO.New_Line(1);
# Ada.Text_IO.Put_Line("Report : "  & the_detail );
# Ada.Text_IO.New_Line(1);
# Ada.Text_IO.Put_Line("======================= ************************** =======================");
# Ada.Text_IO.New_Line(1);

#$END_ADAINLINE

',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,7 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-00000000012e","00000000-0000-0000-0000-000000000000",'Domain_Tests_Have_Finished','','#Find the only domain currently in existence.

The_Domain_Details = find-one Domain_Details where Domain_Number = Domain_Identifer

if The_Domain_Details != UNDEFINED then

   if The_Domain_Details.Domain_Name = Completed_Domain_Name then

      generate DD1:Tests_Have_Finished() to The_Domain_Details

   else

      [] = RP7::Report_Run_Time_Error["Mismatched domains to report from"]


   endif


else

   [] = RP7::Report_Run_Time_Error["No domain found to report from"]

endif
',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,8 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000136","00000000-0000-0000-0000-000000000000",'Test_Anomalous_Behaviour','','the_detail = Anomalous_Detail
the_test_number = Anomalous_Test_Number


$INLINE
 fprintf(stderr, "\n");
 fprintf(stderr,"ANOMALOUS BEHAVIOUR DETECTED \n");
 fprintf(stderr, "\n");
 fprintf(stderr, "Test Number %d Report : %s\n", the_test_number, the_detail );
 fprintf(stderr, " \n");
 fprintf(stderr,"**************************** \n");
 fprintf(stderr, "\n");
$ENDINLINE



# with Ada.Text_IO;
# Ada.Text_IO.New_Line(1);
# Ada.Text_IO.Put_Line("ANOMALOUS BEHAVIOUR DETECTED");
# Ada.Text_IO.New_Line(1);
# Ada.Text_IO.Put_Line("Test Number " & integer''image(integer(the_test_number)) & " Report : "  & the_detail );
# Ada.Text_IO.New_Line(1);
# Ada.Text_IO.Put_Line("****************************");
# Ada.Text_IO.New_Line(1);



',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,9 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-00000000013e","00000000-0000-0000-0000-000000000000",'Specify_Requid',' This service shall allow the calling domain specify a requirement identifier for a given domain and test.
','# The Action for this domain synchronous service is simple.
# It requires that a test is already defined, i.e. start test has already been 
# sent.  Having established this, link in the new requirement identifier
# for that test. There can be many requids associated with a given test.

This_Domain = find-one Domain_Details where Domain_Number = Requid_Domain_Number

#The_Test = find-one Test_Details where Domain_Number = Requid_Domain_Number &\
#                                       The_Test_No   = Requid_Test_Number

{Matching_Test_Details_Set} = This_Domain -> R8.Test_Details
for The_Test in {Matching_Test_Details_Set} do
    breakif The_Test.The_Test_No = Requid_Test_Number
endfor


if The_Test != UNDEFINED then

   The_Domain_Details = The_Test -> R8.Domain_Details

   if The_Domain_Details != UNDEFINED then

      Requid_Domain_Name = The_Domain_Details.Domain_Name


      # ''tick off'' the requid against the listed requids through Test_Suite
      # and Requirements objects.

      Match = FALSE

      The_Test_Suite = find-one Test_Suite

      if The_Test_Suite != UNDEFINED then

         # Grab all the known requirments in this test run
         {Set_Of_Specified_Requids} = The_Test_Suite -> R11.All_Requirements_In_Test_Suite

         for A_Requirement in {Set_Of_Specified_Requids} do

            # If we find what we are looking for, update the test status
            if A_Requirement.REQUID = Requid_Identifier then

               # This is the first test in the test run to meet this requirement.
               # There may well be more.
               if A_Requirement.Requid_Test_Status = ''Not_Tested'' then

                  A_Requirement.Requid_Test_Status = ''Tested''

               endif

               # This requirement has already been met, but that is not to say
               # that this current tests doesn''t also meet the requirement.

               # Create a new instance of the requirment met object and link it
               # via a 1:M relationship to the All_Reqs. object

               new_requid_met = create unique Requirement_Met
        
               new_requid_met.Domain_Number       = Requid_Domain_Number
               new_requid_met.Domain_Name         = Requid_Domain_Name
               new_requid_met.Meeting_Test_Number = Requid_Test_Number
               new_requid_met.Requid_Test_Result  = ''Unknown''

               link new_requid_met R12 A_Requirement

               Match = TRUE

               #Found the requid
               break

            endif

         endfor

         if !Match then
            [] = RP7::Report_Run_Time_Error["Requirement identifier not specified for this run"] 
         endif

      endif

   else

      [] = RP9::Test_Anomalous_Behaviour[Requid_Test_Number, "Domain and Test unlinked"]

   endif

else

   [] = RP9::Test_Anomalous_Behaviour[Requid_Test_Number, "Received a requid for unknown test"]


endif
',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,10 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000148","00000000-0000-0000-0000-000000000000",'Add_All_Requids','','# The idea here is that a new requid shall be for the full test suite, however
# many domains make it up.

# When a start test for a domain is received, it shall be compared against the 
# list of requirements for the full test suite.

# In this way all specified requirements for a test suite can be ''checked off''
# against the known list.

# This service allows the specification of a requirement for the test suite.

this_suite = find-one Test_Suite

if this_suite != UNDEFINED then

   new_requirement = create unique All_Requirements_In_Test_Suite with REQUID = New_Requid

   link this_suite R11 new_requirement

   $INLINE
   fprintf(stderr,"Adding the following requirement   %s\n", New_Requid);
   $ENDINLINE

endif',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,12 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-00000000014e","00000000-0000-0000-0000-000000000000",'Requirement_Tracker','','Requid_Tracker = find-one Test_Suite

if Requid_Tracker != UNDEFINED then


   {The_Match} = find Requirement_Met where Domain_Number = Updated_Domain_ID &\
      Meeting_Test_Number = Updated_Test_Number

   if countof{The_Match} != 0 then

      for each_match in {The_Match} do

         if each_match.Requid_Test_Result = ''Unknown'' then

            each_match.Requid_Test_Result = Updated_Result

         else

            [] = RP7::Report_Run_Time_Error["Requirement already reported for this domain and test"]

         endif 
      endfor

 
#   The_Match = find-one Requirement_Met where Domain_Number = Updated_Domain_ID &\
#      Meeting_Test_Number = Updated_Test_Number

#   if The_Match != UNDEFINED then

#      if The_Match.Requid_Test_Result = ''Unknown'' then

#         The_Match.Requid_Test_Result = Updated_Result

#      else

#         [] = RP7::Report_Run_Time_Error["Requirement already reported for this domain and test"]

#      endif   

# Temporarily ignore this for the moment. Reinstate it later.
#   else
#      [] = RP7::Report_Run_Time_Error["Can''t find the matching requirement"]

   endif   



#else

   # If it is not here, then we are not tracking requirements in this
   # This is not an error condition, so ignore.



endif',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,13 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000158","00000000-0000-0000-0000-000000000000",'Perform_Req_Analysis','','
$INLINE
fprintf(stderr,"Captured requirements analysis started\n");
$ENDINLINE

#$ADA_INLINE
#
#   with Test_Suite_Text_IO;
#
#   Test_Suite_Text_IO.Dump_String(Value => "Captured requirements analysis started");
#
#$END_ADAINLINE

The_Test_Suite = find-one Test_Suite

if The_Test_Suite != UNDEFINED then

   generate TS3:Go() to The_Test_Suite

else

   [] = RP7::Report_Run_Time_Error["Requirements capture not enabled, analysis impossible"]

endif',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,11 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-00000000015e","00000000-0000-0000-0000-000000000000",'Start_Requirements_Capture',' Start Requirements Capture
','# Start testing. Call this only once for a test run. Otherwise..
# 

$INLINE
fprintf(stderr,"Requirements capture enabled\n");
$ENDINLINE

#$ADA_INLINE
#
#   with Test_Suite_Text_IO;
#
#   Test_Suite_Text_IO.Dump_String(Value => "Requirements capture enabled");
#
#$END_ADAINLINE


# There can be only one (sounds like a film...)
Exists = find-one Test_Suite

if Exists = UNDEFINED then

   This_Test_Suite = create unique Test_Suite with Current_State = ''Idle''

else

   # In the middle of a run. Allow to continue, but without the 
   # requirements traceability.

   #Remove all links

   {Requirements} = Exists ->R11.All_Requirements_In_Test_Suite

   for requirement in {Requirements} do

      # Go from the requirement to the test results that fulfill the requirement
      {Tests} = requirement -> R12.Requirement_Met

      for test in {Tests} do

         unlink requirement R12 test

         delete test

      endfor


      unlink Exists R11 requirement

      delete requirement

   endfor

   {Domains} = Exists -> R10.Domain_Details

   for domain in {Domains} do

      unlink domain R10 Exists

      # Don''t delete the domain, let the test run finish, 
      # but without traceability.

   endfor

   delete Exists

   [] = RP7::Report_Run_Time_Error["Test Suite already running. Traceability Lost"]

endif
',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,1 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000160","00000000-0000-0000-0000-000000000000",'Enable_Screen_Display',' Enable_Screen_Display
','
$INLINE
   fprintf(stderr,"Turn screen display ON in ADA mode");
$ENDINLINE

# Turn on screen reporting in an ada run.

#$ADA_INLINE
#
#   with Test_Suite_Text_IO;
#
#   Test_Suite_Text_IO.Set_Output(Output_Is_On => TRUE);
#   Test_Suite_Text_IO.Dump_String(Value => "Writing to screen enabled.");
#
#$END_ADAINLINE


',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,2 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000162","00000000-0000-0000-0000-000000000000",'Disable_Screen_Display',' Disable_Screen_Display
','$INLINE
   fprintf(stderr,"Turn screen display OFF in ADA mode");
$ENDINLINE

# Turn off screen reporting in an ada run.

#$ADA_INLINE
#
#   with Test_Suite_Text_IO;
#
#   Test_Suite_Text_IO.Dump_String(Value => "Writing to screen disabled.");
#   Test_Suite_Text_IO.Set_Output(Output_Is_On => FALSE);
#
#$END_ADAINLINE


',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,3 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000164","00000000-0000-0000-0000-000000000000",'Perform_Captured_Requirements_Analysis',' Perform Captured Requirements Analysis
','
$INLINE
fprintf(stderr,"Captured requirements analysis started\n");
$ENDINLINE

#$ADA_INLINE
#
#   with Test_Suite_Text_IO;
#
#   Test_Suite_Text_IO.Dump_String(Value => "Captured requirements analysis started");
#
#$END_ADAINLINE

The_Test_Suite = find-one Test_Suite

if The_Test_Suite != UNDEFINED then

   generate TS3:Go() to The_Test_Suite

else

   [] = RP7::Report_Run_Time_Error["Requirements capture not enabled, analysis impossible"]

endif',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,4 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000166","00000000-0000-0000-0000-000000000000",'Add_1241_Requirements',' Add 1241 Requirements
','# Catch-all empty requirement tags. Should be ultimately replaced
# when requids are inserted into every individual test.

[] = RP12::Add_All_Requids["Null Requid"]

# Functional Requirements from document SR UR 1241

# Specific Requirements

[] = RP12::Add_All_Requids["1241-0000-01-0101"]
[] = RP12::Add_All_Requids["1241-0000-01-0102"]
[] = RP12::Add_All_Requids["1241-0000-01-0103"]
[] = RP12::Add_All_Requids["1241-0000-01-0104"]
[] = RP12::Add_All_Requids["1241-0000-01-0105"]
[] = RP12::Add_All_Requids["1241-0000-01-0106"]
[] = RP12::Add_All_Requids["1241-0000-01-0107"]
[] = RP12::Add_All_Requids["1241-0000-01-0108"]
[] = RP12::Add_All_Requids["1241-0000-01-0109"]
[] = RP12::Add_All_Requids["1241-0000-01-0110"]
[] = RP12::Add_All_Requids["1241-0000-01-0111"]
[] = RP12::Add_All_Requids["1241-0000-01-0112"]
[] = RP12::Add_All_Requids["1241-0000-01-0113"]
[] = RP12::Add_All_Requids["1241-0000-01-0114"]
[] = RP12::Add_All_Requids["1241-0000-01-0115"]
[] = RP12::Add_All_Requids["1241-0000-01-0116"]
[] = RP12::Add_All_Requids["1241-0000-01-0117"]
[] = RP12::Add_All_Requids["1241-0000-01-0118"]
[] = RP12::Add_All_Requids["1241-0000-01-0119"]
[] = RP12::Add_All_Requids["1241-0000-01-0120"]
[] = RP12::Add_All_Requids["1241-0000-01-0121"]
[] = RP12::Add_All_Requids["1241-0000-01-0122"]
[] = RP12::Add_All_Requids["1241-0000-01-0123"]
[] = RP12::Add_All_Requids["1241-0000-01-0124"]
[] = RP12::Add_All_Requids["1241-0000-01-0125"]
[] = RP12::Add_All_Requids["1241-0000-01-0126"]
[] = RP12::Add_All_Requids["1241-0000-01-0127"]
[] = RP12::Add_All_Requids["1241-0000-01-0128"]
[] = RP12::Add_All_Requids["1241-0000-01-0129"]
[] = RP12::Add_All_Requids["1241-0000-01-0130"]
[] = RP12::Add_All_Requids["1241-0000-01-0131"]
[] = RP12::Add_All_Requids["1241-0000-01-0132"]

# Object State Models

[] = RP12::Add_All_Requids["1241-0000-01-0201"]
[] = RP12::Add_All_Requids["1241-0000-01-0202"]
[] = RP12::Add_All_Requids["1241-0000-01-0203"]
[] = RP12::Add_All_Requids["1241-0000-01-0204"]
[] = RP12::Add_All_Requids["1241-0000-01-0205"]
[] = RP12::Add_All_Requids["1241-0000-01-0206"]
[] = RP12::Add_All_Requids["1241-0000-01-0207"]
[] = RP12::Add_All_Requids["1241-0000-01-0208"]
[] = RP12::Add_All_Requids["1241-0000-01-0209"]
[] = RP12::Add_All_Requids["1241-0000-01-0210"]
[] = RP12::Add_All_Requids["1241-0000-01-0211"]
[] = RP12::Add_All_Requids["1241-0000-01-0212"]
[] = RP12::Add_All_Requids["1241-0000-01-0213"]
[] = RP12::Add_All_Requids["1241-0000-01-0214"]

# Event Generation

[] = RP12::Add_All_Requids["1241-0000-01-0301"]
[] = RP12::Add_All_Requids["1241-0000-01-0302"]
[] = RP12::Add_All_Requids["1241-0000-01-0303"]
[] = RP12::Add_All_Requids["1241-0000-01-0304"]
[] = RP12::Add_All_Requids["1241-0000-01-0305"]

# Event Reception

[] = RP12::Add_All_Requids["1241-0000-01-0401"]
[] = RP12::Add_All_Requids["1241-0000-01-0402"]
[] = RP12::Add_All_Requids["1241-0000-01-0403"]
[] = RP12::Add_All_Requids["1241-0000-01-0404"]
[] = RP12::Add_All_Requids["1241-0000-01-0405"]
[] = RP12::Add_All_Requids["1241-0000-01-0406"]
[] = RP12::Add_All_Requids["1241-0000-01-0407"]
[] = RP12::Add_All_Requids["1241-0000-01-0408"]
[] = RP12::Add_All_Requids["1241-0000-01-0409"]

# Event Processing

[] = RP12::Add_All_Requids["1241-0000-01-0501"]
[] = RP12::Add_All_Requids["1241-0000-01-0502"]
[] = RP12::Add_All_Requids["1241-0000-01-0503"]
[] = RP12::Add_All_Requids["1241-0000-01-0504"]
[] = RP12::Add_All_Requids["1241-0000-01-0505"]
[] = RP12::Add_All_Requids["1241-0000-01-0506"]
[] = RP12::Add_All_Requids["1241-0000-01-0507"]

# Relationships

[] = RP12::Add_All_Requids["1241-0000-01-0601"]
[] = RP12::Add_All_Requids["1241-0000-01-0602"]
[] = RP12::Add_All_Requids["1241-0000-01-0603"]
[] = RP12::Add_All_Requids["1241-0000-01-0604"]
[] = RP12::Add_All_Requids["1241-0000-01-0605"]
[] = RP12::Add_All_Requids["1241-0000-01-0606"]
[] = RP12::Add_All_Requids["1241-0000-01-0607"]
[] = RP12::Add_All_Requids["1241-0000-01-0608"]
[] = RP12::Add_All_Requids["1241-0000-01-0609"]
[] = RP12::Add_All_Requids["1241-0000-01-0610"]
[] = RP12::Add_All_Requids["1241-0000-01-0611"]
[] = RP12::Add_All_Requids["1241-0000-01-0612"]
[] = RP12::Add_All_Requids["1241-0000-01-0613"]
[] = RP12::Add_All_Requids["1241-0000-01-0614"]
[] = RP12::Add_All_Requids["1241-0000-01-0615"]
[] = RP12::Add_All_Requids["1241-0000-01-0616"]
[] = RP12::Add_All_Requids["1241-0000-01-0617"]
[] = RP12::Add_All_Requids["1241-0000-01-0618"]
[] = RP12::Add_All_Requids["1241-0000-01-0619"]
[] = RP12::Add_All_Requids["1241-0000-01-0620"]
[] = RP12::Add_All_Requids["1241-0000-01-0621"]
[] = RP12::Add_All_Requids["1241-0000-01-0622"]
[] = RP12::Add_All_Requids["1241-0000-01-0623"]

# Relationship Navigation

[] = RP12::Add_All_Requids["1241-0000-01-0701"]
[] = RP12::Add_All_Requids["1241-0000-01-0702"]
[] = RP12::Add_All_Requids["1241-0000-01-0703"]
[] = RP12::Add_All_Requids["1241-0000-01-0704"]
[] = RP12::Add_All_Requids["1241-0000-01-0705"]
[] = RP12::Add_All_Requids["1241-0000-01-0706"]
[] = RP12::Add_All_Requids["1241-0000-01-0707"]
[] = RP12::Add_All_Requids["1241-0000-01-0708"]
[] = RP12::Add_All_Requids["1241-0000-01-0709"]
[] = RP12::Add_All_Requids["1241-0000-01-0710"]

# Synchronous Services

[] = RP12::Add_All_Requids["1241-0000-01-0801"]
[] = RP12::Add_All_Requids["1241-0000-01-0802"]
[] = RP12::Add_All_Requids["1241-0000-01-0803"]
[] = RP12::Add_All_Requids["1241-0000-01-0804"]
[] = RP12::Add_All_Requids["1241-0000-01-0805"]
[] = RP12::Add_All_Requids["1241-0000-01-0806"]
[] = RP12::Add_All_Requids["1241-0000-01-0807"]
[] = RP12::Add_All_Requids["1241-0000-01-0808"]
[] = RP12::Add_All_Requids["1241-0000-01-0809"]
[] = RP12::Add_All_Requids["1241-0000-01-0810"]

# Timers

[] = RP12::Add_All_Requids["1241-0000-01-0901"]
[] = RP12::Add_All_Requids["1241-0000-01-0902"]
[] = RP12::Add_All_Requids["1241-0000-01-0903"]
[] = RP12::Add_All_Requids["1241-0000-01-0904"]
[] = RP12::Add_All_Requids["1241-0000-01-0905"]
[] = RP12::Add_All_Requids["1241-0000-01-0906"]
[] = RP12::Add_All_Requids["1241-0000-01-0907"]
[] = RP12::Add_All_Requids["1241-0000-01-0908"]
[] = RP12::Add_All_Requids["1241-0000-01-0909"]
[] = RP12::Add_All_Requids["1241-0000-01-0910"]
[] = RP12::Add_All_Requids["1241-0000-01-0911"]
[] = RP12::Add_All_Requids["1241-0000-01-0912"]
[] = RP12::Add_All_Requids["1241-0000-01-0913"]
[] = RP12::Add_All_Requids["1241-0000-01-0914"]
[] = RP12::Add_All_Requids["1241-0000-01-0915"]
[] = RP12::Add_All_Requids["1241-0000-01-0916"]
[] = RP12::Add_All_Requids["1241-0000-01-0917"]
[] = RP12::Add_All_Requids["1241-0000-01-0918"]
[] = RP12::Add_All_Requids["1241-0000-01-0919"]
[] = RP12::Add_All_Requids["1241-0000-01-0920"]
[] = RP12::Add_All_Requids["1241-0000-01-0921"]

# Domains

[] = RP12::Add_All_Requids["1241-0000-01-1001"]
[] = RP12::Add_All_Requids["1241-0000-01-1002"]
[] = RP12::Add_All_Requids["1241-0000-01-1003"]

# Bridge Services

[] = RP12::Add_All_Requids["1241-0000-01-1101"]
[] = RP12::Add_All_Requids["1241-0000-01-1102"]
[] = RP12::Add_All_Requids["1241-0000-01-1103"]
[] = RP12::Add_All_Requids["1241-0000-01-1104"]
[] = RP12::Add_All_Requids["1241-0000-01-1105"]
[] = RP12::Add_All_Requids["1241-0000-01-1106"]
[] = RP12::Add_All_Requids["1241-0000-01-1107"]
[] = RP12::Add_All_Requids["1241-0000-01-1108"]
[] = RP12::Add_All_Requids["1241-0000-01-1109"]
[] = RP12::Add_All_Requids["1241-0000-01-1110"]
[] = RP12::Add_All_Requids["1241-0000-01-1111"]

# ASL Support

[] = RP12::Add_All_Requids["1241-0000-01-1201"]
[] = RP12::Add_All_Requids["1241-0000-01-1202"]
[] = RP12::Add_All_Requids["1241-0000-01-1203"]
[] = RP12::Add_All_Requids["1241-0000-01-1204"]
[] = RP12::Add_All_Requids["1241-0000-01-1205"]
[] = RP12::Add_All_Requids["1241-0000-01-1206"]
[] = RP12::Add_All_Requids["1241-0000-01-1207"]
[] = RP12::Add_All_Requids["1241-0000-01-1208"]
[] = RP12::Add_All_Requids["1241-0000-01-1209"]
[] = RP12::Add_All_Requids["1241-0000-01-1210"]
[] = RP12::Add_All_Requids["1241-0000-01-1211"]
[] = RP12::Add_All_Requids["1241-0000-01-1212"]
[] = RP12::Add_All_Requids["1241-0000-01-1213"]
[] = RP12::Add_All_Requids["1241-0000-01-1214"]
[] = RP12::Add_All_Requids["1241-0000-01-1215"]
[] = RP12::Add_All_Requids["1241-0000-01-1216"]

# Debugging

[] = RP12::Add_All_Requids["1241-0000-01-1301"]
[] = RP12::Add_All_Requids["1241-0000-01-1302"]
[] = RP12::Add_All_Requids["1241-0000-01-1303"]
[] = RP12::Add_All_Requids["1241-0000-01-1304"]
[] = RP12::Add_All_Requids["1241-0000-01-1305"]
[] = RP12::Add_All_Requids["1241-0000-01-1306"]
[] = RP12::Add_All_Requids["1241-0000-01-1307"]
[] = RP12::Add_All_Requids["1241-0000-01-1308"]
[] = RP12::Add_All_Requids["1241-0000-01-1309"]
[] = RP12::Add_All_Requids["1241-0000-01-1310"]',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,5 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000168","00000000-0000-0000-0000-000000000000",'Relationship_Requirements',' Relationship Requirements
','# Catch-all empty requirement tags. Should be ultimately replaced
# when requids are inserted into every individual test.

[] = RP12::Add_All_Requids["Null Requid"]

[] = RP12::Add_All_Requids["1103-0000-01-0611"]
[] = RP12::Add_All_Requids["1103-0000-01-0612"]
[] = RP12::Add_All_Requids["1103-0000-01-0621"]
[] = RP12::Add_All_Requids["1103-0000-01-0622"]
[] = RP12::Add_All_Requids["1103-0000-01-0631"]
[] = RP12::Add_All_Requids["1103-0000-01-0632"]

# Functional Requirements from document SR UR 1241
[] = RP12::Add_All_Requids["1241-0000-01-0101"]
[] = RP12::Add_All_Requids["1241-0000-01-0102"]
[] = RP12::Add_All_Requids["1241-0000-01-0121"]

# Relationships

[] = RP12::Add_All_Requids["1241-0000-01-0601"]
[] = RP12::Add_All_Requids["1241-0000-01-0602"]
[] = RP12::Add_All_Requids["1241-0000-01-0603"]
[] = RP12::Add_All_Requids["1241-0000-01-0604"]
[] = RP12::Add_All_Requids["1241-0000-01-0605"]
[] = RP12::Add_All_Requids["1241-0000-01-0606"]
[] = RP12::Add_All_Requids["1241-0000-01-0607"]
[] = RP12::Add_All_Requids["1241-0000-01-0608"]
[] = RP12::Add_All_Requids["1241-0000-01-0609"]
[] = RP12::Add_All_Requids["1241-0000-01-0610"]
[] = RP12::Add_All_Requids["1241-0000-01-0611"]
[] = RP12::Add_All_Requids["1241-0000-01-0612"]
[] = RP12::Add_All_Requids["1241-0000-01-0613"]
[] = RP12::Add_All_Requids["1241-0000-01-0614"]
[] = RP12::Add_All_Requids["1241-0000-01-0615"]
[] = RP12::Add_All_Requids["1241-0000-01-0616"]
[] = RP12::Add_All_Requids["1241-0000-01-0617"]
[] = RP12::Add_All_Requids["1241-0000-01-0618"]
[] = RP12::Add_All_Requids["1241-0000-01-0619"]
[] = RP12::Add_All_Requids["1241-0000-01-0620"]
[] = RP12::Add_All_Requids["1241-0000-01-0621"]

# Relationship Navigation

[] = RP12::Add_All_Requids["1241-0000-01-0701"]
[] = RP12::Add_All_Requids["1241-0000-01-0702"]
[] = RP12::Add_All_Requids["1241-0000-01-0703"]
[] = RP12::Add_All_Requids["1241-0000-01-0704"]
[] = RP12::Add_All_Requids["1241-0000-01-0705"]
[] = RP12::Add_All_Requids["1241-0000-01-0706"]
[] = RP12::Add_All_Requids["1241-0000-01-0707"]
[] = RP12::Add_All_Requids["1241-0000-01-0708"]
[] = RP12::Add_All_Requids["1241-0000-01-0709"]

# ASL Support

[] = RP12::Add_All_Requids["1241-0000-01-1202"]
[] = RP12::Add_All_Requids["1241-0000-01-1203"]
[] = RP12::Add_All_Requids["1241-0000-01-1204"]
[] = RP12::Add_All_Requids["1241-0000-01-1205"]',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,6 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-00000000016a","00000000-0000-0000-0000-000000000000",'Add_1103_Requirements',' Add 1103 Requirements
','[] = RP12::Add_All_Requids["Null Requid"]

[] = RP12::Add_All_Requids["1103-0000-01-0111"]
[] = RP12::Add_All_Requids["1103-0000-01-0112"]
[] = RP12::Add_All_Requids["1103-0000-01-0113"]
[] = RP12::Add_All_Requids["1103-0000-01-0211"]
[] = RP12::Add_All_Requids["1103-0000-01-0212"]
[] = RP12::Add_All_Requids["1103-0000-01-0311"]
[] = RP12::Add_All_Requids["1103-0000-01-0312"]
[] = RP12::Add_All_Requids["1103-0000-01-0313"]
[] = RP12::Add_All_Requids["1103-0000-01-0411"]
[] = RP12::Add_All_Requids["1103-0000-01-0421"]
[] = RP12::Add_All_Requids["1103-0000-01-0422"]
[] = RP12::Add_All_Requids["1103-0000-01-0431"]
[] = RP12::Add_All_Requids["1103-0000-01-0432"]
[] = RP12::Add_All_Requids["1103-0000-01-0441"]
[] = RP12::Add_All_Requids["1103-0000-01-0451"]
[] = RP12::Add_All_Requids["1103-0000-01-0452"]
[] = RP12::Add_All_Requids["1103-0000-01-0511"]
[] = RP12::Add_All_Requids["1103-0000-01-0521"]
[] = RP12::Add_All_Requids["1103-0000-01-0522"]
[] = RP12::Add_All_Requids["1103-0000-01-0531"]
[] = RP12::Add_All_Requids["1103-0000-01-0532"]
[] = RP12::Add_All_Requids["1103-0000-01-0541"]
[] = RP12::Add_All_Requids["1103-0000-01-0542"]
[] = RP12::Add_All_Requids["1103-0000-01-0543"]
[] = RP12::Add_All_Requids["1103-0000-01-0544"]
[] = RP12::Add_All_Requids["1103-0000-01-0545"]
[] = RP12::Add_All_Requids["1103-0000-01-0546"]
[] = RP12::Add_All_Requids["1103-0000-01-0547"]
[] = RP12::Add_All_Requids["1103-0000-01-0611"]
[] = RP12::Add_All_Requids["1103-0000-01-0612"]
[] = RP12::Add_All_Requids["1103-0000-01-0621"]
[] = RP12::Add_All_Requids["1103-0000-01-0622"]
[] = RP12::Add_All_Requids["1103-0000-01-0631"]
[] = RP12::Add_All_Requids["1103-0000-01-0632"]
[] = RP12::Add_All_Requids["1103-0000-01-0711"]
[] = RP12::Add_All_Requids["1103-0000-01-0811"]
[] = RP12::Add_All_Requids["1103-0000-01-0812"]
[] = RP12::Add_All_Requids["1103-0000-01-0813"]
[] = RP12::Add_All_Requids["1103-0000-01-0814"]
[] = RP12::Add_All_Requids["1103-0000-01-0815"]
[] = RP12::Add_All_Requids["1103-0000-01-0911"]
[] = RP12::Add_All_Requids["1103-0000-01-0912"]
[] = RP12::Add_All_Requids["1103-0000-01-0913"]
[] = RP12::Add_All_Requids["1103-0000-01-1011"]
[] = RP12::Add_All_Requids["1103-0000-01-1021"]
[] = RP12::Add_All_Requids["1103-0000-01-1031"]
[] = RP12::Add_All_Requids["1103-0000-01-1111"]
[] = RP12::Add_All_Requids["1103-0000-01-1112"]
[] = RP12::Add_All_Requids["1103-0000-01-1113"]
[] = RP12::Add_All_Requids["1103-0000-01-1121"]
[] = RP12::Add_All_Requids["1103-0000-01-1122"]
[] = RP12::Add_All_Requids["1103-0000-01-1211"]
[] = RP12::Add_All_Requids["1103-0000-01-1212"]
[] = RP12::Add_All_Requids["1103-0000-01-1311"]
[] = RP12::Add_All_Requids["1103-0000-01-1411"]
[] = RP12::Add_All_Requids["1103-0000-01-1511"]



',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,7 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-00000000016c","00000000-0000-0000-0000-000000000000",'Events_Requirements',' Events_Requirements
','# Catch-all empty requirement tags. Should be ultimately replaced
# when requids are inserted into every individual test.

[] = RP12::Add_All_Requids["Null Requid"]

# Functional Requirements from document SR UR 1241

# Specific Requirements

[] = RP12::Add_All_Requids["1103-0000-01-0711"]

[] = RP12::Add_All_Requids["1241-0000-01-0103"]
[] = RP12::Add_All_Requids["1241-0000-01-0104"]
# Object State Models

[] = RP12::Add_All_Requids["1241-0000-01-0201"]
[] = RP12::Add_All_Requids["1241-0000-01-0202"]
[] = RP12::Add_All_Requids["1241-0000-01-0203"]
[] = RP12::Add_All_Requids["1241-0000-01-0204"]
[] = RP12::Add_All_Requids["1241-0000-01-0205"]
[] = RP12::Add_All_Requids["1241-0000-01-0206"]
[] = RP12::Add_All_Requids["1241-0000-01-0207"]
[] = RP12::Add_All_Requids["1241-0000-01-0208"]
[] = RP12::Add_All_Requids["1241-0000-01-0209"]
[] = RP12::Add_All_Requids["1241-0000-01-0210"]
[] = RP12::Add_All_Requids["1241-0000-01-0211"]
[] = RP12::Add_All_Requids["1241-0000-01-0212"]
[] = RP12::Add_All_Requids["1241-0000-01-0213"]
[] = RP12::Add_All_Requids["1241-0000-01-0214"]

# Event Generation

[] = RP12::Add_All_Requids["1241-0000-01-0301"]
[] = RP12::Add_All_Requids["1241-0000-01-0302"]
[] = RP12::Add_All_Requids["1241-0000-01-0303"]
[] = RP12::Add_All_Requids["1241-0000-01-0304"]
[] = RP12::Add_All_Requids["1241-0000-01-0305"]

# Event Reception

[] = RP12::Add_All_Requids["1241-0000-01-0401"]
[] = RP12::Add_All_Requids["1241-0000-01-0402"]
[] = RP12::Add_All_Requids["1241-0000-01-0403"]
[] = RP12::Add_All_Requids["1241-0000-01-0404"]
[] = RP12::Add_All_Requids["1241-0000-01-0405"]
[] = RP12::Add_All_Requids["1241-0000-01-0406"]
[] = RP12::Add_All_Requids["1241-0000-01-0407"]
[] = RP12::Add_All_Requids["1241-0000-01-0408"]
[] = RP12::Add_All_Requids["1241-0000-01-0409"]

# Event Processing

[] = RP12::Add_All_Requids["1241-0000-01-0501"]
[] = RP12::Add_All_Requids["1241-0000-01-0502"]
[] = RP12::Add_All_Requids["1241-0000-01-0503"]
[] = RP12::Add_All_Requids["1241-0000-01-0504"]
[] = RP12::Add_All_Requids["1241-0000-01-0505"]
[] = RP12::Add_All_Requids["1241-0000-01-0506"]
[] = RP12::Add_All_Requids["1241-0000-01-0507"]
',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,8 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-00000000016e","00000000-0000-0000-0000-000000000000",'Find_And_Sets_Requirements',' Find_And_Sets_Requirements
','[] = RP12::Add_All_Requids["Null Requid"]
[] = RP12::Add_All_Requids["1241-0000-01-0119"]
[] = RP12::Add_All_Requids["1241-0000-01-0122"]
[] = RP12::Add_All_Requids["1241-0000-01-0124"]
[] = RP12::Add_All_Requids["1241-0000-01-0125"]
[] = RP12::Add_All_Requids["1241-0000-01-0126"]

[] = RP12::Add_All_Requids["1241-0000-01-1206"]
[] = RP12::Add_All_Requids["1241-0000-01-1207"]
[] = RP12::Add_All_Requids["1241-0000-01-1208"]
[] = RP12::Add_All_Requids["1241-0000-01-1209"]
[] = RP12::Add_All_Requids["1241-0000-01-1210"]
[] = RP12::Add_All_Requids["1241-0000-01-1211"]

[] = RP12::Add_All_Requids["1103-0000-01-0541"]
[] = RP12::Add_All_Requids["1103-0000-01-0542"]
[] = RP12::Add_All_Requids["1103-0000-01-0543"]
[] = RP12::Add_All_Requids["1103-0000-01-0544"]
[] = RP12::Add_All_Requids["1103-0000-01-0545"]
[] = RP12::Add_All_Requids["1103-0000-01-0546"]
[] = RP12::Add_All_Requids["1103-0000-01-0547"]
',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,9 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000170","00000000-0000-0000-0000-000000000000",'ASL_Mapping_Requirements',' ASL Mapping Requirements
','[] = RP12::Add_All_Requids["Null Requid"]

# Specific Requirements

[] = RP12::Add_All_Requids["1241-0000-01-0105"]
[] = RP12::Add_All_Requids["1241-0000-01-0106"]
[] = RP12::Add_All_Requids["1241-0000-01-0107"]
[] = RP12::Add_All_Requids["1241-0000-01-0108"]
[] = RP12::Add_All_Requids["1241-0000-01-0110"]
[] = RP12::Add_All_Requids["1241-0000-01-0114"]
[] = RP12::Add_All_Requids["1241-0000-01-0115"]
[] = RP12::Add_All_Requids["1241-0000-01-0131"]
[] = RP12::Add_All_Requids["1241-0000-01-1201"]
[] = RP12::Add_All_Requids["1241-0000-01-1213"]

[] = RP12::Add_All_Requids["1103-0000-01-0311"]
[] = RP12::Add_All_Requids["1103-0000-01-0312"]
[] = RP12::Add_All_Requids["1103-0000-01-0313"]
[] = RP12::Add_All_Requids["1103-0000-01-0411"]
[] = RP12::Add_All_Requids["1103-0000-01-0421"]
[] = RP12::Add_All_Requids["1103-0000-01-0422"]
[] = RP12::Add_All_Requids["1103-0000-01-0431"]
[] = RP12::Add_All_Requids["1103-0000-01-0432"]
[] = RP12::Add_All_Requids["1103-0000-01-0441"]
[] = RP12::Add_All_Requids["1103-0000-01-0451"]
[] = RP12::Add_All_Requids["1103-0000-01-0452"]
[] = RP12::Add_All_Requids["1103-0000-01-0511"]
[] = RP12::Add_All_Requids["1103-0000-01-0521"]
[] = RP12::Add_All_Requids["1103-0000-01-0522"]
[] = RP12::Add_All_Requids["1103-0000-01-0531"]
[] = RP12::Add_All_Requids["1103-0000-01-0541"]
[] = RP12::Add_All_Requids["1103-0000-01-0543"]
[] = RP12::Add_All_Requids["1103-0000-01-0544"]
[] = RP12::Add_All_Requids["1103-0000-01-0545"]
[] = RP12::Add_All_Requids["1103-0000-01-0547"]
[] = RP12::Add_All_Requids["1103-0000-01-0811"]
[] = RP12::Add_All_Requids["1103-0000-01-0812"]
[] = RP12::Add_All_Requids["1103-0000-01-0813"]
[] = RP12::Add_All_Requids["1103-0000-01-0814"]
[] = RP12::Add_All_Requids["1103-0000-01-0815"]
[] = RP12::Add_All_Requids["1103-0000-01-0911"]
[] = RP12::Add_All_Requids["1103-0000-01-0912"]
[] = RP12::Add_All_Requids["1103-0000-01-0913"]
[] = RP12::Add_All_Requids["1103-0000-01-1111"]
[] = RP12::Add_All_Requids["1103-0000-01-1211"]
[] = RP12::Add_All_Requids["1103-0000-01-1212"]
[] = RP12::Add_All_Requids["1103-0000-01-1511"]

[] = RP12::Add_All_Requids["1101-0000-01-0108"]
[] = RP12::Add_All_Requids["1101-0000-01-0109"]
[] = RP12::Add_All_Requids["1101-0000-01-0110"]',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,10 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000172","00000000-0000-0000-0000-000000000000",'Function_Calls_Requirements',' Function Calls Requirements
','[] = RP12::Add_All_Requids["Null Requid"]

# Synchronous Services

[] = RP12::Add_All_Requids["1241-0000-01-0801"]
[] = RP12::Add_All_Requids["1241-0000-01-0802"]
[] = RP12::Add_All_Requids["1241-0000-01-0803"]
[] = RP12::Add_All_Requids["1241-0000-01-0804"]
[] = RP12::Add_All_Requids["1241-0000-01-0805"]
[] = RP12::Add_All_Requids["1241-0000-01-0806"]
[] = RP12::Add_All_Requids["1241-0000-01-0807"]
[] = RP12::Add_All_Requids["1241-0000-01-0808"]
[] = RP12::Add_All_Requids["1241-0000-01-0809"]
[] = RP12::Add_All_Requids["1241-0000-01-0810"]
[] = RP12::Add_All_Requids["1241-0000-01-1215"]

[] = RP12::Add_All_Requids["1103-0000-01-1011"]
[] = RP12::Add_All_Requids["1103-0000-01-1021"]
[] = RP12::Add_All_Requids["1103-0000-01-1031"]

[] = RP12::Add_All_Requids["1101-0000-01-0138"]',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,11 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000174","00000000-0000-0000-0000-000000000000",'Multi_Domain_Bridges_Requirements',' Multi Domain Bridges Requirements
','
[] = RP12::Add_All_Requids["Null Requid"]

[] = RP12::Add_All_Requids["1241-0000-01-0810"]

[] = RP12::Add_All_Requids["1241-0000-01-1101"]
[] = RP12::Add_All_Requids["1241-0000-01-1102"]
[] = RP12::Add_All_Requids["1241-0000-01-1103"]
[] = RP12::Add_All_Requids["1241-0000-01-1104"]
[] = RP12::Add_All_Requids["1241-0000-01-1105"]
[] = RP12::Add_All_Requids["1241-0000-01-1106"]
[] = RP12::Add_All_Requids["1241-0000-01-1107"]
[] = RP12::Add_All_Requids["1241-0000-01-1108"]
[] = RP12::Add_All_Requids["1241-0000-01-1109"]
[] = RP12::Add_All_Requids["1241-0000-01-1110"]

[] = RP12::Add_All_Requids["1103-0000-01-1311"]

[] = RP12::Add_All_Requids["1103-0000-01-1021"]
[] = RP12::Add_All_Requids["1103-0000-01-1311"]

',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,12 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000176","00000000-0000-0000-0000-000000000000",'Creation_Deletion_Requirements',' Creation Deletion Requirements
','[] = RP12::Add_All_Requids["Null Requid"]

[] = RP12::Add_All_Requids["1241-0000-01-0101"]
[] = RP12::Add_All_Requids["1241-0000-01-0102"]
[] = RP12::Add_All_Requids["1241-0000-01-0109"]
[] = RP12::Add_All_Requids["1241-0000-01-0116"]
[] = RP12::Add_All_Requids["1241-0000-01-0117"]
[] = RP12::Add_All_Requids["1241-0000-01-0118"]
[] = RP12::Add_All_Requids["1241-0000-01-0120"]
[] = RP12::Add_All_Requids["1241-0000-01-0121"]
[] = RP12::Add_All_Requids["1241-0000-01-0123"]
[] = RP12::Add_All_Requids["1241-0000-01-0203"]
[] = RP12::Add_All_Requids["1241-0000-01-0206"]

[] = RP12::Add_All_Requids["1103-0000-01-0311"]
[] = RP12::Add_All_Requids["1103-0000-01-0511"]
[] = RP12::Add_All_Requids["1103-0000-01-0521"]
[] = RP12::Add_All_Requids["1103-0000-01-0522"]
[] = RP12::Add_All_Requids["1103-0000-01-0531"]
[] = RP12::Add_All_Requids["1103-0000-01-0532"]

[] = RP12::Add_All_Requids["1101-0000-01-0118"]
[] = RP12::Add_All_Requids["1101-0000-01-0122"]
',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,13 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000178","00000000-0000-0000-0000-000000000000",'Timer_Requirements',' Timer Requirements
','[] = RP12::Add_All_Requids["Null Requid"]

# Timers

[] = RP12::Add_All_Requids["1241-0000-01-0901"]
[] = RP12::Add_All_Requids["1241-0000-01-0902"]
[] = RP12::Add_All_Requids["1241-0000-01-0903"]
[] = RP12::Add_All_Requids["1241-0000-01-0904"]
[] = RP12::Add_All_Requids["1241-0000-01-0905"]
[] = RP12::Add_All_Requids["1241-0000-01-0906"]
[] = RP12::Add_All_Requids["1241-0000-01-0907"]
[] = RP12::Add_All_Requids["1241-0000-01-0908"]
[] = RP12::Add_All_Requids["1241-0000-01-0909"]
[] = RP12::Add_All_Requids["1241-0000-01-0910"]
[] = RP12::Add_All_Requids["1241-0000-01-0911"]
[] = RP12::Add_All_Requids["1241-0000-01-0912"]
[] = RP12::Add_All_Requids["1241-0000-01-0913"]
[] = RP12::Add_All_Requids["1241-0000-01-0914"]
[] = RP12::Add_All_Requids["1241-0000-01-0915"]
[] = RP12::Add_All_Requids["1241-0000-01-0916"]
[] = RP12::Add_All_Requids["1241-0000-01-0917"]
[] = RP12::Add_All_Requids["1241-0000-01-0918"]
[] = RP12::Add_All_Requids["1241-0000-01-0919"]
[] = RP12::Add_All_Requids["1241-0000-01-0920"]
[] = RP12::Add_All_Requids["1241-0000-01-0921"]

[] = RP12::Add_All_Requids["1103-0000-01-1111"]
[] = RP12::Add_All_Requids["1103-0000-01-1112"]
[] = RP12::Add_All_Requids["1103-0000-01-1113"]
[] = RP12::Add_All_Requids["1103-0000-01-1121"]
[] = RP12::Add_All_Requids["1103-0000-01-1122"]',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,14 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-00000000017a","00000000-0000-0000-0000-000000000000",'All_Requirements',' All Requirements
','# Catch-all empty requirement tags. Should be ultimately replaced
# when requids are inserted into every individual test.

[] = RP12::Add_All_Requids["Null Requid"]
[] = RP12::Add_All_Requids["null requid"]

# Functional Requirements from document SR UR 1241

# Specific Requirements

[] = RP12::Add_All_Requids["1241-0000-01-0101"]
[] = RP12::Add_All_Requids["1241-0000-01-0102"]
[] = RP12::Add_All_Requids["1241-0000-01-0103"]
[] = RP12::Add_All_Requids["1241-0000-01-0104"]
[] = RP12::Add_All_Requids["1241-0000-01-0105"]
[] = RP12::Add_All_Requids["1241-0000-01-0106"]
[] = RP12::Add_All_Requids["1241-0000-01-0107"]
[] = RP12::Add_All_Requids["1241-0000-01-0108"]
[] = RP12::Add_All_Requids["1241-0000-01-0109"]
[] = RP12::Add_All_Requids["1241-0000-01-0110"]
[] = RP12::Add_All_Requids["1241-0000-01-0111"]
[] = RP12::Add_All_Requids["1241-0000-01-0112"]
[] = RP12::Add_All_Requids["1241-0000-01-0113"]
[] = RP12::Add_All_Requids["1241-0000-01-0114"]
[] = RP12::Add_All_Requids["1241-0000-01-0115"]
[] = RP12::Add_All_Requids["1241-0000-01-0116"]
[] = RP12::Add_All_Requids["1241-0000-01-0117"]
[] = RP12::Add_All_Requids["1241-0000-01-0118"]
[] = RP12::Add_All_Requids["1241-0000-01-0119"]
[] = RP12::Add_All_Requids["1241-0000-01-0120"]
[] = RP12::Add_All_Requids["1241-0000-01-0121"]
[] = RP12::Add_All_Requids["1241-0000-01-0122"]
[] = RP12::Add_All_Requids["1241-0000-01-0123"]
[] = RP12::Add_All_Requids["1241-0000-01-0124"]
[] = RP12::Add_All_Requids["1241-0000-01-0125"]
[] = RP12::Add_All_Requids["1241-0000-01-0126"]
[] = RP12::Add_All_Requids["1241-0000-01-0127"]
[] = RP12::Add_All_Requids["1241-0000-01-0128"]
[] = RP12::Add_All_Requids["1241-0000-01-0129"]
[] = RP12::Add_All_Requids["1241-0000-01-0130"]
[] = RP12::Add_All_Requids["1241-0000-01-0131"]
[] = RP12::Add_All_Requids["1241-0000-01-0132"]

# Object State Models

[] = RP12::Add_All_Requids["1241-0000-01-0201"]
[] = RP12::Add_All_Requids["1241-0000-01-0202"]
[] = RP12::Add_All_Requids["1241-0000-01-0203"]
[] = RP12::Add_All_Requids["1241-0000-01-0204"]
[] = RP12::Add_All_Requids["1241-0000-01-0205"]
[] = RP12::Add_All_Requids["1241-0000-01-0206"]
[] = RP12::Add_All_Requids["1241-0000-01-0207"]
[] = RP12::Add_All_Requids["1241-0000-01-0208"]
[] = RP12::Add_All_Requids["1241-0000-01-0209"]
[] = RP12::Add_All_Requids["1241-0000-01-0210"]
[] = RP12::Add_All_Requids["1241-0000-01-0211"]
[] = RP12::Add_All_Requids["1241-0000-01-0212"]
[] = RP12::Add_All_Requids["1241-0000-01-0213"]
[] = RP12::Add_All_Requids["1241-0000-01-0214"]

# Event Generation

[] = RP12::Add_All_Requids["1241-0000-01-0301"]
[] = RP12::Add_All_Requids["1241-0000-01-0302"]
[] = RP12::Add_All_Requids["1241-0000-01-0303"]
[] = RP12::Add_All_Requids["1241-0000-01-0304"]
[] = RP12::Add_All_Requids["1241-0000-01-0305"]

# Event Reception

[] = RP12::Add_All_Requids["1241-0000-01-0401"]
[] = RP12::Add_All_Requids["1241-0000-01-0402"]
[] = RP12::Add_All_Requids["1241-0000-01-0403"]
[] = RP12::Add_All_Requids["1241-0000-01-0404"]
[] = RP12::Add_All_Requids["1241-0000-01-0405"]
[] = RP12::Add_All_Requids["1241-0000-01-0406"]
[] = RP12::Add_All_Requids["1241-0000-01-0407"]
[] = RP12::Add_All_Requids["1241-0000-01-0408"]
[] = RP12::Add_All_Requids["1241-0000-01-0409"]

# Event Processing

[] = RP12::Add_All_Requids["1241-0000-01-0501"]
[] = RP12::Add_All_Requids["1241-0000-01-0502"]
[] = RP12::Add_All_Requids["1241-0000-01-0503"]
[] = RP12::Add_All_Requids["1241-0000-01-0504"]
[] = RP12::Add_All_Requids["1241-0000-01-0505"]
[] = RP12::Add_All_Requids["1241-0000-01-0506"]
[] = RP12::Add_All_Requids["1241-0000-01-0507"]

# Relationships

[] = RP12::Add_All_Requids["1241-0000-01-0601"]
[] = RP12::Add_All_Requids["1241-0000-01-0602"]
[] = RP12::Add_All_Requids["1241-0000-01-0603"]
[] = RP12::Add_All_Requids["1241-0000-01-0604"]
[] = RP12::Add_All_Requids["1241-0000-01-0605"]
[] = RP12::Add_All_Requids["1241-0000-01-0606"]
[] = RP12::Add_All_Requids["1241-0000-01-0607"]
[] = RP12::Add_All_Requids["1241-0000-01-0608"]
[] = RP12::Add_All_Requids["1241-0000-01-0609"]
[] = RP12::Add_All_Requids["1241-0000-01-0610"]
[] = RP12::Add_All_Requids["1241-0000-01-0611"]
[] = RP12::Add_All_Requids["1241-0000-01-0612"]
[] = RP12::Add_All_Requids["1241-0000-01-0613"]
[] = RP12::Add_All_Requids["1241-0000-01-0614"]
[] = RP12::Add_All_Requids["1241-0000-01-0615"]
[] = RP12::Add_All_Requids["1241-0000-01-0616"]
[] = RP12::Add_All_Requids["1241-0000-01-0617"]
[] = RP12::Add_All_Requids["1241-0000-01-0618"]
[] = RP12::Add_All_Requids["1241-0000-01-0619"]
[] = RP12::Add_All_Requids["1241-0000-01-0620"]
[] = RP12::Add_All_Requids["1241-0000-01-0621"]
[] = RP12::Add_All_Requids["1241-0000-01-0622"]
[] = RP12::Add_All_Requids["1241-0000-01-0623"]

# Relationship Navigation

[] = RP12::Add_All_Requids["1241-0000-01-0701"]
[] = RP12::Add_All_Requids["1241-0000-01-0702"]
[] = RP12::Add_All_Requids["1241-0000-01-0703"]
[] = RP12::Add_All_Requids["1241-0000-01-0704"]
[] = RP12::Add_All_Requids["1241-0000-01-0705"]
[] = RP12::Add_All_Requids["1241-0000-01-0706"]
[] = RP12::Add_All_Requids["1241-0000-01-0707"]
[] = RP12::Add_All_Requids["1241-0000-01-0708"]
[] = RP12::Add_All_Requids["1241-0000-01-0709"]
[] = RP12::Add_All_Requids["1241-0000-01-0710"]

# Synchronous Services

[] = RP12::Add_All_Requids["1241-0000-01-0801"]
[] = RP12::Add_All_Requids["1241-0000-01-0802"]
[] = RP12::Add_All_Requids["1241-0000-01-0803"]
[] = RP12::Add_All_Requids["1241-0000-01-0804"]
[] = RP12::Add_All_Requids["1241-0000-01-0805"]
[] = RP12::Add_All_Requids["1241-0000-01-0806"]
[] = RP12::Add_All_Requids["1241-0000-01-0807"]
[] = RP12::Add_All_Requids["1241-0000-01-0808"]
[] = RP12::Add_All_Requids["1241-0000-01-0809"]
[] = RP12::Add_All_Requids["1241-0000-01-0810"]

# Timers

[] = RP12::Add_All_Requids["1241-0000-01-0901"]
[] = RP12::Add_All_Requids["1241-0000-01-0902"]
[] = RP12::Add_All_Requids["1241-0000-01-0903"]
[] = RP12::Add_All_Requids["1241-0000-01-0904"]
[] = RP12::Add_All_Requids["1241-0000-01-0905"]
[] = RP12::Add_All_Requids["1241-0000-01-0906"]
[] = RP12::Add_All_Requids["1241-0000-01-0907"]
[] = RP12::Add_All_Requids["1241-0000-01-0908"]
[] = RP12::Add_All_Requids["1241-0000-01-0909"]
[] = RP12::Add_All_Requids["1241-0000-01-0910"]
[] = RP12::Add_All_Requids["1241-0000-01-0911"]
[] = RP12::Add_All_Requids["1241-0000-01-0912"]
[] = RP12::Add_All_Requids["1241-0000-01-0913"]
[] = RP12::Add_All_Requids["1241-0000-01-0914"]
[] = RP12::Add_All_Requids["1241-0000-01-0915"]
[] = RP12::Add_All_Requids["1241-0000-01-0916"]
[] = RP12::Add_All_Requids["1241-0000-01-0917"]
[] = RP12::Add_All_Requids["1241-0000-01-0918"]
[] = RP12::Add_All_Requids["1241-0000-01-0919"]
[] = RP12::Add_All_Requids["1241-0000-01-0920"]
[] = RP12::Add_All_Requids["1241-0000-01-0921"]

# Domains

[] = RP12::Add_All_Requids["1241-0000-01-1001"]
[] = RP12::Add_All_Requids["1241-0000-01-1002"]
[] = RP12::Add_All_Requids["1241-0000-01-1003"]

# Bridge Services

[] = RP12::Add_All_Requids["1241-0000-01-1101"]
[] = RP12::Add_All_Requids["1241-0000-01-1102"]
[] = RP12::Add_All_Requids["1241-0000-01-1103"]
[] = RP12::Add_All_Requids["1241-0000-01-1104"]
[] = RP12::Add_All_Requids["1241-0000-01-1105"]
[] = RP12::Add_All_Requids["1241-0000-01-1106"]
[] = RP12::Add_All_Requids["1241-0000-01-1107"]
[] = RP12::Add_All_Requids["1241-0000-01-1108"]
[] = RP12::Add_All_Requids["1241-0000-01-1109"]
[] = RP12::Add_All_Requids["1241-0000-01-1110"]
[] = RP12::Add_All_Requids["1241-0000-01-1111"]

# ASL Support

[] = RP12::Add_All_Requids["1241-0000-01-1201"]
[] = RP12::Add_All_Requids["1241-0000-01-1202"]
[] = RP12::Add_All_Requids["1241-0000-01-1203"]
[] = RP12::Add_All_Requids["1241-0000-01-1204"]
[] = RP12::Add_All_Requids["1241-0000-01-1205"]
[] = RP12::Add_All_Requids["1241-0000-01-1206"]
[] = RP12::Add_All_Requids["1241-0000-01-1207"]
[] = RP12::Add_All_Requids["1241-0000-01-1208"]
[] = RP12::Add_All_Requids["1241-0000-01-1209"]
[] = RP12::Add_All_Requids["1241-0000-01-1210"]
[] = RP12::Add_All_Requids["1241-0000-01-1211"]
[] = RP12::Add_All_Requids["1241-0000-01-1212"]
[] = RP12::Add_All_Requids["1241-0000-01-1213"]
[] = RP12::Add_All_Requids["1241-0000-01-1214"]
[] = RP12::Add_All_Requids["1241-0000-01-1215"]
[] = RP12::Add_All_Requids["1241-0000-01-1216"]

# Debugging

[] = RP12::Add_All_Requids["1241-0000-01-1301"]
[] = RP12::Add_All_Requids["1241-0000-01-1302"]
[] = RP12::Add_All_Requids["1241-0000-01-1303"]
[] = RP12::Add_All_Requids["1241-0000-01-1304"]
[] = RP12::Add_All_Requids["1241-0000-01-1305"]
[] = RP12::Add_All_Requids["1241-0000-01-1306"]
[] = RP12::Add_All_Requids["1241-0000-01-1307"]
[] = RP12::Add_All_Requids["1241-0000-01-1308"]
[] = RP12::Add_All_Requids["1241-0000-01-1309"]
[] = RP12::Add_All_Requids["1241-0000-01-1310"]

[] = RP12::Add_All_Requids["1241-0000-01-1401"]
[] = RP12::Add_All_Requids["1241-0000-01-1402"]

[] = RP12::Add_All_Requids["1103-0000-01-0111"]
[] = RP12::Add_All_Requids["1103-0000-01-0112"]
[] = RP12::Add_All_Requids["1103-0000-01-0113"]
[] = RP12::Add_All_Requids["1103-0000-01-0211"]
[] = RP12::Add_All_Requids["1103-0000-01-0212"]
[] = RP12::Add_All_Requids["1103-0000-01-0311"]
[] = RP12::Add_All_Requids["1103-0000-01-0312"]
[] = RP12::Add_All_Requids["1103-0000-01-0313"]
[] = RP12::Add_All_Requids["1103-0000-01-0411"]
[] = RP12::Add_All_Requids["1103-0000-01-0421"]
[] = RP12::Add_All_Requids["1103-0000-01-0422"]
[] = RP12::Add_All_Requids["1103-0000-01-0431"]
[] = RP12::Add_All_Requids["1103-0000-01-0432"]
[] = RP12::Add_All_Requids["1103-0000-01-0441"]
[] = RP12::Add_All_Requids["1103-0000-01-0451"]
[] = RP12::Add_All_Requids["1103-0000-01-0452"]
[] = RP12::Add_All_Requids["1103-0000-01-0511"]
[] = RP12::Add_All_Requids["1103-0000-01-0521"]
[] = RP12::Add_All_Requids["1103-0000-01-0522"]
[] = RP12::Add_All_Requids["1103-0000-01-0531"]
[] = RP12::Add_All_Requids["1103-0000-01-0532"]
[] = RP12::Add_All_Requids["1103-0000-01-0541"]
[] = RP12::Add_All_Requids["1103-0000-01-0542"]
[] = RP12::Add_All_Requids["1103-0000-01-0543"]
[] = RP12::Add_All_Requids["1103-0000-01-0544"]
[] = RP12::Add_All_Requids["1103-0000-01-0545"]
[] = RP12::Add_All_Requids["1103-0000-01-0546"]
[] = RP12::Add_All_Requids["1103-0000-01-0547"]
[] = RP12::Add_All_Requids["1103-0000-01-0611"]
[] = RP12::Add_All_Requids["1103-0000-01-0612"]
[] = RP12::Add_All_Requids["1103-0000-01-0621"]
[] = RP12::Add_All_Requids["1103-0000-01-0622"]
[] = RP12::Add_All_Requids["1103-0000-01-0631"]
[] = RP12::Add_All_Requids["1103-0000-01-0632"]
[] = RP12::Add_All_Requids["1103-0000-01-0711"]
[] = RP12::Add_All_Requids["1103-0000-01-0811"]
[] = RP12::Add_All_Requids["1103-0000-01-0812"]
[] = RP12::Add_All_Requids["1103-0000-01-0813"]
[] = RP12::Add_All_Requids["1103-0000-01-0814"]
[] = RP12::Add_All_Requids["1103-0000-01-0815"]
[] = RP12::Add_All_Requids["1103-0000-01-0911"]
[] = RP12::Add_All_Requids["1103-0000-01-0912"]
[] = RP12::Add_All_Requids["1103-0000-01-0913"]
[] = RP12::Add_All_Requids["1103-0000-01-1011"]
[] = RP12::Add_All_Requids["1103-0000-01-1021"]
[] = RP12::Add_All_Requids["1103-0000-01-1031"]
[] = RP12::Add_All_Requids["1103-0000-01-1111"]
[] = RP12::Add_All_Requids["1103-0000-01-1112"]
[] = RP12::Add_All_Requids["1103-0000-01-1113"]
[] = RP12::Add_All_Requids["1103-0000-01-1121"]
[] = RP12::Add_All_Requids["1103-0000-01-1122"]
[] = RP12::Add_All_Requids["1103-0000-01-1211"]
[] = RP12::Add_All_Requids["1103-0000-01-1212"]
[] = RP12::Add_All_Requids["1103-0000-01-1311"]
[] = RP12::Add_All_Requids["1103-0000-01-1411"]
[] = RP12::Add_All_Requids["1103-0000-01-1511"]

[] = RP12::Add_All_Requids["1101-0000-01-0108"]
[] = RP12::Add_All_Requids["1101-0000-01-0109"]
[] = RP12::Add_All_Requids["1101-0000-01-0110"]
[] = RP12::Add_All_Requids["1101-0000-01-0112"]
[] = RP12::Add_All_Requids["1101-0000-01-0117"]
[] = RP12::Add_All_Requids["1101-0000-01-0118"]
[] = RP12::Add_All_Requids["1101-0000-01-0121"]
[] = RP12::Add_All_Requids["1101-0000-01-0122"]
[] = RP12::Add_All_Requids["1101-0000-01-0123"]
[] = RP12::Add_All_Requids["1101-0000-01-0127"]
[] = RP12::Add_All_Requids["1101-0000-01-0128"]
[] = RP12::Add_All_Requids["1101-0000-01-0129"]
[] = RP12::Add_All_Requids["1101-0000-01-0138"]
[] = RP12::Add_All_Requids["1101-0000-01-0139"]
[] = RP12::Add_All_Requids["1101-0000-01-0140"]',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,15 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-00000000017c","00000000-0000-0000-0000-000000000000",'UDT_Requirements',' UDT Requirements
','# Catch-all empty requirement tags. Should be ultimately replaced
# when requids are inserted into every individual test.

[] = RP12::Add_All_Requids["Null Requid"]

# Functional Requirements from document SR UR 1241

# Specific Requirements

[] = RP12::Add_All_Requids["1241-0000-01-0111"]
[] = RP12::Add_All_Requids["1241-0000-01-0112"]
[] = RP12::Add_All_Requids["1241-0000-01-0113"]
[] = RP12::Add_All_Requids["1241-0000-01-1214"]
[] = RP12::Add_All_Requids["1103-0000-01-0311"]
',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,16 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-00000000017e","00000000-0000-0000-0000-000000000000",'Tagging_Requirements',' Tagging Requirements
','[] = RP12::Add_All_Requids["Null Requid"]

[] = RP12::Add_All_Requids["1241-0000-01-0127"]
[] = RP12::Add_All_Requids["1241-0000-01-0128"]
[] = RP12::Add_All_Requids["1241-0000-01-0129"]
[] = RP12::Add_All_Requids["1241-0000-01-0130"]
[] = RP12::Add_All_Requids["1241-0000-01-0132"]
[] = RP12::Add_All_Requids["1241-0000-01-1111"]

[] = RP12::Add_All_Requids["1101-0000-01-0112"]
[] = RP12::Add_All_Requids["1101-0000-01-0123"]',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,17 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000180","00000000-0000-0000-0000-000000000000",'Structure_Requirements',' Structure Requirements
','[] = RP12::Add_All_Requids["Null Requid"]

[] = RP12::Add_All_Requids["1241-0000-01-1212"]
[] = RP12::Add_All_Requids["1241-0000-01-1216"]

[] = RP12::Add_All_Requids["1101-0000-01-0117"]
[] = RP12::Add_All_Requids["1101-0000-01-0121"]
[] = RP12::Add_All_Requids["1101-0000-01-0140"]',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,18 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000182","00000000-0000-0000-0000-000000000000",'Counterpart_Requirements',' Counterpart Requirements
','[] = RP12::Add_All_Requids["Null Requid"]

[] = RP12::Add_All_Requids["1241-0000-01-0622"]
[] = RP12::Add_All_Requids["1241-0000-01-0623"]
[] = RP12::Add_All_Requids["1241-0000-01-0710"]

[] = RP12::Add_All_Requids["1101-0000-01-0127"]
[] = RP12::Add_All_Requids["1101-0000-01-0128"]
[] = RP12::Add_All_Requids["1101-0000-01-0129"]',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,19 );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-0000000000e9","00000000-0000-0000-0000-0000000000e1",'Passed_Domain',"ba5eda7a-def5-0000-0000-000000000004",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-0000000000eb","00000000-0000-0000-0000-0000000000e1",'Passed_Test_Number',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-0000000000e9",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-0000000000ed","00000000-0000-0000-0000-0000000000e1",'Passed_Test_Result_Value',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-0000000000eb",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-0000000000ef","00000000-0000-0000-0000-0000000000e1",'Passed_Domain_Number',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-0000000000ed",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-0000000000f5","00000000-0000-0000-0000-0000000000f2",'Failed_Domain',"ba5eda7a-def5-0000-0000-000000000004",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-0000000000f7","00000000-0000-0000-0000-0000000000f2",'the_test_no',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-0000000000f5",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-0000000000f9","00000000-0000-0000-0000-0000000000f2",'the_test_value',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-0000000000f7",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-0000000000fb","00000000-0000-0000-0000-0000000000f2",'Failed_Domain_Number',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-0000000000f9",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000101","00000000-0000-0000-0000-0000000000fe",'Unsupported_Test_Number',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000103","00000000-0000-0000-0000-0000000000fe",'Unsupported_Domain_Number',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000101",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000109","00000000-0000-0000-0000-000000000106",'Write_Test_Number',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-00000000010b","00000000-0000-0000-0000-000000000106",'Write_Requid',"ba5eda7a-def5-0000-0000-000000000004",0,'',"00000000-0000-0000-0000-000000000109",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-00000000010d","00000000-0000-0000-0000-000000000106",'Write_Invoker_Domain_Name',"ba5eda7a-def5-0000-0000-000000000004",0,'',"00000000-0000-0000-0000-00000000010b",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-00000000010f","00000000-0000-0000-0000-000000000106",'Write_Object',"ba5eda7a-def5-0000-0000-000000000004",0,'',"00000000-0000-0000-0000-00000000010d",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000111","00000000-0000-0000-0000-000000000106",'Write_Test_Purpose',"ba5eda7a-def5-0000-0000-000000000004",0,'',"00000000-0000-0000-0000-00000000010f",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000113","00000000-0000-0000-0000-000000000106",'Write_Invoker_Domain_Number',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000111",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000119","00000000-0000-0000-0000-000000000116",'Domain_No',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-00000000011b","00000000-0000-0000-0000-000000000116",'Text_Test_Number',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000119",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-00000000011d","00000000-0000-0000-0000-000000000116",'Free_Text',"ba5eda7a-def5-0000-0000-000000000004",0,'',"00000000-0000-0000-0000-00000000011b",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000123","00000000-0000-0000-0000-000000000120",'Invoker_Domain_Name',"ba5eda7a-def5-0000-0000-000000000004",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000125","00000000-0000-0000-0000-000000000120",'Domain_Unique_Identifier',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-000000000123",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-00000000012b","00000000-0000-0000-0000-000000000128",'Detail',"ba5eda7a-def5-0000-0000-000000000004",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000131","00000000-0000-0000-0000-00000000012e",'Completed_Domain_Name',"ba5eda7a-def5-0000-0000-000000000004",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000133","00000000-0000-0000-0000-00000000012e",'Domain_Identifer',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000131",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000139","00000000-0000-0000-0000-000000000136",'Anomalous_Test_Number',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-00000000013b","00000000-0000-0000-0000-000000000136",'Anomalous_Detail',"ba5eda7a-def5-0000-0000-000000000004",0,'',"00000000-0000-0000-0000-000000000139",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000141","00000000-0000-0000-0000-00000000013e",'Requid_Domain_Number',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000143","00000000-0000-0000-0000-00000000013e",'Requid_Test_Number',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000141",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000145","00000000-0000-0000-0000-00000000013e",'Requid_Identifier',"ba5eda7a-def5-0000-0000-000000000004",0,'',"00000000-0000-0000-0000-000000000143",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-00000000014b","00000000-0000-0000-0000-000000000148",'New_Requid',"ba5eda7a-def5-0000-0000-000000000004",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000151","00000000-0000-0000-0000-00000000014e",'Updated_Domain_ID',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000153","00000000-0000-0000-0000-00000000014e",'Updated_Test_Number',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000151",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000155","00000000-0000-0000-0000-00000000014e",'Updated_Result',"00000000-0000-0000-0000-0000000000ad",0,'',"00000000-0000-0000-0000-000000000153",'' );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-000000000184",1,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-000000000199",2,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-0000000001ae",3,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-0000000001c3",4,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-0000000001d8",5,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-0000000001ed",8,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-000000000202",6,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-000000000217",7,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-00000000022c",10,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-000000000241",11,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-000000000256",12,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-00000000026b",9,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-000000000184","00000000-0000-0000-0000-000000000188","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000029","00000000-0000-0000-0000-000000000184","00000000-0000-0000-0000-000000000191","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-000000000199","00000000-0000-0000-0000-00000000019d","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000034","00000000-0000-0000-0000-000000000199","00000000-0000-0000-0000-0000000001a6","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-0000000001ae","00000000-0000-0000-0000-0000000001b2","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-0000000001ae","00000000-0000-0000-0000-0000000001bb","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-0000000001c3","00000000-0000-0000-0000-0000000001c7","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-0000000001c3","00000000-0000-0000-0000-0000000001d0","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-0000000001d8","00000000-0000-0000-0000-0000000001dc","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-0000000001d8","00000000-0000-0000-0000-0000000001e5","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-0000000001ed","00000000-0000-0000-0000-0000000001f1","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-00000000006b","00000000-0000-0000-0000-0000000001ed","00000000-0000-0000-0000-0000000001fa","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-00000000006b","00000000-0000-0000-0000-000000000202","00000000-0000-0000-0000-000000000206","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000060","00000000-0000-0000-0000-000000000202","00000000-0000-0000-0000-00000000020f","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-00000000006b","00000000-0000-0000-0000-000000000217","00000000-0000-0000-0000-00000000021b","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000076","00000000-0000-0000-0000-000000000217","00000000-0000-0000-0000-000000000224","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-00000000008c","00000000-0000-0000-0000-00000000022c","00000000-0000-0000-0000-000000000230","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-00000000022c","00000000-0000-0000-0000-000000000239","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000241","00000000-0000-0000-0000-000000000245","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-00000000008c","00000000-0000-0000-0000-000000000241","00000000-0000-0000-0000-00000000024e","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000256","00000000-0000-0000-0000-00000000025a","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-0000000000a2","00000000-0000-0000-0000-000000000256","00000000-0000-0000-0000-000000000263","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-00000000026b","00000000-0000-0000-0000-00000000026f","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000081","00000000-0000-0000-0000-00000000026b","00000000-0000-0000-0000-000000000278","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-000000000184","00000000-0000-0000-0000-000000000188",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-000000000199","00000000-0000-0000-0000-00000000019d",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-0000000001ae","00000000-0000-0000-0000-0000000001b2",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-0000000001c3","00000000-0000-0000-0000-0000000001c7",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-0000000001d8","00000000-0000-0000-0000-0000000001dc",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-0000000001d8","00000000-0000-0000-0000-0000000001e5",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-0000000001ed","00000000-0000-0000-0000-0000000001f1",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-00000000006b","00000000-0000-0000-0000-000000000202","00000000-0000-0000-0000-000000000206",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-00000000006b","00000000-0000-0000-0000-000000000217","00000000-0000-0000-0000-00000000021b",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-00000000008c","00000000-0000-0000-0000-00000000022c","00000000-0000-0000-0000-000000000230",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-00000000008c","00000000-0000-0000-0000-000000000241","00000000-0000-0000-0000-00000000024e",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000256","00000000-0000-0000-0000-00000000025a",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-00000000026b","00000000-0000-0000-0000-00000000026f",0 );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-0000000000a2","00000000-0000-0000-0000-000000000256","00000000-0000-0000-0000-000000000263" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000241","00000000-0000-0000-0000-000000000245" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-000000000081","00000000-0000-0000-0000-00000000026b","00000000-0000-0000-0000-000000000278" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-00000000006b","00000000-0000-0000-0000-0000000001ed","00000000-0000-0000-0000-0000000001fa" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-000000000060","00000000-0000-0000-0000-000000000202","00000000-0000-0000-0000-00000000020f" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-0000000001c3","00000000-0000-0000-0000-0000000001d0" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-0000000001ae","00000000-0000-0000-0000-0000000001bb" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-00000000022c","00000000-0000-0000-0000-000000000239" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-000000000034","00000000-0000-0000-0000-000000000199","00000000-0000-0000-0000-0000000001a6" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-000000000029","00000000-0000-0000-0000-000000000184","00000000-0000-0000-0000-000000000191" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-000000000076","00000000-0000-0000-0000-000000000217","00000000-0000-0000-0000-000000000224" );
INSERT INTO R_SIMP VALUES ( "00000000-0000-0000-0000-000000000184" );
INSERT INTO R_SIMP VALUES ( "00000000-0000-0000-0000-000000000199" );
INSERT INTO R_SIMP VALUES ( "00000000-0000-0000-0000-0000000001ae" );
INSERT INTO R_SIMP VALUES ( "00000000-0000-0000-0000-0000000001c3" );
INSERT INTO R_SIMP VALUES ( "00000000-0000-0000-0000-0000000001d8" );
INSERT INTO R_SIMP VALUES ( "00000000-0000-0000-0000-0000000001ed" );
INSERT INTO R_SIMP VALUES ( "00000000-0000-0000-0000-000000000202" );
INSERT INTO R_SIMP VALUES ( "00000000-0000-0000-0000-000000000217" );
INSERT INTO R_SIMP VALUES ( "00000000-0000-0000-0000-00000000022c" );
INSERT INTO R_SIMP VALUES ( "00000000-0000-0000-0000-000000000241" );
INSERT INTO R_SIMP VALUES ( "00000000-0000-0000-0000-000000000256" );
INSERT INTO R_SIMP VALUES ( "00000000-0000-0000-0000-00000000026b" );
INSERT INTO R_PART VALUES ( "00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-000000000184","00000000-0000-0000-0000-000000000188",0,0,'has' );
INSERT INTO R_PART VALUES ( "00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-000000000199","00000000-0000-0000-0000-00000000019d",0,0,'has' );
INSERT INTO R_PART VALUES ( "00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-0000000001ae","00000000-0000-0000-0000-0000000001b2",0,0,'has' );
INSERT INTO R_PART VALUES ( "00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-0000000001c3","00000000-0000-0000-0000-0000000001c7",0,0,'must_have_one' );
INSERT INTO R_PART VALUES ( "00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-0000000001d8","00000000-0000-0000-0000-0000000001dc",1,1,'Has_some' );
INSERT INTO R_PART VALUES ( "00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-0000000001d8","00000000-0000-0000-0000-0000000001e5",0,1,'Has_one' );
INSERT INTO R_PART VALUES ( "00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-0000000001ed","00000000-0000-0000-0000-0000000001f1",0,0,'has' );
INSERT INTO R_PART VALUES ( "00000000-0000-0000-0000-00000000006b","00000000-0000-0000-0000-000000000202","00000000-0000-0000-0000-000000000206",0,0,'has' );
INSERT INTO R_PART VALUES ( "00000000-0000-0000-0000-00000000006b","00000000-0000-0000-0000-000000000217","00000000-0000-0000-0000-00000000021b",0,1,'defines_test_requirement' );
INSERT INTO R_PART VALUES ( "00000000-0000-0000-0000-00000000008c","00000000-0000-0000-0000-00000000022c","00000000-0000-0000-0000-000000000230",0,0,'Is_Contained_By' );
INSERT INTO R_PART VALUES ( "00000000-0000-0000-0000-00000000008c","00000000-0000-0000-0000-000000000241","00000000-0000-0000-0000-00000000024e",0,0,'has' );
INSERT INTO R_PART VALUES ( "00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000256","00000000-0000-0000-0000-00000000025a",0,0,'must_have' );
INSERT INTO R_PART VALUES ( "00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-00000000026b","00000000-0000-0000-0000-00000000026f",0,0,'has' );
INSERT INTO R_FORM VALUES ( "00000000-0000-0000-0000-0000000000a2","00000000-0000-0000-0000-000000000256","00000000-0000-0000-0000-000000000263",1,1,'May_have' );
INSERT INTO R_FORM VALUES ( "00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000241","00000000-0000-0000-0000-000000000245",1,0,'has' );
INSERT INTO R_FORM VALUES ( "00000000-0000-0000-0000-000000000081","00000000-0000-0000-0000-00000000026b","00000000-0000-0000-0000-000000000278",1,0,'has' );
INSERT INTO R_FORM VALUES ( "00000000-0000-0000-0000-00000000006b","00000000-0000-0000-0000-0000000001ed","00000000-0000-0000-0000-0000000001fa",1,0,'has' );
INSERT INTO R_FORM VALUES ( "00000000-0000-0000-0000-000000000060","00000000-0000-0000-0000-000000000202","00000000-0000-0000-0000-00000000020f",0,0,'has' );
INSERT INTO R_FORM VALUES ( "00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-0000000001c3","00000000-0000-0000-0000-0000000001d0",1,1,'May_Have_Some' );
INSERT INTO R_FORM VALUES ( "00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-0000000001ae","00000000-0000-0000-0000-0000000001bb",0,0,'has' );
INSERT INTO R_FORM VALUES ( "00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-00000000022c","00000000-0000-0000-0000-000000000239",1,0,'Contains_Many' );
INSERT INTO R_FORM VALUES ( "00000000-0000-0000-0000-000000000034","00000000-0000-0000-0000-000000000199","00000000-0000-0000-0000-0000000001a6",0,0,'has' );
INSERT INTO R_FORM VALUES ( "00000000-0000-0000-0000-000000000029","00000000-0000-0000-0000-000000000184","00000000-0000-0000-0000-000000000191",0,0,'has' );
INSERT INTO R_FORM VALUES ( "00000000-0000-0000-0000-000000000076","00000000-0000-0000-0000-000000000217","00000000-0000-0000-0000-000000000224",1,1,'May_have_one_or_more' );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000002d",0,"00000000-0000-0000-0000-000000000029" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000030",1,"00000000-0000-0000-0000-000000000029" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000038",0,"00000000-0000-0000-0000-000000000034" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000003b",1,"00000000-0000-0000-0000-000000000034" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000043",0,"00000000-0000-0000-0000-00000000003f" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000046",1,"00000000-0000-0000-0000-00000000003f" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000004e",0,"00000000-0000-0000-0000-00000000004a" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000051",1,"00000000-0000-0000-0000-00000000004a" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000059",0,"00000000-0000-0000-0000-000000000055" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000005c",1,"00000000-0000-0000-0000-000000000055" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000064",0,"00000000-0000-0000-0000-000000000060" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000067",1,"00000000-0000-0000-0000-000000000060" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000006f",0,"00000000-0000-0000-0000-00000000006b" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000072",1,"00000000-0000-0000-0000-00000000006b" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000007a",0,"00000000-0000-0000-0000-000000000076" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000007d",1,"00000000-0000-0000-0000-000000000076" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000085",0,"00000000-0000-0000-0000-000000000081" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000088",1,"00000000-0000-0000-0000-000000000081" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000090",0,"00000000-0000-0000-0000-00000000008c" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000093",1,"00000000-0000-0000-0000-00000000008c" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000009b",0,"00000000-0000-0000-0000-000000000097" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000009e",1,"00000000-0000-0000-0000-000000000097" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000000a6",0,"00000000-0000-0000-0000-0000000000a2" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000000a9",1,"00000000-0000-0000-0000-0000000000a2" );
INSERT INTO S_SDT VALUES ( "00000000-0000-0000-0000-0000000000c3" );
INSERT INTO S_SDT VALUES ( "00000000-0000-0000-0000-0000000000c9" );
INSERT INTO S_SDT VALUES ( "00000000-0000-0000-0000-0000000000d1" );
INSERT INTO S_MBR VALUES ( "00000000-0000-0000-0000-0000000000c6",'Failed_Test_Number','',"00000000-0000-0000-0000-0000000000c3","ba5eda7a-def5-0000-0000-000000000002","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_MBR VALUES ( "00000000-0000-0000-0000-0000000000cc",'Duplicated_Test_Number','',"00000000-0000-0000-0000-0000000000c9","ba5eda7a-def5-0000-0000-000000000002","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_MBR VALUES ( "00000000-0000-0000-0000-0000000000ce",'Duplicated_Test_Count','',"00000000-0000-0000-0000-0000000000c9","ba5eda7a-def5-0000-0000-000000000002","00000000-0000-0000-0000-0000000000cc",'' );
INSERT INTO S_MBR VALUES ( "00000000-0000-0000-0000-0000000000d4",'Unsupported_By','',"00000000-0000-0000-0000-0000000000d1","ba5eda7a-def5-0000-0000-000000000002","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_MBR VALUES ( "00000000-0000-0000-0000-0000000000d6",'Testing_For','',"00000000-0000-0000-0000-0000000000d1","ba5eda7a-def5-0000-0000-000000000004","00000000-0000-0000-0000-0000000000d4",'' );
INSERT INTO C_C VALUES ( "00000000-0000-0000-0000-000000000023","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000000",'RP',' Consistent reports of test results
',0,"00000000-0000-0000-0000-000000000000",0,'','Report' );
INSERT INTO C_I VALUES ( "00000000-0000-0000-0000-0000000000e3","00000000-0000-0000-0000-000000000000",'RP','' );
INSERT INTO C_P VALUES ( "00000000-0000-0000-0000-0000000000e5",'','Unnamed_Interface','','' );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-0000000000e7","00000000-0000-0000-0000-0000000000e3",0,'Test_Passed','',1 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-0000000000f3","00000000-0000-0000-0000-0000000000e3",0,'Test_Failed','',2 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-0000000000ff","00000000-0000-0000-0000-0000000000e3",0,'Test_Unsupported','',3 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000107","00000000-0000-0000-0000-0000000000e3",0,'Test_Description','',4 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000117","00000000-0000-0000-0000-0000000000e3",0,'Test_Text','',5 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000121","00000000-0000-0000-0000-0000000000e3",0,'Create_New_Domain_Test','',6 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000129","00000000-0000-0000-0000-0000000000e3",0,'Report_Run_Time_Error','',7 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-00000000012f","00000000-0000-0000-0000-0000000000e3",0,'Domain_Tests_Have_Finished','',8 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000137","00000000-0000-0000-0000-0000000000e3",0,'Test_Anomalous_Behaviour','',9 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-00000000013f","00000000-0000-0000-0000-0000000000e3",0,'Specify_Requid','',10 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000149","00000000-0000-0000-0000-0000000000e3",0,'Add_All_Requids','',12 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-00000000014f","00000000-0000-0000-0000-0000000000e3",0,'Requirement_Tracker','',13 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000159","00000000-0000-0000-0000-0000000000e3",0,'Perform_Req_Analysis','',11 );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-0000000000e7","ba5eda7a-def5-0000-0000-000000000000",'Test_Passed','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-0000000000f3","ba5eda7a-def5-0000-0000-000000000000",'Test_Failed','',0,'',"00000000-0000-0000-0000-0000000000e7" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-0000000000ff","ba5eda7a-def5-0000-0000-000000000000",'Test_Unsupported','',0,'',"00000000-0000-0000-0000-0000000000f3" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000107","ba5eda7a-def5-0000-0000-000000000000",'Test_Description','',0,'',"00000000-0000-0000-0000-0000000000ff" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000117","ba5eda7a-def5-0000-0000-000000000000",'Test_Text','',0,'',"00000000-0000-0000-0000-000000000107" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000121","ba5eda7a-def5-0000-0000-000000000000",'Create_New_Domain_Test','',0,'',"00000000-0000-0000-0000-000000000117" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000129","ba5eda7a-def5-0000-0000-000000000000",'Report_Run_Time_Error','',0,'',"00000000-0000-0000-0000-000000000121" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-00000000012f","ba5eda7a-def5-0000-0000-000000000000",'Domain_Tests_Have_Finished','',0,'',"00000000-0000-0000-0000-000000000129" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000137","ba5eda7a-def5-0000-0000-000000000000",'Test_Anomalous_Behaviour','',0,'',"00000000-0000-0000-0000-00000000012f" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-00000000013f","ba5eda7a-def5-0000-0000-000000000000",'Specify_Requid','',0,'',"00000000-0000-0000-0000-000000000137" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000149","ba5eda7a-def5-0000-0000-000000000000",'Add_All_Requids','',0,'',"00000000-0000-0000-0000-00000000013f" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-00000000014f","ba5eda7a-def5-0000-0000-000000000000",'Requirement_Tracker','',0,'',"00000000-0000-0000-0000-000000000149" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000159","ba5eda7a-def5-0000-0000-000000000000",'Perform_Req_Analysis','',0,'',"00000000-0000-0000-0000-00000000014f" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000000ea","00000000-0000-0000-0000-0000000000e7","ba5eda7a-def5-0000-0000-000000000004",'Passed_Domain','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000000ec","00000000-0000-0000-0000-0000000000e7","ba5eda7a-def5-0000-0000-000000000002",'Passed_Test_Number','',0,'',"00000000-0000-0000-0000-0000000000ea" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000000ee","00000000-0000-0000-0000-0000000000e7","ba5eda7a-def5-0000-0000-000000000002",'Passed_Test_Result_Value','',0,'',"00000000-0000-0000-0000-0000000000ec" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000000f0","00000000-0000-0000-0000-0000000000e7","ba5eda7a-def5-0000-0000-000000000002",'Passed_Domain_Number','',0,'',"00000000-0000-0000-0000-0000000000ee" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000000f6","00000000-0000-0000-0000-0000000000f3","ba5eda7a-def5-0000-0000-000000000004",'Failed_Domain','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000000f8","00000000-0000-0000-0000-0000000000f3","ba5eda7a-def5-0000-0000-000000000002",'the_test_no','',0,'',"00000000-0000-0000-0000-0000000000f6" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000000fa","00000000-0000-0000-0000-0000000000f3","ba5eda7a-def5-0000-0000-000000000002",'the_test_value','',0,'',"00000000-0000-0000-0000-0000000000f8" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000000fc","00000000-0000-0000-0000-0000000000f3","ba5eda7a-def5-0000-0000-000000000002",'Failed_Domain_Number','',0,'',"00000000-0000-0000-0000-0000000000fa" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000102","00000000-0000-0000-0000-0000000000ff","ba5eda7a-def5-0000-0000-000000000002",'Unsupported_Test_Number','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000104","00000000-0000-0000-0000-0000000000ff","ba5eda7a-def5-0000-0000-000000000002",'Unsupported_Domain_Number','',0,'',"00000000-0000-0000-0000-000000000102" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000010a","00000000-0000-0000-0000-000000000107","ba5eda7a-def5-0000-0000-000000000002",'Write_Test_Number','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000010c","00000000-0000-0000-0000-000000000107","ba5eda7a-def5-0000-0000-000000000004",'Write_Requid','',0,'',"00000000-0000-0000-0000-00000000010a" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000010e","00000000-0000-0000-0000-000000000107","ba5eda7a-def5-0000-0000-000000000004",'Write_Invoker_Domain_Name','',0,'',"00000000-0000-0000-0000-00000000010c" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000110","00000000-0000-0000-0000-000000000107","ba5eda7a-def5-0000-0000-000000000004",'Write_Object','',0,'',"00000000-0000-0000-0000-00000000010e" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000112","00000000-0000-0000-0000-000000000107","ba5eda7a-def5-0000-0000-000000000004",'Write_Test_Purpose','',0,'',"00000000-0000-0000-0000-000000000110" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000114","00000000-0000-0000-0000-000000000107","ba5eda7a-def5-0000-0000-000000000002",'Write_Invoker_Domain_Number','',0,'',"00000000-0000-0000-0000-000000000112" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000011a","00000000-0000-0000-0000-000000000117","ba5eda7a-def5-0000-0000-000000000002",'Domain_No','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000011c","00000000-0000-0000-0000-000000000117","ba5eda7a-def5-0000-0000-000000000002",'Text_Test_Number','',0,'',"00000000-0000-0000-0000-00000000011a" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000011e","00000000-0000-0000-0000-000000000117","ba5eda7a-def5-0000-0000-000000000004",'Free_Text','',0,'',"00000000-0000-0000-0000-00000000011c" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000124","00000000-0000-0000-0000-000000000121","ba5eda7a-def5-0000-0000-000000000004",'Invoker_Domain_Name','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000126","00000000-0000-0000-0000-000000000121","ba5eda7a-def5-0000-0000-000000000002",'Domain_Unique_Identifier','',1,'',"00000000-0000-0000-0000-000000000124" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000012c","00000000-0000-0000-0000-000000000129","ba5eda7a-def5-0000-0000-000000000004",'Detail','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000132","00000000-0000-0000-0000-00000000012f","ba5eda7a-def5-0000-0000-000000000004",'Completed_Domain_Name','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000134","00000000-0000-0000-0000-00000000012f","ba5eda7a-def5-0000-0000-000000000002",'Domain_Identifer','',0,'',"00000000-0000-0000-0000-000000000132" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000013a","00000000-0000-0000-0000-000000000137","ba5eda7a-def5-0000-0000-000000000002",'Anomalous_Test_Number','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000013c","00000000-0000-0000-0000-000000000137","ba5eda7a-def5-0000-0000-000000000004",'Anomalous_Detail','',0,'',"00000000-0000-0000-0000-00000000013a" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000142","00000000-0000-0000-0000-00000000013f","ba5eda7a-def5-0000-0000-000000000002",'Requid_Domain_Number','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000144","00000000-0000-0000-0000-00000000013f","ba5eda7a-def5-0000-0000-000000000002",'Requid_Test_Number','',0,'',"00000000-0000-0000-0000-000000000142" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000146","00000000-0000-0000-0000-00000000013f","ba5eda7a-def5-0000-0000-000000000004",'Requid_Identifier','',0,'',"00000000-0000-0000-0000-000000000144" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000014c","00000000-0000-0000-0000-000000000149","ba5eda7a-def5-0000-0000-000000000004",'New_Requid','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000152","00000000-0000-0000-0000-00000000014f","ba5eda7a-def5-0000-0000-000000000002",'Updated_Domain_ID','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000154","00000000-0000-0000-0000-00000000014f","ba5eda7a-def5-0000-0000-000000000002",'Updated_Test_Number','',0,'',"00000000-0000-0000-0000-000000000152" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000156","00000000-0000-0000-0000-00000000014f","00000000-0000-0000-0000-0000000000ad",'Updated_Result','',0,'',"00000000-0000-0000-0000-000000000154" );
INSERT INTO C_IR VALUES ( "00000000-0000-0000-0000-0000000000e5","00000000-0000-0000-0000-0000000000e3","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-0000000000e6" );
INSERT INTO C_PO VALUES ( "00000000-0000-0000-0000-0000000000e6","00000000-0000-0000-0000-000000000023",'RP',0,0,'' );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-0000000004ea","00000000-0000-0000-0000-0000000000e7","00000000-0000-0000-0000-0000000000e5" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-0000000004ec","00000000-0000-0000-0000-0000000000f3","00000000-0000-0000-0000-0000000000e5" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-0000000004ee","00000000-0000-0000-0000-0000000000ff","00000000-0000-0000-0000-0000000000e5" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-0000000004f0","00000000-0000-0000-0000-000000000107","00000000-0000-0000-0000-0000000000e5" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-0000000004f2","00000000-0000-0000-0000-000000000117","00000000-0000-0000-0000-0000000000e5" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-0000000004f4","00000000-0000-0000-0000-000000000121","00000000-0000-0000-0000-0000000000e5" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-0000000004f6","00000000-0000-0000-0000-000000000129","00000000-0000-0000-0000-0000000000e5" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-0000000004f8","00000000-0000-0000-0000-00000000012f","00000000-0000-0000-0000-0000000000e5" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-0000000004fa","00000000-0000-0000-0000-000000000137","00000000-0000-0000-0000-0000000000e5" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-0000000004fc","00000000-0000-0000-0000-00000000013f","00000000-0000-0000-0000-0000000000e5" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-0000000004fe","00000000-0000-0000-0000-000000000149","00000000-0000-0000-0000-0000000000e5" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-000000000500","00000000-0000-0000-0000-00000000014f","00000000-0000-0000-0000-0000000000e5" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-000000000502","00000000-0000-0000-0000-000000000159","00000000-0000-0000-0000-0000000000e5" );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-0000000004ea",'','','',3,6,0 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-0000000004ec",'','','',3,6,0 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-0000000004ee",'','','',3,6,0 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-0000000004f0",'','','',3,6,0 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-0000000004f2",'','','',3,6,0 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-0000000004f4",'','','',3,6,0 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-0000000004f6",'','','',3,6,0 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-0000000004f8",'','','',3,6,0 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-0000000004fa",'','','',3,6,0 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-0000000004fc",'','','',3,6,0 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-0000000004fe",'','','',3,6,0 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-000000000500",'','','',3,6,0 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-000000000502",'','','',3,6,0 );
INSERT INTO SM_SM VALUES ( "00000000-0000-0000-0000-0000000002c5",'',0 );
INSERT INTO SM_SM VALUES ( "00000000-0000-0000-0000-0000000003e8",'',0 );
INSERT INTO SM_STATE VALUES ( "00000000-0000-0000-0000-0000000002cd","00000000-0000-0000-0000-0000000002c5","00000000-0000-0000-0000-000000000000",'Idle',1,0 );
INSERT INTO SM_STATE VALUES ( "00000000-0000-0000-0000-0000000002d6","00000000-0000-0000-0000-0000000002c5","00000000-0000-0000-0000-000000000000",'Report_Your_Findings',2,0 );
INSERT INTO SM_STATE VALUES ( "00000000-0000-0000-0000-0000000002df","00000000-0000-0000-0000-0000000002c5","00000000-0000-0000-0000-000000000000",'Kill_Yourself',3,1 );
INSERT INTO SM_STATE VALUES ( "00000000-0000-0000-0000-0000000003f0","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-000000000000",'Waiting',1,0 );
INSERT INTO SM_STATE VALUES ( "00000000-0000-0000-0000-0000000003f9","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-000000000000",'Trace_Requirements',2,0 );
INSERT INTO SM_STATE VALUES ( "00000000-0000-0000-0000-000000000402","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-000000000000",'Complete_Analysis',3,1 );
INSERT INTO SM_STATE VALUES ( "00000000-0000-0000-0000-00000000040b","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-000000000000",'Idle',4,0 );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-0000000002e8","00000000-0000-0000-0000-0000000002c5","00000000-0000-0000-0000-000000000000",1,'Tests_Have_Finished',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000300","00000000-0000-0000-0000-0000000002c5","00000000-0000-0000-0000-000000000000",2,'Commit_Hari_Kiri',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000414","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-000000000000",1,'Perform_Analysis',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000432","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-000000000000",2,'Terminate_Analysis',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000450","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-000000000000",3,'Go',0,'','','' );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000002cd","00000000-0000-0000-0000-0000000002e8","00000000-0000-0000-0000-0000000002c5","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000002d6","00000000-0000-0000-0000-0000000002e8","00000000-0000-0000-0000-0000000002c5","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000002df","00000000-0000-0000-0000-0000000002e8","00000000-0000-0000-0000-0000000002c5","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000002cd","00000000-0000-0000-0000-000000000300","00000000-0000-0000-0000-0000000002c5","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000002d6","00000000-0000-0000-0000-000000000300","00000000-0000-0000-0000-0000000002c5","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000002df","00000000-0000-0000-0000-000000000300","00000000-0000-0000-0000-0000000002c5","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000003f0","00000000-0000-0000-0000-000000000414","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000003f9","00000000-0000-0000-0000-000000000414","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-000000000402","00000000-0000-0000-0000-000000000414","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-00000000040b","00000000-0000-0000-0000-000000000414","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000003f0","00000000-0000-0000-0000-000000000432","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000003f9","00000000-0000-0000-0000-000000000432","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-000000000402","00000000-0000-0000-0000-000000000432","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-00000000040b","00000000-0000-0000-0000-000000000432","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000003f0","00000000-0000-0000-0000-000000000450","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000003f9","00000000-0000-0000-0000-000000000450","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-000000000402","00000000-0000-0000-0000-000000000450","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-00000000040b","00000000-0000-0000-0000-000000000450","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_NSTXN VALUES ( "00000000-0000-0000-0000-000000000318","00000000-0000-0000-0000-0000000002c5","00000000-0000-0000-0000-0000000002cd","00000000-0000-0000-0000-0000000002e8","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_NSTXN VALUES ( "00000000-0000-0000-0000-000000000326","00000000-0000-0000-0000-0000000002c5","00000000-0000-0000-0000-0000000002d6","00000000-0000-0000-0000-000000000300","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_NSTXN VALUES ( "00000000-0000-0000-0000-00000000046e","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-0000000003f0","00000000-0000-0000-0000-000000000414","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_NSTXN VALUES ( "00000000-0000-0000-0000-000000000482","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-0000000003f9","00000000-0000-0000-0000-000000000432","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_NSTXN VALUES ( "00000000-0000-0000-0000-000000000496","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-00000000040b","00000000-0000-0000-0000-000000000450","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EIGN VALUES ( "00000000-0000-0000-0000-0000000003f0","00000000-0000-0000-0000-000000000450","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_EIGN VALUES ( "00000000-0000-0000-0000-0000000003f9","00000000-0000-0000-0000-000000000414","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_EIGN VALUES ( "00000000-0000-0000-0000-0000000003f9","00000000-0000-0000-0000-000000000450","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_EIGN VALUES ( "00000000-0000-0000-0000-00000000040b","00000000-0000-0000-0000-000000000414","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-0000000002d6","00000000-0000-0000-0000-0000000002e8","00000000-0000-0000-0000-0000000002c5","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-0000000002df","00000000-0000-0000-0000-0000000002e8","00000000-0000-0000-0000-0000000002c5","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-0000000002cd","00000000-0000-0000-0000-000000000300","00000000-0000-0000-0000-0000000002c5","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-0000000002df","00000000-0000-0000-0000-000000000300","00000000-0000-0000-0000-0000000002c5","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-000000000402","00000000-0000-0000-0000-000000000414","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-0000000003f0","00000000-0000-0000-0000-000000000432","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-000000000402","00000000-0000-0000-0000-000000000432","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-00000000040b","00000000-0000-0000-0000-000000000432","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-000000000402","00000000-0000-0000-0000-000000000450","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_TXN VALUES ( "00000000-0000-0000-0000-000000000318","00000000-0000-0000-0000-0000000002c5","00000000-0000-0000-0000-0000000002d6","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_TXN VALUES ( "00000000-0000-0000-0000-000000000326","00000000-0000-0000-0000-0000000002c5","00000000-0000-0000-0000-0000000002df","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_TXN VALUES ( "00000000-0000-0000-0000-00000000046e","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-0000000003f9","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_TXN VALUES ( "00000000-0000-0000-0000-000000000482","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-000000000402","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_TXN VALUES ( "00000000-0000-0000-0000-000000000496","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-0000000003f0","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_MOORE VALUES ( "00000000-0000-0000-0000-0000000002c5" );
INSERT INTO SM_MOORE VALUES ( "00000000-0000-0000-0000-0000000003e8" );
INSERT INTO SM_MOAH VALUES ( "00000000-0000-0000-0000-0000000002cf","00000000-0000-0000-0000-0000000002c5","00000000-0000-0000-0000-0000000002cd" );
INSERT INTO SM_MOAH VALUES ( "00000000-0000-0000-0000-0000000002d8","00000000-0000-0000-0000-0000000002c5","00000000-0000-0000-0000-0000000002d6" );
INSERT INTO SM_MOAH VALUES ( "00000000-0000-0000-0000-0000000002e1","00000000-0000-0000-0000-0000000002c5","00000000-0000-0000-0000-0000000002df" );
INSERT INTO SM_MOAH VALUES ( "00000000-0000-0000-0000-0000000003f2","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-0000000003f0" );
INSERT INTO SM_MOAH VALUES ( "00000000-0000-0000-0000-0000000003fb","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-0000000003f9" );
INSERT INTO SM_MOAH VALUES ( "00000000-0000-0000-0000-000000000404","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-000000000402" );
INSERT INTO SM_MOAH VALUES ( "00000000-0000-0000-0000-00000000040d","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-00000000040b" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-0000000002cf","00000000-0000-0000-0000-0000000002c5" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-0000000002d8","00000000-0000-0000-0000-0000000002c5" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-0000000002e1","00000000-0000-0000-0000-0000000002c5" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-00000000031c","00000000-0000-0000-0000-0000000002c5" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-00000000032a","00000000-0000-0000-0000-0000000002c5" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-0000000003f2","00000000-0000-0000-0000-0000000003e8" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-0000000003fb","00000000-0000-0000-0000-0000000003e8" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-000000000404","00000000-0000-0000-0000-0000000003e8" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-00000000040d","00000000-0000-0000-0000-0000000003e8" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-000000000472","00000000-0000-0000-0000-0000000003e8" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-000000000486","00000000-0000-0000-0000-0000000003e8" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-00000000049a","00000000-0000-0000-0000-0000000003e8" );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-0000000002cf","00000000-0000-0000-0000-0000000002c5",3,'','',0 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-0000000002d8","00000000-0000-0000-0000-0000000002c5",3,'
 [] = DD4:End_Of_Test[this]

 generate DD2:Commit_Hari_Kiri() to this','',2 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-0000000002e1","00000000-0000-0000-0000-0000000002c5",3,'# Check to see if all instances of objects linked to this object
# have been removed.

A_Pass = this -> R1.A_Test_That_Passed
A_Fail = this -> R2.A_Test_That_Failed
Supp   = this -> R3.A_Test_That_Is_Unsupported

{Set_Of_Dupes} = this -> R4.Duplicated_Result
{Set_Of_Tests} = this -> R8.Test_Details

# If we are collecting Traceability data for this domain, unlink it
# but DO NOT delete it, otherwise all data would be lost.

Traceability = this -> R10.Test_Suite

if Traceability != UNDEFINED then

   unlink this R10 Traceability

endif


if A_Pass != UNDEFINED then

   [] = RP7::Report_Run_Time_Error["Pass result instance still exists"]

else

   if A_Fail != UNDEFINED then

      [] = RP7::Report_Run_Time_Error["Fail result instance still exists"]

   else

      if Supp != UNDEFINED then

         [] = RP7::Report_Run_Time_Error["Unsupported result instance still exists"]

       else

          if countof {Set_Of_Dupes} != 0 then

             [] = RP7::Report_Run_Time_Error["Duplicated result instance still exists"]

          else

             if countof {Set_Of_Tests} != 0 then

                 [] = RP7::Report_Run_Time_Error["Results instance still exists"]

             else

                delete this

             endif
          endif
       endif
   endif
endif
','',2 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-00000000031c","00000000-0000-0000-0000-0000000002c5",3,'','',6 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-00000000032a","00000000-0000-0000-0000-0000000002c5",3,'','',6 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-0000000003f2","00000000-0000-0000-0000-0000000003e8",3,'','',0 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-0000000003fb","00000000-0000-0000-0000-0000000003e8",3,'
# Open up a file in the ADA run time system to stash results into.


#$ADA_INLINE
   #with Test_Suite_Text_IO;
   #Test_Suite_Text_IO.Open_File_For_Writing(
      #    Name_Of_File             => "Requirements_Analysis",
      #    Unique_Domain_Identifier => 999);
#$END_ADAINLINE



# Navigate to all the reported requirements

{All_Requirements} = this -> R11.All_Requirements_In_Test_Suite

How_Many_Requirements = countof {All_Requirements}

Current_Reqid = " "
The_Domain = " "
The_Test   = 0
The_Result of Result_Type = ''Unknown''

if How_Many_Requirements > 0 then

   # Step through each reqirement, navigating across to the set of
   # test results that test that requirement.

   for A_Requirement in {All_Requirements} do

      Current_Reqid = A_Requirement.REQUID
      Local_Requid_Text   = A_Requirement.Requid_Text
      Requid_Status = A_Requirement.Requid_Test_Status

      $INLINE
         fprintf(stderr,"------------------------------------------------------------\n");
         fprintf(stderr,"Requirement  %s has ", Current_Reqid ); 
      $ENDINLINE




      if Requid_Status = ''Tested'' then

         $INLINE
            fprintf(stderr,"been tested by the following \n" );
         $ENDINLINE



         #$ADA_INLINE
            # Test_Suite_Text_IO.Dump_String("Requirement " & Current_Reqid & "has been tested by the following ");
         #$END_ADAINLINE



         # Navigate to the set containing the domain and test details that met this requirement
         {Satisfying_Tests} = A_Requirement -> R12.Requirement_Met

         for A_Test in {Satisfying_Tests} do

            # Dump out the requirements and the tests that prove them

            The_Domain = A_Test.Domain_Name
            The_Test   = A_Test.Meeting_Test_Number
            The_Result = A_Test.Requid_Test_Result

            $INLINE
               fprintf(stderr,"Domain %s Test Number %d ", The_Domain, The_Test );
            $ENDINLINE


            if The_Result = ''Passed'' then
               $INLINE
                  fprintf(stderr,"Passed\n");
               $ENDINLINE

               #$ADA_INLINE
                  # Test_Suite_Text_IO.Dump_String("Domain " & The_Domain & "Test Number " & Application_Types.Base_Integer_Type''image(The_Test) & ", Passed" );
               #$END_ADAINLINE


            else
               if The_Result = ''Failed'' then
                  $INLINE
                     fprintf(stderr,"Failed\n");
                  $ENDINLINE

                  #$ADA_INLINE
                     # Test_Suite_Text_IO.Dump_String("Domain " & The_Domain & "Test Number " & Application_Types.Base_Integer_Type''image(The_Test) & ", Failed" );
                  #$END_ADAINLINE


               else
                  if The_Result = ''Unsupported'' then
                     $INLINE
                        fprintf(stderr,"was Unsupported\n");
                     $ENDINLINE


                     #$ADA_INLINE
                        # Test_Suite_Text_IO.Dump_String("Domain " & The_Domain & "Test Number " & Application_Types.Base_Integer_Type''image(The_Test) & ", Unsupported" );
                     #$END_ADAINLINE

                  else
                     $INLINE
                        fprintf(stderr,"has an Unknown result reported\n");
                     $ENDINLINE

                     #$ADA_INLINE
                        # Test_Suite_Text_IO.Dump_String("Domain " & The_Domain & "Test Number " & Application_Types.Base_Integer_Type''image(The_Test) & ", Unknown" );
                     #$END_ADAINLINE


                     [] = RP7::Report_Run_Time_Error["Requirement has an UNKNOWN result"]
                  endif
 
               endif
            endif

         endfor

      else

         # Requirement has not been tested.

         $INLINE
            fprintf(stderr,"not been tested in this run\n" );
         $ENDINLINE


         #$ADA_INLINE
            # Test_Suite_Text_IO.Dump_String("Requirement " & Current_Reqid & "has been not been tested in this run");
         #$END_ADAINLINE

      endif

      $INLINE
         fprintf(stderr,"------------------------------------------------------------\n");
      $ENDINLINE

      #$ADA_INLINE
         # Test_Suite_Text_IO.Dump_String("------------------------------------------------------------");
      #$END_ADAINLINE

 
   endfor


else

   # No reported requirements found

   [] = RP7::Report_Run_Time_Error["No requirements found"];

   #$ADA_INLINE
      # Test_Suite_Text_IO.Dump_String("No requirements identifiers specified");
   #$END_ADAINLINE

endif

#$ADA_INLINE
   #Test_Suite_Text_IO.Close_File_For_Writing(
      #    Name_Of_File             => "Requirements_Analysis",
      #    Unique_Domain_Identifier => 999);
#$END_ADAINLINE


# Terminate and tidy up.
generate TS2:Terminate_Analysis() to this','',2 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-000000000404","00000000-0000-0000-0000-0000000003e8",3,'# 1 Close down analysis of requirements.
# 2 Unlink and delete from the requirements results
# 3 Delete self

# In the middle of a run. Allow to continue, but without the 
# requirements traceability.

#Remove all links

{Requirements} = this ->R11.All_Requirements_In_Test_Suite

for requirement in {Requirements} do


   # Go from the requirement to the test results that fulfill the requirement
   {Tests} = requirement -> R12.Requirement_Met

   for test in {Tests} do

      unlink requirement R12 test
      delete test

   endfor

   unlink this R11 requirement

   delete requirement

endfor

{Domains} = this -> R10.Domain_Details

# Only loop round if there are some domains still existing.
How_Many_Left = countof{Domains}

if How_Many_Left != 0 then

   for domain in {Domains} do

      unlink domain R10 this

   endfor

   [] = RP7::Report_Run_Time_Error["Domains still exist"]

endif

delete this
','',2 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-00000000040d","00000000-0000-0000-0000-0000000003e8",3,'','',0 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-000000000472","00000000-0000-0000-0000-0000000003e8",3,'','',6 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-000000000486","00000000-0000-0000-0000-0000000003e8",3,'','',6 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-00000000049a","00000000-0000-0000-0000-0000000003e8",3,'','',6 );
INSERT INTO SM_ISM VALUES ( "00000000-0000-0000-0000-0000000002c5","00000000-0000-0000-0000-00000000003f" );
INSERT INTO SM_ISM VALUES ( "00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-00000000008c" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-0000000002e8","00000000-0000-0000-0000-0000000002c5","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000300","00000000-0000-0000-0000-0000000002c5","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000414","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000432","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000450","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-0000000002e8","00000000-0000-0000-0000-0000000002c5","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000300","00000000-0000-0000-0000-0000000002c5","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000414","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000432","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000450","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_TAH VALUES ( "00000000-0000-0000-0000-00000000031c","00000000-0000-0000-0000-0000000002c5","00000000-0000-0000-0000-000000000318" );
INSERT INTO SM_TAH VALUES ( "00000000-0000-0000-0000-00000000032a","00000000-0000-0000-0000-0000000002c5","00000000-0000-0000-0000-000000000326" );
INSERT INTO SM_TAH VALUES ( "00000000-0000-0000-0000-000000000472","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-00000000046e" );
INSERT INTO SM_TAH VALUES ( "00000000-0000-0000-0000-000000000486","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-000000000482" );
INSERT INTO SM_TAH VALUES ( "00000000-0000-0000-0000-00000000049a","00000000-0000-0000-0000-0000000003e8","00000000-0000-0000-0000-000000000496" );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000004",1,"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000000",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000006",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000009",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000000c",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000000f",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000012",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000015",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000018",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000001b",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000001e",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000021",1,"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000000",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000023",1,"00000000-0000-0000-0000-000000000021","00000000-0000-0000-0000-000000000000",2 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000025",1,"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000023",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000027",1,"00000000-0000-0000-0000-000000000021","00000000-0000-0000-0000-000000000000",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000029",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000002d",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000030",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000034",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000038",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000003b",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000003f",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000043",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000046",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000004a",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000004e",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000051",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000055",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000059",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000005c",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000060",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000064",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000067",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000006b",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000006f",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000072",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000076",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000007a",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000007d",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000081",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000085",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000088",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000008c",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000090",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000093",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000097",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000009b",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000009e",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000a2",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000a6",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000a9",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000ad",1,"00000000-0000-0000-0000-000000000027","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000b5",1,"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000023",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000b7",1,"00000000-0000-0000-0000-0000000000b5","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000ba",1,"00000000-0000-0000-0000-0000000000b5","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000bd",1,"00000000-0000-0000-0000-0000000000b5","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000c0",1,"00000000-0000-0000-0000-0000000000b5","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000c3",1,"00000000-0000-0000-0000-0000000000b5","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000c9",1,"00000000-0000-0000-0000-0000000000b5","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000d1",1,"00000000-0000-0000-0000-0000000000b5","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000d9",1,"00000000-0000-0000-0000-0000000000b5","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000df",1,"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000023",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000e1",1,"00000000-0000-0000-0000-0000000000df","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000e3",1,"00000000-0000-0000-0000-000000000027","00000000-0000-0000-0000-000000000000",6 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000f2",1,"00000000-0000-0000-0000-0000000000df","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000fe",1,"00000000-0000-0000-0000-0000000000df","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000106",1,"00000000-0000-0000-0000-0000000000df","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000116",1,"00000000-0000-0000-0000-0000000000df","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000120",1,"00000000-0000-0000-0000-0000000000df","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000128",1,"00000000-0000-0000-0000-0000000000df","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000012e",1,"00000000-0000-0000-0000-0000000000df","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000136",1,"00000000-0000-0000-0000-0000000000df","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000013e",1,"00000000-0000-0000-0000-0000000000df","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000148",1,"00000000-0000-0000-0000-0000000000df","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000014e",1,"00000000-0000-0000-0000-0000000000df","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000158",1,"00000000-0000-0000-0000-0000000000df","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000015c",1,"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000023",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000015e",1,"00000000-0000-0000-0000-00000000015c","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000160",1,"00000000-0000-0000-0000-00000000015c","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000162",1,"00000000-0000-0000-0000-00000000015c","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000164",1,"00000000-0000-0000-0000-00000000015c","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000166",1,"00000000-0000-0000-0000-00000000015c","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000168",1,"00000000-0000-0000-0000-00000000015c","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000016a",1,"00000000-0000-0000-0000-00000000015c","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000016c",1,"00000000-0000-0000-0000-00000000015c","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000016e",1,"00000000-0000-0000-0000-00000000015c","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000170",1,"00000000-0000-0000-0000-00000000015c","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000172",1,"00000000-0000-0000-0000-00000000015c","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000174",1,"00000000-0000-0000-0000-00000000015c","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000176",1,"00000000-0000-0000-0000-00000000015c","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000178",1,"00000000-0000-0000-0000-00000000015c","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000017a",1,"00000000-0000-0000-0000-00000000015c","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000017c",1,"00000000-0000-0000-0000-00000000015c","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000017e",1,"00000000-0000-0000-0000-00000000015c","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000180",1,"00000000-0000-0000-0000-00000000015c","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000182",1,"00000000-0000-0000-0000-00000000015c","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000184",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000199",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001ae",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001c3",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001d8",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001ed",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000202",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000217",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000022c",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000241",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000256",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000026b",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO model VALUES ( 'maslin' );
INSERT INTO option VALUES ( 'maslin','actiondialect','WASL' );
INSERT INTO option VALUES ( 'maslin','projectroot','./convertdir/RP/' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000006","00000000-0000-0000-0000-000000000000",'MASLtype','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000009","00000000-0000-0000-0000-000000000000",'MASLunique','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000000c","00000000-0000-0000-0000-000000000000",'device','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000000f","00000000-0000-0000-0000-000000000000",'duration','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000012","00000000-0000-0000-0000-000000000000",'wstring','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000015","00000000-0000-0000-0000-000000000000",'long_integer','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000018","00000000-0000-0000-0000-000000000000",'byte','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000001b","00000000-0000-0000-0000-000000000000",'wcharacter','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000001e","00000000-0000-0000-0000-000000000000",'character','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000002d","00000000-0000-0000-0000-000000000000",'inst_ref<A_Test_That_Passed>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000030","00000000-0000-0000-0000-000000000000",'inst_ref_set<A_Test_That_Passed>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000038","00000000-0000-0000-0000-000000000000",'inst_ref<A_Test_That_Failed>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000003b","00000000-0000-0000-0000-000000000000",'inst_ref_set<A_Test_That_Failed>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000043","00000000-0000-0000-0000-000000000000",'inst_ref<Domain_Details>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000046","00000000-0000-0000-0000-000000000000",'inst_ref_set<Domain_Details>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000004e","00000000-0000-0000-0000-000000000000",'inst_ref<A_Test_That_Is_Unsupported>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000051","00000000-0000-0000-0000-000000000000",'inst_ref_set<A_Test_That_Is_Unsupported>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000059","00000000-0000-0000-0000-000000000000",'inst_ref<Duplicated_Result>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000005c","00000000-0000-0000-0000-000000000000",'inst_ref_set<Duplicated_Result>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000064","00000000-0000-0000-0000-000000000000",'inst_ref<Results_Of_Tests>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000067","00000000-0000-0000-0000-000000000000",'inst_ref_set<Results_Of_Tests>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000006f","00000000-0000-0000-0000-000000000000",'inst_ref<Test_Details>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000072","00000000-0000-0000-0000-000000000000",'inst_ref_set<Test_Details>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000007a","00000000-0000-0000-0000-000000000000",'inst_ref<Requirement_Identifier_For_Test>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000007d","00000000-0000-0000-0000-000000000000",'inst_ref_set<Requirement_Identifier_For_Test>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000085","00000000-0000-0000-0000-000000000000",'inst_ref<Supporting_Comments>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000088","00000000-0000-0000-0000-000000000000",'inst_ref_set<Supporting_Comments>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000090","00000000-0000-0000-0000-000000000000",'inst_ref<Test_Suite>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000093","00000000-0000-0000-0000-000000000000",'inst_ref_set<Test_Suite>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000009b","00000000-0000-0000-0000-000000000000",'inst_ref<All_Requirements_In_Test_Suite>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000009e","00000000-0000-0000-0000-000000000000",'inst_ref_set<All_Requirements_In_Test_Suite>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000a6","00000000-0000-0000-0000-000000000000",'inst_ref<Requirement_Met>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000a9","00000000-0000-0000-0000-000000000000",'inst_ref_set<Requirement_Met>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000ad","00000000-0000-0000-0000-000000000000",'Result_Type','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000b7","00000000-0000-0000-0000-000000000000",'Test_Number_Type',' Number of the test. Number must be greater than zero.
','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000ba","00000000-0000-0000-0000-000000000000",'Test_Result_Type',' Indication of the result, pass, fail or unsupported.
','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000bd","00000000-0000-0000-0000-000000000000",'Invoker_Domain_Type',' Enumeration defineing the name of the invoking domain for the reporter domain.
','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000c0","00000000-0000-0000-0000-000000000000",'Test_Result_Value_Type',' Integer value indicating test result value
','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000c3","00000000-0000-0000-0000-000000000000",'Failed_Tests_Record_Type',' Contains a record of all the failed test numbers.
','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000c9","00000000-0000-0000-0000-000000000000",'Duplicated_Tests_Record_Type','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000d1","00000000-0000-0000-0000-000000000000",'Unsupported_Tests_Record_Type','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-000000000000",'Requid_Status_Type','','' );
