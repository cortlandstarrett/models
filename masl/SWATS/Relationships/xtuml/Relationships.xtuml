-- root-types-contained: Package_c
-- BP 7.1 content: StreamData syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000029",'Object_A',2,'objA',' This object forms part of a normal 1c:1c relationship.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000034",'Object_B',3,'objB',' This object forms part of a 1c:1c and 1-(1c:1c) relationships.
 
 All tests for the above relationships are controlled by this object.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-00000000003f",'Report_Data',4,'RD','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-00000000004a",'Object_C',5,'objC',' This object forms part of a 1c:Mc relationship.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000055",'Object_D',6,'objD',' This object forms part of 1c:Mc and 1-(1c:Mc) relationship.
 
 All tests for the above relationships are controlled by this object.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000060",'Object_E',7,'objE',' This object forms part of a 1-(Mc:Mc) relationships.
 
 All tests for the above relationship are controlled by this object.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-00000000006b",'Object_F',8,'objF',' This object forms part of a 1-(Mc:Mc) relationship.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000076",'Object_EF',9,'OBJEF',' This is the associative object that forms part of the 1-(Mc:Mc) relationship.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000081",'Far_Left',10,'FL','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-00000000008c",'Middle',11,'M','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000097",'Object_H',12,'objH',' Supertype object.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-0000000000a2",'Object_I',13,'objI',' Subtype object and supertype object.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-0000000000ad",'Many_Right',14,'MR','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-0000000000b8",'Test_Data',15,'TN','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-0000000000c3",'Many_Far_Right',16,'MFR','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-0000000000ce",'Many_Right_Assoc',17,'MRA','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-0000000000d9",'Object_G',18,'objG',' This object forms part of the following types of reflexive relationships:
 
 	1c:1c
 	1c:Mc
 	Mc:Mc
 
 All tests for the above relationships are handled by this object.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-0000000000e4",'Many_Above',19,'MA','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-0000000000ef",'Left_Object',20,'LO','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-0000000000fa",'Right_Object',21,'RO','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000105",'Middle_Object',22,'MO','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000110",'MR_Assoc',23,'assMR','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-00000000011b",'Left_Many',24,'objLM','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000126",'Object_L',25,'objL',' Subtype object.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000131",'Object_M',26,'objM',' This object was part of a 1-(1c:1c) relationship.
 Since 1:1 associative relationships are not
 supported by code builder, it is now a 1-1 relationship.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-00000000013c",'Right_Many',27,'objRM','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000147",'Object_O',28,'objO',' This object forms part of the 1-(1c:Mc) relationship.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000152",'Object_DO',29,'objDO',' This is the associative object that forms part of the 1-(1c:Mc) realtionship.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-00000000015d",'Object_P',30,'objP',' This object forms part of a composed relationship.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000168",'Object_Q',31,'objQ',' This object forms part of a composed relationship.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000173",'Object_R',32,'objR',' This object forms part of a composed relationship.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-00000000017e",'LMRM_Assoc',33,'objLMRM','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000189",'Bottom_Many',34,'objBM','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000194",'Ref_Att_ObjA',35,'RAOA','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-00000000019f",'Sub_L1',39,'objSL1','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-0000000001aa",'Sub_L2',41,'objSL2','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-0000000001b5",'Sub_L3',42,'objSL3','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-0000000001c0",'Sub_Sub_L1',43,'objSSL1','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-0000000001cb",'Sub_Sub_L2',44,'objSSL2','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-0000000001d6",'Sub_Sub_L3',45,'objSSL3','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-0000000001e1",'Sub_Sub_L4',46,'objSSL4','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-0000000001ec",'Sub_Sub_Sub_L1',47,'objSSSL1','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-0000000001f7",'Sub_Sub_Sub_L2',48,'objSSSL2','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000202",'Sub_Sub_L5',49,'objSSL5','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-00000000020d",'Sub_Sub_L6',50,'objSSL6','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000218",'Sub_Sub_L7',51,'objSSL7','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000223",'Sub_Sub_L8',52,'objSSL8','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-00000000022e",'Sub_Sub_L9',53,'objSSL9','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000239",'Sub_Sub_L10',54,'objSSL10','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000244",'Sub_Sub_L11',55,'objSSL11','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-00000000024f",'Object_K',56,'objK','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000060a","00000000-0000-0000-0000-000000000029","00000000-0000-0000-0000-000000000000",'',' Preferred identifier.
','','idA',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000612","00000000-0000-0000-0000-000000000034","00000000-0000-0000-0000-000000000000",'',' Preferred identifier.
','','idB',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000620","00000000-0000-0000-0000-000000000034","00000000-0000-0000-0000-000000000ec4",'',' This attribute is manipulated to indicate that the required operation was successful.
','','ResultA',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000636","00000000-0000-0000-0000-000000000034","00000000-0000-0000-0000-000000000eab",'','','','current_state',0,"ba5eda7a-def5-0000-0000-000000000006",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000682","00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-000000000000",'','','','Report_Data_Unique_id',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000068a","00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-000000000682",'','','','Reported_Domain_Number',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000690","00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-000000000000",'',' Preferred identifier.
','','idC',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000069e","00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-000000000000",'',' Preferred identifier.
','','idD',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000006a6","00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-00000000069e",'',' This attribute is manipulated to indicate that the required operation was successful.
','','ResultA',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000006ac","00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-0000000006a6",'',' Colour enumeration
','','Colour_Of_D',0,"00000000-0000-0000-0000-00000000025c",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000006be","00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-0000000006ac",'','','','current_state',0,"ba5eda7a-def5-0000-0000-000000000006",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000070a","00000000-0000-0000-0000-000000000060","00000000-0000-0000-0000-000000000000",'',' Preferred identifier.
','','idE',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000712","00000000-0000-0000-0000-000000000060","00000000-0000-0000-0000-00000000070a",'',' This attribute is manipulated 
','','ResultA',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000722","00000000-0000-0000-0000-000000000060","00000000-0000-0000-0000-000000000712",'','','','current_state',0,"ba5eda7a-def5-0000-0000-000000000006",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000076e","00000000-0000-0000-0000-00000000006b","00000000-0000-0000-0000-000000000000",'',' Preferred identifier.
','','idF',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000779","00000000-0000-0000-0000-00000000006b","00000000-0000-0000-0000-00000000076e",'','','','current_state',0,"ba5eda7a-def5-0000-0000-000000000006",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000007ad","00000000-0000-0000-0000-000000000076","00000000-0000-0000-0000-000000000e62",'',' This attribute is manipulated to indicate that the required operation was successful.
','','ResultA',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000007b3","00000000-0000-0000-0000-000000000076","00000000-0000-0000-0000-0000000007ad",'','    
','','idEF',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000007b9","00000000-0000-0000-0000-000000000081","00000000-0000-0000-0000-000000000000",'','','','Left_Identifier',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000007c7","00000000-0000-0000-0000-000000000081","00000000-0000-0000-0000-000000000e4f",'','','','Left_Data',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000007cd","00000000-0000-0000-0000-00000000008c","00000000-0000-0000-0000-000000000000",'','','','Middle_Identifier',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000007d5","00000000-0000-0000-0000-00000000008c","00000000-0000-0000-0000-0000000007cd",'','','','Middle_Data',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000007e2","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000000",'',' Preferred identifier.
','','idH',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000007ea","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-0000000007e2",'',' This attribute is manipulated to indicate that the required operation was successful.
','','ResultA',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000007f6","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-0000000007ea",'','','','current_state',0,"ba5eda7a-def5-0000-0000-000000000006",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000824","00000000-0000-0000-0000-0000000000a2","00000000-0000-0000-0000-000000000e36",'','','','ResultA',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000082a","00000000-0000-0000-0000-0000000000a2","00000000-0000-0000-0000-000000000824",'','','','IDI',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000833","00000000-0000-0000-0000-0000000000a2","00000000-0000-0000-0000-00000000082a",'','','','current_state',0,"ba5eda7a-def5-0000-0000-000000000006",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000875","00000000-0000-0000-0000-0000000000ad","00000000-0000-0000-0000-000000000000",'','','','Right_Identifier',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000087d","00000000-0000-0000-0000-0000000000ad","00000000-0000-0000-0000-000000000875",'','','','Right_Data',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000889","00000000-0000-0000-0000-0000000000b8","00000000-0000-0000-0000-000000000000",'','','','The_Test_Number',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000088f","00000000-0000-0000-0000-0000000000c3","00000000-0000-0000-0000-000000000000",'','','','MFR_Identifier',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000897","00000000-0000-0000-0000-0000000000c3","00000000-0000-0000-0000-00000000088f",'','','','MFR_Data',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000008ad","00000000-0000-0000-0000-0000000000ce","00000000-0000-0000-0000-000000000df3",'','','','MRA_Data',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000008b3","00000000-0000-0000-0000-0000000000ce","00000000-0000-0000-0000-0000000008ad",'','','','MRA_Identifier',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000008b9","00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-000000000000",'',' This attribute is manipulated to indicate that the required operation was successful.
','','ResultA',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000008bf","00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-0000000008b9",'','','','idG',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000008db","00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-000000000d82",'','','','current_state',0,"ba5eda7a-def5-0000-0000-000000000006",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000927","00000000-0000-0000-0000-0000000000e4","00000000-0000-0000-0000-000000000d69",'','','','Above_Data',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000092d","00000000-0000-0000-0000-0000000000ef","00000000-0000-0000-0000-000000000000",'','','','idLO',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000935","00000000-0000-0000-0000-0000000000fa","00000000-0000-0000-0000-000000000000",'','','','idRO',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000093d","00000000-0000-0000-0000-000000000105","00000000-0000-0000-0000-000000000000",'','','','idMO',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000094b","00000000-0000-0000-0000-000000000105","00000000-0000-0000-0000-000000000d50",'','','','ResultA',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000095b","00000000-0000-0000-0000-000000000105","00000000-0000-0000-0000-00000000094b",'','','','current_state',0,"ba5eda7a-def5-0000-0000-000000000006",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000099b","00000000-0000-0000-0000-000000000110","00000000-0000-0000-0000-000000000d35",'','','','idMR',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000009a1","00000000-0000-0000-0000-00000000011b","00000000-0000-0000-0000-000000000000",'','','','idLM',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000009a9","00000000-0000-0000-0000-00000000011b","00000000-0000-0000-0000-0000000009a1",'','','','ResultA',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000009b9","00000000-0000-0000-0000-00000000011b","00000000-0000-0000-0000-0000000009a9",'','','','current_state',0,"ba5eda7a-def5-0000-0000-000000000006",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000009e7","00000000-0000-0000-0000-000000000126","00000000-0000-0000-0000-000000000e27",'','','','ResultA',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000009ed","00000000-0000-0000-0000-000000000126","00000000-0000-0000-0000-0000000009e7",'','','','idL',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000009f6","00000000-0000-0000-0000-000000000126","00000000-0000-0000-0000-0000000009ed",'','','','current_state',0,"ba5eda7a-def5-0000-0000-000000000006",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000a30","00000000-0000-0000-0000-000000000131","00000000-0000-0000-0000-000000000000",'',' Preferred identifier.
','','idM',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000a38","00000000-0000-0000-0000-00000000013c","00000000-0000-0000-0000-000000000000",'','','','idRM',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000a40","00000000-0000-0000-0000-000000000147","00000000-0000-0000-0000-000000000000",'',' Preferred identifier.
','','idO',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000a56","00000000-0000-0000-0000-000000000152","00000000-0000-0000-0000-000000000d0d",'','','','idDO',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000a5c","00000000-0000-0000-0000-00000000015d","00000000-0000-0000-0000-000000000000",'',' Preferred identifier.
','','idP',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000a64","00000000-0000-0000-0000-00000000015d","00000000-0000-0000-0000-000000000a5c",'',' This attribute is manipulted to indicate that the required operation was successful.
','','ResultA',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000a6f","00000000-0000-0000-0000-00000000015d","00000000-0000-0000-0000-000000000a64",'','','','current_state',0,"ba5eda7a-def5-0000-0000-000000000006",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000a89","00000000-0000-0000-0000-000000000168","00000000-0000-0000-0000-000000000000",'',' Preferred identifier.
','','idQ',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000a9d","00000000-0000-0000-0000-000000000173","00000000-0000-0000-0000-000000000000",'',' Preferred identifier.
','','idR',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000ab5","00000000-0000-0000-0000-00000000017e","00000000-0000-0000-0000-000000000cb1",'','','','idLMRM',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000ac7","00000000-0000-0000-0000-000000000189","00000000-0000-0000-0000-000000001031",'','','','idBM',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000acf","00000000-0000-0000-0000-000000000194","00000000-0000-0000-0000-000000000000",'','','','RAOA_id',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000aeb","00000000-0000-0000-0000-00000000019f","00000000-0000-0000-0000-000000000edb",'','','','idSL1',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000af9","00000000-0000-0000-0000-0000000001aa","00000000-0000-0000-0000-000000000eea",'','','','idSL2',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000b07","00000000-0000-0000-0000-0000000001b5","00000000-0000-0000-0000-000000000ef9",'','','','idSL3',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000b15","00000000-0000-0000-0000-0000000001c0","00000000-0000-0000-0000-000000000f30",'','','','idSSL1',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000b23","00000000-0000-0000-0000-0000000001cb","00000000-0000-0000-0000-000000000f12",'','','','idSSL2',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000b31","00000000-0000-0000-0000-0000000001d6","00000000-0000-0000-0000-000000000f21",'','','','idSSL3',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000b3f","00000000-0000-0000-0000-0000000001e1","00000000-0000-0000-0000-000000000f3f",'','','','idSSL4',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000b4d","00000000-0000-0000-0000-0000000001ec","00000000-0000-0000-0000-000000000f5a",'','','','idSSSL1',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000b5b","00000000-0000-0000-0000-0000000001f7","00000000-0000-0000-0000-000000000f69",'','','','idSSSL2',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000b69","00000000-0000-0000-0000-000000000202","00000000-0000-0000-0000-000000000f9e",'','','','idSSL5',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000b77","00000000-0000-0000-0000-00000000020d","00000000-0000-0000-0000-000000000f80",'','','','idSSL6',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000b85","00000000-0000-0000-0000-000000000218","00000000-0000-0000-0000-000000000f8f",'','','','idSSL7',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000b93","00000000-0000-0000-0000-000000000223","00000000-0000-0000-0000-000000000fc6",'','','','idSSL8',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000ba1","00000000-0000-0000-0000-00000000022e","00000000-0000-0000-0000-000000000fb7",'','','','idSSL9',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000baf","00000000-0000-0000-0000-000000000239","00000000-0000-0000-0000-000000000fdd",'','','','idSSL10',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000bbd","00000000-0000-0000-0000-000000000244","00000000-0000-0000-0000-000000000fec",'','','','idSSL11',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000bc3","00000000-0000-0000-0000-00000000024f","00000000-0000-0000-0000-000000000000",'','','','idK',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000c72","00000000-0000-0000-0000-000000000194","00000000-0000-0000-0000-000000000c8b",'','','','RAOA_id_R_TWENTY_THREE',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000c8b","00000000-0000-0000-0000-000000000194","00000000-0000-0000-0000-000000000acf",'','','','RAOA_id_R_SEVENTEEN',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000c9e","00000000-0000-0000-0000-00000000017e","00000000-0000-0000-0000-000000000000",'','','','idLM',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000cb1","00000000-0000-0000-0000-00000000017e","00000000-0000-0000-0000-000000000c9e",'','','','idRM',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000cce","00000000-0000-0000-0000-000000000168","00000000-0000-0000-0000-000000000ce7",'','','','idR',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000ce7","00000000-0000-0000-0000-000000000168","00000000-0000-0000-0000-000000000a89",'','','','idP',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000cfa","00000000-0000-0000-0000-000000000152","00000000-0000-0000-0000-000000000000",'','','','idD',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000d0d","00000000-0000-0000-0000-000000000152","00000000-0000-0000-0000-000000000cfa",'','','','idO',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000d22","00000000-0000-0000-0000-000000000110","00000000-0000-0000-0000-000000000000",'','','','idMO',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000d35","00000000-0000-0000-0000-000000000110","00000000-0000-0000-0000-000000000d22",'','','','idRO',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000d50","00000000-0000-0000-0000-000000000105","00000000-0000-0000-0000-00000000093d",'','','','idLO',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000d69","00000000-0000-0000-0000-0000000000e4","00000000-0000-0000-0000-000000000000",'','','','Right_Identifier',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000d82","00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-0000000008bf",'','','','idG_Reflexive_ID',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000de0","00000000-0000-0000-0000-0000000000ce","00000000-0000-0000-0000-000000000000",'','','','Right_Identifier',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000df3","00000000-0000-0000-0000-0000000000ce","00000000-0000-0000-0000-000000000de0",'','','','MFR_Identifier',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000e10","00000000-0000-0000-0000-0000000000ad","00000000-0000-0000-0000-00000000087d",'','','','Middle_Identifier',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000e27","00000000-0000-0000-0000-000000000126","00000000-0000-0000-0000-000000000000",'','','','idH',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000e36","00000000-0000-0000-0000-0000000000a2","00000000-0000-0000-0000-000000000000",'','','','idH',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000e4f","00000000-0000-0000-0000-000000000081","00000000-0000-0000-0000-0000000007b9",'','','','Middle_Identifier',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000e62","00000000-0000-0000-0000-000000000076","00000000-0000-0000-0000-000000000e75",'','','','idF',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000e75","00000000-0000-0000-0000-000000000076","00000000-0000-0000-0000-000000000000",'','','','idE',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000e92","00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-000000000690",'','','','idD',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000eab","00000000-0000-0000-0000-000000000034","00000000-0000-0000-0000-000000000620",'','','','idM',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000ec4","00000000-0000-0000-0000-000000000034","00000000-0000-0000-0000-000000000612",'','','','idA',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000edb","00000000-0000-0000-0000-00000000019f","00000000-0000-0000-0000-000000000000",'','','','idH',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000eea","00000000-0000-0000-0000-0000000001aa","00000000-0000-0000-0000-000000000000",'','','','idH',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000ef9","00000000-0000-0000-0000-0000000001b5","00000000-0000-0000-0000-000000000000",'','','','idH',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000f12","00000000-0000-0000-0000-0000000001cb","00000000-0000-0000-0000-000000000000",'','','','idH',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000f21","00000000-0000-0000-0000-0000000001d6","00000000-0000-0000-0000-000000000000",'','','','idH',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000f30","00000000-0000-0000-0000-0000000001c0","00000000-0000-0000-0000-000000000000",'','','','idH',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000f3f","00000000-0000-0000-0000-0000000001e1","00000000-0000-0000-0000-000000000000",'','','','idH',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000f5a","00000000-0000-0000-0000-0000000001ec","00000000-0000-0000-0000-000000000000",'','','','idH',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000f69","00000000-0000-0000-0000-0000000001f7","00000000-0000-0000-0000-000000000000",'','','','idH',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000f80","00000000-0000-0000-0000-00000000020d","00000000-0000-0000-0000-000000000000",'','','','idH',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000f8f","00000000-0000-0000-0000-000000000218","00000000-0000-0000-0000-000000000000",'','','','idH',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000f9e","00000000-0000-0000-0000-000000000202","00000000-0000-0000-0000-000000000000",'','','','idH',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000fb7","00000000-0000-0000-0000-00000000022e","00000000-0000-0000-0000-000000000000",'','','','idH',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000fc6","00000000-0000-0000-0000-000000000223","00000000-0000-0000-0000-000000000000",'','','','idH',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000fdd","00000000-0000-0000-0000-000000000239","00000000-0000-0000-0000-000000000000",'','','','idH',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000fec","00000000-0000-0000-0000-000000000244","00000000-0000-0000-0000-000000000000",'','','','idH',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000001005","00000000-0000-0000-0000-00000000024f","00000000-0000-0000-0000-000000000bc3",'','','','idH',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000101e","00000000-0000-0000-0000-000000000189","00000000-0000-0000-0000-000000000000",'','','','idLM',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000001031","00000000-0000-0000-0000-000000000189","00000000-0000-0000-0000-00000000101e",'','','','idRM',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000029" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000029" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000029" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000034" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000034" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000034" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000055" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000055" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000055" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000060" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000060" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000060" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000076" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000076" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000076" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000081" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000081" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000081" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-00000000008c" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-00000000008c" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-00000000008c" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000097" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000097" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000097" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-0000000000a2" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-0000000000a2" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-0000000000a2" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-0000000000ad" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-0000000000ad" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-0000000000ad" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-0000000000b8" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-0000000000b8" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-0000000000b8" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-0000000000c3" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-0000000000c3" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-0000000000c3" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-0000000000ce" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-0000000000ce" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-0000000000ce" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-0000000000d9" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-0000000000d9" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-0000000000d9" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-0000000000e4" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-0000000000e4" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-0000000000e4" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-0000000000ef" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-0000000000ef" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-0000000000ef" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-0000000000fa" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-0000000000fa" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-0000000000fa" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000105" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000105" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000105" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000110" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000110" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000110" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-00000000011b" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-00000000011b" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-00000000011b" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000126" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000126" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000126" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000131" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000131" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000131" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-00000000013c" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-00000000013c" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-00000000013c" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000147" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000147" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000147" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000152" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000152" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000152" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-00000000015d" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-00000000015d" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-00000000015d" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000168" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000168" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000168" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000173" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000173" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000173" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-00000000017e" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-00000000017e" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-00000000017e" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000189" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000189" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000189" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000194" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000194" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000194" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-00000000019f" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-00000000019f" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-00000000019f" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-0000000001aa" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-0000000001aa" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-0000000001aa" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-0000000001b5" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-0000000001b5" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-0000000001b5" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-0000000001c0" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-0000000001c0" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-0000000001c0" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-0000000001cb" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-0000000001cb" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-0000000001cb" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-0000000001d6" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-0000000001d6" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-0000000001d6" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-0000000001e1" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-0000000001e1" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-0000000001e1" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-0000000001ec" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-0000000001ec" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-0000000001ec" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-0000000001f7" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-0000000001f7" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-0000000001f7" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000202" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000202" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000202" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-00000000020d" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-00000000020d" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-00000000020d" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000218" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000218" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000218" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000223" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000223" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000223" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-00000000022e" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-00000000022e" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-00000000022e" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000239" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000239" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000239" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000244" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000244" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000244" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-00000000024f" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-00000000024f" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-00000000024f" );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-00000000060a","00000000-0000-0000-0000-000000000029",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000612","00000000-0000-0000-0000-000000000034",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000682","00000000-0000-0000-0000-00000000003f",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000690","00000000-0000-0000-0000-00000000004a",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-00000000069e","00000000-0000-0000-0000-000000000055",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-00000000070a","00000000-0000-0000-0000-000000000060",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-00000000076e","00000000-0000-0000-0000-00000000006b",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-0000000007b9","00000000-0000-0000-0000-000000000081",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-0000000007cd","00000000-0000-0000-0000-00000000008c",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-0000000007e2","00000000-0000-0000-0000-000000000097",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000875","00000000-0000-0000-0000-0000000000ad",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-00000000088f","00000000-0000-0000-0000-0000000000c3",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-0000000008bf","00000000-0000-0000-0000-0000000000d9",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-00000000092d","00000000-0000-0000-0000-0000000000ef",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000935","00000000-0000-0000-0000-0000000000fa",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-00000000093d","00000000-0000-0000-0000-000000000105",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-0000000009a1","00000000-0000-0000-0000-00000000011b",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000a30","00000000-0000-0000-0000-000000000131",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000a38","00000000-0000-0000-0000-00000000013c",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000a40","00000000-0000-0000-0000-000000000147",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000a5c","00000000-0000-0000-0000-00000000015d",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000a89","00000000-0000-0000-0000-000000000168",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000a9d","00000000-0000-0000-0000-000000000173",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000ac7","00000000-0000-0000-0000-000000000189",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000acf","00000000-0000-0000-0000-000000000194",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000c9e","00000000-0000-0000-0000-00000000017e",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000cb1","00000000-0000-0000-0000-00000000017e",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000d0d","00000000-0000-0000-0000-000000000152",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000d22","00000000-0000-0000-0000-000000000110",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000de0","00000000-0000-0000-0000-0000000000ce",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000df3","00000000-0000-0000-0000-0000000000ce",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000e36","00000000-0000-0000-0000-0000000000a2",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000e27","00000000-0000-0000-0000-000000000126",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000e75","00000000-0000-0000-0000-000000000076",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000e62","00000000-0000-0000-0000-000000000076",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000edb","00000000-0000-0000-0000-00000000019f",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000eea","00000000-0000-0000-0000-0000000001aa",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000ef9","00000000-0000-0000-0000-0000000001b5",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000f30","00000000-0000-0000-0000-0000000001c0",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000f12","00000000-0000-0000-0000-0000000001cb",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000f21","00000000-0000-0000-0000-0000000001d6",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000f3f","00000000-0000-0000-0000-0000000001e1",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000f5a","00000000-0000-0000-0000-0000000001ec",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000f69","00000000-0000-0000-0000-0000000001f7",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000f9e","00000000-0000-0000-0000-000000000202",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000f80","00000000-0000-0000-0000-00000000020d",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000f8f","00000000-0000-0000-0000-000000000218",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000fc6","00000000-0000-0000-0000-000000000223",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000fb7","00000000-0000-0000-0000-00000000022e",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000fdd","00000000-0000-0000-0000-000000000239",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000fec","00000000-0000-0000-0000-000000000244",0,'' );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000060a","00000000-0000-0000-0000-000000000029" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000612","00000000-0000-0000-0000-000000000034" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000620","00000000-0000-0000-0000-000000000034" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000636","00000000-0000-0000-0000-000000000034" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000682","00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000068a","00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000690","00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000069e","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000006a6","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000006ac","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000006be","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000070a","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000712","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000722","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000076e","00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000779","00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000007ad","00000000-0000-0000-0000-000000000076" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000007b3","00000000-0000-0000-0000-000000000076" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000007b9","00000000-0000-0000-0000-000000000081" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000007c7","00000000-0000-0000-0000-000000000081" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000007cd","00000000-0000-0000-0000-00000000008c" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000007d5","00000000-0000-0000-0000-00000000008c" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000007e2","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000007ea","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000007f6","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000824","00000000-0000-0000-0000-0000000000a2" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000082a","00000000-0000-0000-0000-0000000000a2" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000833","00000000-0000-0000-0000-0000000000a2" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000875","00000000-0000-0000-0000-0000000000ad" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000087d","00000000-0000-0000-0000-0000000000ad" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000889","00000000-0000-0000-0000-0000000000b8" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000088f","00000000-0000-0000-0000-0000000000c3" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000897","00000000-0000-0000-0000-0000000000c3" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000008ad","00000000-0000-0000-0000-0000000000ce" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000008b3","00000000-0000-0000-0000-0000000000ce" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000008b9","00000000-0000-0000-0000-0000000000d9" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000008bf","00000000-0000-0000-0000-0000000000d9" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000008db","00000000-0000-0000-0000-0000000000d9" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000927","00000000-0000-0000-0000-0000000000e4" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000092d","00000000-0000-0000-0000-0000000000ef" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000935","00000000-0000-0000-0000-0000000000fa" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000093d","00000000-0000-0000-0000-000000000105" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000094b","00000000-0000-0000-0000-000000000105" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000095b","00000000-0000-0000-0000-000000000105" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000099b","00000000-0000-0000-0000-000000000110" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000009a1","00000000-0000-0000-0000-00000000011b" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000009a9","00000000-0000-0000-0000-00000000011b" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000009b9","00000000-0000-0000-0000-00000000011b" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000009e7","00000000-0000-0000-0000-000000000126" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000009ed","00000000-0000-0000-0000-000000000126" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000009f6","00000000-0000-0000-0000-000000000126" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000a30","00000000-0000-0000-0000-000000000131" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000a38","00000000-0000-0000-0000-00000000013c" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000a40","00000000-0000-0000-0000-000000000147" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000a56","00000000-0000-0000-0000-000000000152" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000a5c","00000000-0000-0000-0000-00000000015d" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000a64","00000000-0000-0000-0000-00000000015d" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000a6f","00000000-0000-0000-0000-00000000015d" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000a89","00000000-0000-0000-0000-000000000168" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000a9d","00000000-0000-0000-0000-000000000173" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000ab5","00000000-0000-0000-0000-00000000017e" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000ac7","00000000-0000-0000-0000-000000000189" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000acf","00000000-0000-0000-0000-000000000194" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000aeb","00000000-0000-0000-0000-00000000019f" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000af9","00000000-0000-0000-0000-0000000001aa" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000b07","00000000-0000-0000-0000-0000000001b5" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000b15","00000000-0000-0000-0000-0000000001c0" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000b23","00000000-0000-0000-0000-0000000001cb" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000b31","00000000-0000-0000-0000-0000000001d6" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000b3f","00000000-0000-0000-0000-0000000001e1" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000b4d","00000000-0000-0000-0000-0000000001ec" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000b5b","00000000-0000-0000-0000-0000000001f7" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000b69","00000000-0000-0000-0000-000000000202" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000b77","00000000-0000-0000-0000-00000000020d" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000b85","00000000-0000-0000-0000-000000000218" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000b93","00000000-0000-0000-0000-000000000223" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000ba1","00000000-0000-0000-0000-00000000022e" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000baf","00000000-0000-0000-0000-000000000239" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000bbd","00000000-0000-0000-0000-000000000244" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000bc3","00000000-0000-0000-0000-00000000024f" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000060a","00000000-0000-0000-0000-000000000029" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000612","00000000-0000-0000-0000-000000000034" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000620","00000000-0000-0000-0000-000000000034" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000636","00000000-0000-0000-0000-000000000034" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000682","00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000068a","00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000690","00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000069e","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000006a6","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000006ac","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000006be","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000070a","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000712","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000722","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000076e","00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000779","00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000007ad","00000000-0000-0000-0000-000000000076" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000007b3","00000000-0000-0000-0000-000000000076" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000007b9","00000000-0000-0000-0000-000000000081" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000007c7","00000000-0000-0000-0000-000000000081" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000007cd","00000000-0000-0000-0000-00000000008c" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000007d5","00000000-0000-0000-0000-00000000008c" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000007e2","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000007ea","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000007f6","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000824","00000000-0000-0000-0000-0000000000a2" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000082a","00000000-0000-0000-0000-0000000000a2" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000833","00000000-0000-0000-0000-0000000000a2" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000875","00000000-0000-0000-0000-0000000000ad" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000087d","00000000-0000-0000-0000-0000000000ad" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000889","00000000-0000-0000-0000-0000000000b8" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000088f","00000000-0000-0000-0000-0000000000c3" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000897","00000000-0000-0000-0000-0000000000c3" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000008ad","00000000-0000-0000-0000-0000000000ce" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000008b3","00000000-0000-0000-0000-0000000000ce" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000008b9","00000000-0000-0000-0000-0000000000d9" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000008bf","00000000-0000-0000-0000-0000000000d9" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000008db","00000000-0000-0000-0000-0000000000d9" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000927","00000000-0000-0000-0000-0000000000e4" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000092d","00000000-0000-0000-0000-0000000000ef" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000935","00000000-0000-0000-0000-0000000000fa" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000093d","00000000-0000-0000-0000-000000000105" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000094b","00000000-0000-0000-0000-000000000105" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000095b","00000000-0000-0000-0000-000000000105" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000099b","00000000-0000-0000-0000-000000000110" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000009a1","00000000-0000-0000-0000-00000000011b" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000009a9","00000000-0000-0000-0000-00000000011b" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000009b9","00000000-0000-0000-0000-00000000011b" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000009e7","00000000-0000-0000-0000-000000000126" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000009ed","00000000-0000-0000-0000-000000000126" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000009f6","00000000-0000-0000-0000-000000000126" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000a30","00000000-0000-0000-0000-000000000131" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000a38","00000000-0000-0000-0000-00000000013c" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000a40","00000000-0000-0000-0000-000000000147" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000a56","00000000-0000-0000-0000-000000000152" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000a5c","00000000-0000-0000-0000-00000000015d" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000a64","00000000-0000-0000-0000-00000000015d" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000a6f","00000000-0000-0000-0000-00000000015d" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000a89","00000000-0000-0000-0000-000000000168" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000a9d","00000000-0000-0000-0000-000000000173" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000ab5","00000000-0000-0000-0000-00000000017e" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000ac7","00000000-0000-0000-0000-000000000189" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000acf","00000000-0000-0000-0000-000000000194" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000aeb","00000000-0000-0000-0000-00000000019f" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000af9","00000000-0000-0000-0000-0000000001aa" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000b07","00000000-0000-0000-0000-0000000001b5" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000b15","00000000-0000-0000-0000-0000000001c0" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000b23","00000000-0000-0000-0000-0000000001cb" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000b31","00000000-0000-0000-0000-0000000001d6" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000b3f","00000000-0000-0000-0000-0000000001e1" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000b4d","00000000-0000-0000-0000-0000000001ec" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000b5b","00000000-0000-0000-0000-0000000001f7" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000b69","00000000-0000-0000-0000-000000000202" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000b77","00000000-0000-0000-0000-00000000020d" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000b85","00000000-0000-0000-0000-000000000218" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000b93","00000000-0000-0000-0000-000000000223" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000ba1","00000000-0000-0000-0000-00000000022e" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000baf","00000000-0000-0000-0000-000000000239" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000bbd","00000000-0000-0000-0000-000000000244" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000bc3","00000000-0000-0000-0000-00000000024f" );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000c72","00000000-0000-0000-0000-000000000194","00000000-0000-0000-0000-000000000acf","00000000-0000-0000-0000-000000000194",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000c8b","00000000-0000-0000-0000-000000000194","00000000-0000-0000-0000-000000000acf","00000000-0000-0000-0000-000000000194",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000c9e","00000000-0000-0000-0000-00000000017e","00000000-0000-0000-0000-0000000009a1","00000000-0000-0000-0000-00000000011b",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000cb1","00000000-0000-0000-0000-00000000017e","00000000-0000-0000-0000-000000000a38","00000000-0000-0000-0000-00000000013c",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000cce","00000000-0000-0000-0000-000000000168","00000000-0000-0000-0000-000000000a9d","00000000-0000-0000-0000-000000000173",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000ce7","00000000-0000-0000-0000-000000000168","00000000-0000-0000-0000-000000000a5c","00000000-0000-0000-0000-00000000015d",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000cfa","00000000-0000-0000-0000-000000000152","00000000-0000-0000-0000-00000000069e","00000000-0000-0000-0000-000000000055",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000d0d","00000000-0000-0000-0000-000000000152","00000000-0000-0000-0000-000000000a40","00000000-0000-0000-0000-000000000147",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000d22","00000000-0000-0000-0000-000000000110","00000000-0000-0000-0000-00000000093d","00000000-0000-0000-0000-000000000105",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000d35","00000000-0000-0000-0000-000000000110","00000000-0000-0000-0000-000000000935","00000000-0000-0000-0000-0000000000fa",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000d50","00000000-0000-0000-0000-000000000105","00000000-0000-0000-0000-00000000092d","00000000-0000-0000-0000-0000000000ef",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000d69","00000000-0000-0000-0000-0000000000e4","00000000-0000-0000-0000-000000000875","00000000-0000-0000-0000-0000000000ad",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000d82","00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-0000000008bf","00000000-0000-0000-0000-0000000000d9",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000de0","00000000-0000-0000-0000-0000000000ce","00000000-0000-0000-0000-000000000875","00000000-0000-0000-0000-0000000000ad",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000df3","00000000-0000-0000-0000-0000000000ce","00000000-0000-0000-0000-00000000088f","00000000-0000-0000-0000-0000000000c3",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000e10","00000000-0000-0000-0000-0000000000ad","00000000-0000-0000-0000-0000000007cd","00000000-0000-0000-0000-00000000008c",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000e27","00000000-0000-0000-0000-000000000126","00000000-0000-0000-0000-0000000007e2","00000000-0000-0000-0000-000000000097",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000e36","00000000-0000-0000-0000-0000000000a2","00000000-0000-0000-0000-0000000007e2","00000000-0000-0000-0000-000000000097",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000e4f","00000000-0000-0000-0000-000000000081","00000000-0000-0000-0000-0000000007cd","00000000-0000-0000-0000-00000000008c",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000e62","00000000-0000-0000-0000-000000000076","00000000-0000-0000-0000-00000000076e","00000000-0000-0000-0000-00000000006b",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000e75","00000000-0000-0000-0000-000000000076","00000000-0000-0000-0000-00000000070a","00000000-0000-0000-0000-000000000060",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000e92","00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-00000000069e","00000000-0000-0000-0000-000000000055",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000eab","00000000-0000-0000-0000-000000000034","00000000-0000-0000-0000-000000000a30","00000000-0000-0000-0000-000000000131",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000ec4","00000000-0000-0000-0000-000000000034","00000000-0000-0000-0000-00000000060a","00000000-0000-0000-0000-000000000029",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000edb","00000000-0000-0000-0000-00000000019f","00000000-0000-0000-0000-0000000007e2","00000000-0000-0000-0000-000000000097",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000eea","00000000-0000-0000-0000-0000000001aa","00000000-0000-0000-0000-0000000007e2","00000000-0000-0000-0000-000000000097",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000ef9","00000000-0000-0000-0000-0000000001b5","00000000-0000-0000-0000-0000000007e2","00000000-0000-0000-0000-000000000097",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000f12","00000000-0000-0000-0000-0000000001cb","00000000-0000-0000-0000-0000000007e2","00000000-0000-0000-0000-000000000097",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000f21","00000000-0000-0000-0000-0000000001d6","00000000-0000-0000-0000-0000000007e2","00000000-0000-0000-0000-000000000097",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000f30","00000000-0000-0000-0000-0000000001c0","00000000-0000-0000-0000-0000000007e2","00000000-0000-0000-0000-000000000097",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000f3f","00000000-0000-0000-0000-0000000001e1","00000000-0000-0000-0000-0000000007e2","00000000-0000-0000-0000-000000000097",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000f5a","00000000-0000-0000-0000-0000000001ec","00000000-0000-0000-0000-0000000007e2","00000000-0000-0000-0000-000000000097",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000f69","00000000-0000-0000-0000-0000000001f7","00000000-0000-0000-0000-0000000007e2","00000000-0000-0000-0000-000000000097",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000f80","00000000-0000-0000-0000-00000000020d","00000000-0000-0000-0000-0000000007e2","00000000-0000-0000-0000-000000000097",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000f8f","00000000-0000-0000-0000-000000000218","00000000-0000-0000-0000-0000000007e2","00000000-0000-0000-0000-000000000097",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000f9e","00000000-0000-0000-0000-000000000202","00000000-0000-0000-0000-0000000007e2","00000000-0000-0000-0000-000000000097",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000fb7","00000000-0000-0000-0000-00000000022e","00000000-0000-0000-0000-0000000007e2","00000000-0000-0000-0000-000000000097",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000fc6","00000000-0000-0000-0000-000000000223","00000000-0000-0000-0000-0000000007e2","00000000-0000-0000-0000-000000000097",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000fdd","00000000-0000-0000-0000-000000000239","00000000-0000-0000-0000-0000000007e2","00000000-0000-0000-0000-000000000097",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000fec","00000000-0000-0000-0000-000000000244","00000000-0000-0000-0000-0000000007e2","00000000-0000-0000-0000-000000000097",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000001005","00000000-0000-0000-0000-00000000024f","00000000-0000-0000-0000-0000000007e2","00000000-0000-0000-0000-000000000097",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-00000000101e","00000000-0000-0000-0000-000000000189","00000000-0000-0000-0000-0000000009a1","00000000-0000-0000-0000-00000000011b",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000001031","00000000-0000-0000-0000-000000000189","00000000-0000-0000-0000-000000000a38","00000000-0000-0000-0000-00000000013c",0,'' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-000000000194","00000000-0000-0000-0000-000000000194",0,"00000000-0000-0000-0000-000000000acf","00000000-0000-0000-0000-0000000004eb","00000000-0000-0000-0000-0000000004f8","00000000-0000-0000-0000-0000000004ef","00000000-0000-0000-0000-000000000c72","00000000-0000-0000-0000-000000000c84","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-000000000194","00000000-0000-0000-0000-000000000194",0,"00000000-0000-0000-0000-000000000acf","00000000-0000-0000-0000-0000000004d6","00000000-0000-0000-0000-0000000004e3","00000000-0000-0000-0000-0000000004da","00000000-0000-0000-0000-000000000c8b","00000000-0000-0000-0000-000000000c9d","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-00000000017e","00000000-0000-0000-0000-00000000011b",0,"00000000-0000-0000-0000-0000000009a1","00000000-0000-0000-0000-00000000049c","00000000-0000-0000-0000-0000000004bc","00000000-0000-0000-0000-0000000004a0","00000000-0000-0000-0000-000000000c9e","00000000-0000-0000-0000-000000000cb0","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-00000000017e","00000000-0000-0000-0000-00000000013c",0,"00000000-0000-0000-0000-000000000a38","00000000-0000-0000-0000-00000000049c","00000000-0000-0000-0000-0000000004bc","00000000-0000-0000-0000-0000000004a9","00000000-0000-0000-0000-000000000cb1","00000000-0000-0000-0000-000000000cc3","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-000000000168","00000000-0000-0000-0000-000000000173",0,"00000000-0000-0000-0000-000000000a9d","00000000-0000-0000-0000-0000000003aa","00000000-0000-0000-0000-0000000003ae","00000000-0000-0000-0000-0000000003b7","00000000-0000-0000-0000-000000000cce","00000000-0000-0000-0000-000000000ce0","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-000000000168","00000000-0000-0000-0000-00000000015d",0,"00000000-0000-0000-0000-000000000a5c","00000000-0000-0000-0000-000000000395","00000000-0000-0000-0000-0000000003a2","00000000-0000-0000-0000-000000000399","00000000-0000-0000-0000-000000000ce7","00000000-0000-0000-0000-000000000cf9","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-000000000152","00000000-0000-0000-0000-000000000055",0,"00000000-0000-0000-0000-00000000069e","00000000-0000-0000-0000-000000000370","00000000-0000-0000-0000-000000000390","00000000-0000-0000-0000-000000000374","00000000-0000-0000-0000-000000000cfa","00000000-0000-0000-0000-000000000d0c","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-000000000152","00000000-0000-0000-0000-000000000147",0,"00000000-0000-0000-0000-000000000a40","00000000-0000-0000-0000-000000000370","00000000-0000-0000-0000-000000000390","00000000-0000-0000-0000-00000000037d","00000000-0000-0000-0000-000000000d0d","00000000-0000-0000-0000-000000000d1f","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-000000000110","00000000-0000-0000-0000-000000000105",0,"00000000-0000-0000-0000-00000000093d","00000000-0000-0000-0000-000000000477","00000000-0000-0000-0000-000000000497","00000000-0000-0000-0000-00000000047b","00000000-0000-0000-0000-000000000d22","00000000-0000-0000-0000-000000000d34","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-000000000110","00000000-0000-0000-0000-0000000000fa",0,"00000000-0000-0000-0000-000000000935","00000000-0000-0000-0000-000000000477","00000000-0000-0000-0000-000000000497","00000000-0000-0000-0000-000000000484","00000000-0000-0000-0000-000000000d35","00000000-0000-0000-0000-000000000d47","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-000000000105","00000000-0000-0000-0000-0000000000ef",0,"00000000-0000-0000-0000-00000000092d","00000000-0000-0000-0000-000000000462","00000000-0000-0000-0000-00000000046f","00000000-0000-0000-0000-000000000466","00000000-0000-0000-0000-000000000d50","00000000-0000-0000-0000-000000000d62","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-0000000000e4","00000000-0000-0000-0000-0000000000ad",0,"00000000-0000-0000-0000-000000000875","00000000-0000-0000-0000-00000000044d","00000000-0000-0000-0000-00000000045a","00000000-0000-0000-0000-000000000451","00000000-0000-0000-0000-000000000d69","00000000-0000-0000-0000-000000000d7b","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-0000000000d9",0,"00000000-0000-0000-0000-0000000008bf","00000000-0000-0000-0000-000000000331","00000000-0000-0000-0000-000000000335","00000000-0000-0000-0000-00000000033e","00000000-0000-0000-0000-000000000d82","00000000-0000-0000-0000-000000000d94","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-0000000000d9",0,"00000000-0000-0000-0000-0000000008bf","00000000-0000-0000-0000-000000000346","00000000-0000-0000-0000-000000000353","00000000-0000-0000-0000-00000000034a","00000000-0000-0000-0000-000000000d82","00000000-0000-0000-0000-000000000dad","00000000-0000-0000-0000-000000000d94",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-0000000000d9",0,"00000000-0000-0000-0000-0000000008bf","00000000-0000-0000-0000-0000000003d4","00000000-0000-0000-0000-0000000003d8","00000000-0000-0000-0000-0000000003e1","00000000-0000-0000-0000-000000000d82","00000000-0000-0000-0000-000000000dc6","00000000-0000-0000-0000-000000000dad",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-0000000000d9",0,"00000000-0000-0000-0000-0000000008bf","00000000-0000-0000-0000-0000000003e9","00000000-0000-0000-0000-0000000003ed","00000000-0000-0000-0000-0000000003f6","00000000-0000-0000-0000-000000000d82","00000000-0000-0000-0000-000000000ddf","00000000-0000-0000-0000-000000000dc6",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-0000000000ce","00000000-0000-0000-0000-0000000000ad",0,"00000000-0000-0000-0000-000000000875","00000000-0000-0000-0000-000000000428","00000000-0000-0000-0000-000000000448","00000000-0000-0000-0000-00000000042c","00000000-0000-0000-0000-000000000de0","00000000-0000-0000-0000-000000000df2","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-0000000000ce","00000000-0000-0000-0000-0000000000c3",0,"00000000-0000-0000-0000-00000000088f","00000000-0000-0000-0000-000000000428","00000000-0000-0000-0000-000000000448","00000000-0000-0000-0000-000000000435","00000000-0000-0000-0000-000000000df3","00000000-0000-0000-0000-000000000e05","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-0000000000ad","00000000-0000-0000-0000-00000000008c",0,"00000000-0000-0000-0000-0000000007cd","00000000-0000-0000-0000-000000000413","00000000-0000-0000-0000-000000000420","00000000-0000-0000-0000-000000000417","00000000-0000-0000-0000-000000000e10","00000000-0000-0000-0000-000000000e22","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-000000000126","00000000-0000-0000-0000-000000000097",0,"00000000-0000-0000-0000-0000000007e2","00000000-0000-0000-0000-000000000515","00000000-0000-0000-0000-000000000522","00000000-0000-0000-0000-000000000519","00000000-0000-0000-0000-000000000e27","00000000-0000-0000-0000-000000000e35","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-0000000000a2","00000000-0000-0000-0000-000000000097",0,"00000000-0000-0000-0000-0000000007e2","00000000-0000-0000-0000-000000000515","00000000-0000-0000-0000-00000000052b","00000000-0000-0000-0000-000000000519","00000000-0000-0000-0000-000000000e36","00000000-0000-0000-0000-000000000e44","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-000000000081","00000000-0000-0000-0000-00000000008c",0,"00000000-0000-0000-0000-0000000007cd","00000000-0000-0000-0000-0000000003fe","00000000-0000-0000-0000-000000000402","00000000-0000-0000-0000-00000000040b","00000000-0000-0000-0000-000000000e4f","00000000-0000-0000-0000-000000000e61","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-000000000076","00000000-0000-0000-0000-00000000006b",0,"00000000-0000-0000-0000-00000000076e","00000000-0000-0000-0000-00000000030c","00000000-0000-0000-0000-00000000032c","00000000-0000-0000-0000-000000000310","00000000-0000-0000-0000-000000000e62","00000000-0000-0000-0000-000000000e74","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-000000000076","00000000-0000-0000-0000-000000000060",0,"00000000-0000-0000-0000-00000000070a","00000000-0000-0000-0000-00000000030c","00000000-0000-0000-0000-00000000032c","00000000-0000-0000-0000-000000000319","00000000-0000-0000-0000-000000000e75","00000000-0000-0000-0000-000000000e87","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-000000000055",0,"00000000-0000-0000-0000-00000000069e","00000000-0000-0000-0000-0000000002f7","00000000-0000-0000-0000-0000000002fb","00000000-0000-0000-0000-000000000304","00000000-0000-0000-0000-000000000e92","00000000-0000-0000-0000-000000000ea4","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-000000000034","00000000-0000-0000-0000-000000000131",0,"00000000-0000-0000-0000-000000000a30","00000000-0000-0000-0000-00000000035b","00000000-0000-0000-0000-00000000035f","00000000-0000-0000-0000-000000000368","00000000-0000-0000-0000-000000000eab","00000000-0000-0000-0000-000000000ebd","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-000000000034","00000000-0000-0000-0000-000000000029",0,"00000000-0000-0000-0000-00000000060a","00000000-0000-0000-0000-0000000002e2","00000000-0000-0000-0000-0000000002ef","00000000-0000-0000-0000-0000000002e6","00000000-0000-0000-0000-000000000ec4","00000000-0000-0000-0000-000000000ed6","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-00000000019f","00000000-0000-0000-0000-000000000126",0,"00000000-0000-0000-0000-000000000e27","00000000-0000-0000-0000-000000000533","00000000-0000-0000-0000-000000000540","00000000-0000-0000-0000-000000000537","00000000-0000-0000-0000-000000000edb","00000000-0000-0000-0000-000000000ee9","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-0000000001aa","00000000-0000-0000-0000-000000000126",0,"00000000-0000-0000-0000-000000000e27","00000000-0000-0000-0000-000000000533","00000000-0000-0000-0000-000000000549","00000000-0000-0000-0000-000000000537","00000000-0000-0000-0000-000000000eea","00000000-0000-0000-0000-000000000ef8","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-0000000001b5","00000000-0000-0000-0000-000000000126",0,"00000000-0000-0000-0000-000000000e27","00000000-0000-0000-0000-000000000533","00000000-0000-0000-0000-000000000552","00000000-0000-0000-0000-000000000537","00000000-0000-0000-0000-000000000ef9","00000000-0000-0000-0000-000000000f07","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-0000000001cb","00000000-0000-0000-0000-0000000001b5",0,"00000000-0000-0000-0000-000000000ef9","00000000-0000-0000-0000-00000000055a","00000000-0000-0000-0000-000000000567","00000000-0000-0000-0000-00000000055e","00000000-0000-0000-0000-000000000f12","00000000-0000-0000-0000-000000000f20","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-0000000001d6","00000000-0000-0000-0000-0000000001b5",0,"00000000-0000-0000-0000-000000000ef9","00000000-0000-0000-0000-00000000055a","00000000-0000-0000-0000-000000000570","00000000-0000-0000-0000-00000000055e","00000000-0000-0000-0000-000000000f21","00000000-0000-0000-0000-000000000f2f","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-0000000001c0","00000000-0000-0000-0000-0000000001b5",0,"00000000-0000-0000-0000-000000000ef9","00000000-0000-0000-0000-00000000055a","00000000-0000-0000-0000-000000000579","00000000-0000-0000-0000-00000000055e","00000000-0000-0000-0000-000000000f30","00000000-0000-0000-0000-000000000f3e","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-0000000001e1","00000000-0000-0000-0000-0000000001b5",0,"00000000-0000-0000-0000-000000000ef9","00000000-0000-0000-0000-00000000055a","00000000-0000-0000-0000-000000000582","00000000-0000-0000-0000-00000000055e","00000000-0000-0000-0000-000000000f3f","00000000-0000-0000-0000-000000000f4d","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-0000000001ec","00000000-0000-0000-0000-0000000001cb",0,"00000000-0000-0000-0000-000000000f12","00000000-0000-0000-0000-0000000005ed","00000000-0000-0000-0000-0000000005fa","00000000-0000-0000-0000-0000000005f1","00000000-0000-0000-0000-000000000f5a","00000000-0000-0000-0000-000000000f68","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-0000000001f7","00000000-0000-0000-0000-0000000001cb",0,"00000000-0000-0000-0000-000000000f12","00000000-0000-0000-0000-0000000005ed","00000000-0000-0000-0000-000000000603","00000000-0000-0000-0000-0000000005f1","00000000-0000-0000-0000-000000000f69","00000000-0000-0000-0000-000000000f77","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-00000000020d","00000000-0000-0000-0000-0000000001b5",0,"00000000-0000-0000-0000-000000000ef9","00000000-0000-0000-0000-00000000058a","00000000-0000-0000-0000-000000000597","00000000-0000-0000-0000-00000000058e","00000000-0000-0000-0000-000000000f80","00000000-0000-0000-0000-000000000f8e","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-000000000218","00000000-0000-0000-0000-0000000001b5",0,"00000000-0000-0000-0000-000000000ef9","00000000-0000-0000-0000-00000000058a","00000000-0000-0000-0000-0000000005a0","00000000-0000-0000-0000-00000000058e","00000000-0000-0000-0000-000000000f8f","00000000-0000-0000-0000-000000000f9d","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-000000000202","00000000-0000-0000-0000-0000000001b5",0,"00000000-0000-0000-0000-000000000ef9","00000000-0000-0000-0000-00000000058a","00000000-0000-0000-0000-0000000005a9","00000000-0000-0000-0000-00000000058e","00000000-0000-0000-0000-000000000f9e","00000000-0000-0000-0000-000000000fac","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-00000000022e","00000000-0000-0000-0000-0000000001b5",0,"00000000-0000-0000-0000-000000000ef9","00000000-0000-0000-0000-0000000005b1","00000000-0000-0000-0000-0000000005be","00000000-0000-0000-0000-0000000005b5","00000000-0000-0000-0000-000000000fb7","00000000-0000-0000-0000-000000000fc5","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-000000000223","00000000-0000-0000-0000-0000000001b5",0,"00000000-0000-0000-0000-000000000ef9","00000000-0000-0000-0000-0000000005b1","00000000-0000-0000-0000-0000000005c7","00000000-0000-0000-0000-0000000005b5","00000000-0000-0000-0000-000000000fc6","00000000-0000-0000-0000-000000000fd4","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-000000000239","00000000-0000-0000-0000-0000000001b5",0,"00000000-0000-0000-0000-000000000ef9","00000000-0000-0000-0000-0000000005cf","00000000-0000-0000-0000-0000000005dc","00000000-0000-0000-0000-0000000005d3","00000000-0000-0000-0000-000000000fdd","00000000-0000-0000-0000-000000000feb","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-000000000244","00000000-0000-0000-0000-0000000001b5",0,"00000000-0000-0000-0000-000000000ef9","00000000-0000-0000-0000-0000000005cf","00000000-0000-0000-0000-0000000005e5","00000000-0000-0000-0000-0000000005d3","00000000-0000-0000-0000-000000000fec","00000000-0000-0000-0000-000000000ffa","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-00000000024f","00000000-0000-0000-0000-00000000020d",0,"00000000-0000-0000-0000-000000000f80","00000000-0000-0000-0000-000000000500","00000000-0000-0000-0000-000000000504","00000000-0000-0000-0000-00000000050d","00000000-0000-0000-0000-000000001005","00000000-0000-0000-0000-000000001017","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-000000000189","00000000-0000-0000-0000-00000000017e",0,"00000000-0000-0000-0000-000000000c9e","00000000-0000-0000-0000-0000000004c1","00000000-0000-0000-0000-0000000004ce","00000000-0000-0000-0000-0000000004c5","00000000-0000-0000-0000-00000000101e","00000000-0000-0000-0000-000000001030","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-000000000189","00000000-0000-0000-0000-00000000017e",0,"00000000-0000-0000-0000-000000000cb1","00000000-0000-0000-0000-0000000004c1","00000000-0000-0000-0000-0000000004ce","00000000-0000-0000-0000-0000000004c5","00000000-0000-0000-0000-000000001031","00000000-0000-0000-0000-000000001043","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-000000000acf","00000000-0000-0000-0000-000000000194",0,"00000000-0000-0000-0000-0000000004eb","00000000-0000-0000-0000-0000000004ef" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-000000000acf","00000000-0000-0000-0000-000000000194",0,"00000000-0000-0000-0000-0000000004d6","00000000-0000-0000-0000-0000000004da" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-0000000009a1","00000000-0000-0000-0000-00000000011b",0,"00000000-0000-0000-0000-00000000049c","00000000-0000-0000-0000-0000000004a0" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-000000000a38","00000000-0000-0000-0000-00000000013c",0,"00000000-0000-0000-0000-00000000049c","00000000-0000-0000-0000-0000000004a9" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-000000000a9d","00000000-0000-0000-0000-000000000173",0,"00000000-0000-0000-0000-0000000003aa","00000000-0000-0000-0000-0000000003b7" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-000000000a5c","00000000-0000-0000-0000-00000000015d",0,"00000000-0000-0000-0000-000000000395","00000000-0000-0000-0000-000000000399" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-00000000069e","00000000-0000-0000-0000-000000000055",0,"00000000-0000-0000-0000-000000000370","00000000-0000-0000-0000-000000000374" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-000000000a40","00000000-0000-0000-0000-000000000147",0,"00000000-0000-0000-0000-000000000370","00000000-0000-0000-0000-00000000037d" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-00000000093d","00000000-0000-0000-0000-000000000105",0,"00000000-0000-0000-0000-000000000477","00000000-0000-0000-0000-00000000047b" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-000000000935","00000000-0000-0000-0000-0000000000fa",0,"00000000-0000-0000-0000-000000000477","00000000-0000-0000-0000-000000000484" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-00000000092d","00000000-0000-0000-0000-0000000000ef",0,"00000000-0000-0000-0000-000000000462","00000000-0000-0000-0000-000000000466" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-000000000875","00000000-0000-0000-0000-0000000000ad",0,"00000000-0000-0000-0000-00000000044d","00000000-0000-0000-0000-000000000451" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-0000000008bf","00000000-0000-0000-0000-0000000000d9",0,"00000000-0000-0000-0000-000000000331","00000000-0000-0000-0000-00000000033e" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-0000000008bf","00000000-0000-0000-0000-0000000000d9",0,"00000000-0000-0000-0000-000000000346","00000000-0000-0000-0000-00000000034a" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-0000000008bf","00000000-0000-0000-0000-0000000000d9",0,"00000000-0000-0000-0000-0000000003d4","00000000-0000-0000-0000-0000000003e1" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-0000000008bf","00000000-0000-0000-0000-0000000000d9",0,"00000000-0000-0000-0000-0000000003e9","00000000-0000-0000-0000-0000000003f6" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-000000000875","00000000-0000-0000-0000-0000000000ad",0,"00000000-0000-0000-0000-000000000428","00000000-0000-0000-0000-00000000042c" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-00000000088f","00000000-0000-0000-0000-0000000000c3",0,"00000000-0000-0000-0000-000000000428","00000000-0000-0000-0000-000000000435" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-0000000007cd","00000000-0000-0000-0000-00000000008c",0,"00000000-0000-0000-0000-000000000413","00000000-0000-0000-0000-000000000417" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-0000000007e2","00000000-0000-0000-0000-000000000097",0,"00000000-0000-0000-0000-000000000515","00000000-0000-0000-0000-000000000519" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-0000000007cd","00000000-0000-0000-0000-00000000008c",0,"00000000-0000-0000-0000-0000000003fe","00000000-0000-0000-0000-00000000040b" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-00000000076e","00000000-0000-0000-0000-00000000006b",0,"00000000-0000-0000-0000-00000000030c","00000000-0000-0000-0000-000000000310" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-00000000070a","00000000-0000-0000-0000-000000000060",0,"00000000-0000-0000-0000-00000000030c","00000000-0000-0000-0000-000000000319" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-00000000069e","00000000-0000-0000-0000-000000000055",0,"00000000-0000-0000-0000-0000000002f7","00000000-0000-0000-0000-000000000304" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-000000000a30","00000000-0000-0000-0000-000000000131",0,"00000000-0000-0000-0000-00000000035b","00000000-0000-0000-0000-000000000368" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-00000000060a","00000000-0000-0000-0000-000000000029",0,"00000000-0000-0000-0000-0000000002e2","00000000-0000-0000-0000-0000000002e6" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-000000000e27","00000000-0000-0000-0000-000000000126",0,"00000000-0000-0000-0000-000000000533","00000000-0000-0000-0000-000000000537" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-000000000ef9","00000000-0000-0000-0000-0000000001b5",0,"00000000-0000-0000-0000-00000000055a","00000000-0000-0000-0000-00000000055e" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-000000000f12","00000000-0000-0000-0000-0000000001cb",0,"00000000-0000-0000-0000-0000000005ed","00000000-0000-0000-0000-0000000005f1" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-000000000ef9","00000000-0000-0000-0000-0000000001b5",0,"00000000-0000-0000-0000-00000000058a","00000000-0000-0000-0000-00000000058e" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-000000000ef9","00000000-0000-0000-0000-0000000001b5",0,"00000000-0000-0000-0000-0000000005b1","00000000-0000-0000-0000-0000000005b5" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-000000000ef9","00000000-0000-0000-0000-0000000001b5",0,"00000000-0000-0000-0000-0000000005cf","00000000-0000-0000-0000-0000000005d3" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-000000000f80","00000000-0000-0000-0000-00000000020d",0,"00000000-0000-0000-0000-000000000500","00000000-0000-0000-0000-00000000050d" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-000000000c9e","00000000-0000-0000-0000-00000000017e",0,"00000000-0000-0000-0000-0000000004c1","00000000-0000-0000-0000-0000000004c5" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-000000000cb1","00000000-0000-0000-0000-00000000017e",0,"00000000-0000-0000-0000-0000000004c1","00000000-0000-0000-0000-0000000004c5" );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-00000000062c","00000000-0000-0000-0000-000000000034",'Create_Relationships','',"ba5eda7a-def5-0000-0000-000000000000",0,'#-------------------------------------------------------------------#
#
# Create relationships
#
# The architecture shall provide a mechanism to allow creation of a
# simple relationship link between two object instances
# 1241-0000-01-603
#
# The architecture shall provide operations which, given a starting 
# instance handle and a relationship specification, return a single
# handle of the related instances
# 1241-0000-01-0701
#
# The architectureshall support a translation of the ASL link 
# statement to map to the mechanism that allows creation of a 
# relationship link between two object instances
# 1241-0000-01-1202
#
# The architecture shall support a translation of the ASL navigate
# statment to map to the mechanism that allows the traversal of
# relationship links
# 1241-0000-01-1205
#
#-------------------------------------------------------------------#

[] = RPT1:Start_Test     [Test, "1241-0000-01-0603", "Relationships", "objB", "Create relationships"]
[] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]


Has_Failed = TRUE

# Find the desired instances for Object_A
firstA = find-one Object_A where idA = 1
thirdA = find-one Object_A where idA = 3

# Find the desired instances for Object_B 
firstB  = find-one Object_B where idB = 1
fourthB = find-one Object_B where idB = 4

# Find the desired instances for Object_M
secondM = find-one Object_M where idM = 2
thirdM  = find-one Object_M where idM = 3

# Create normal 1:1 relationships
link firstA R1 firstB
link thirdA R1 fourthB
link fourthB R18 thirdM  

# Create a couple of instances to prove the relationships
# For coding purposes, it is necessary to overspecify
# the relationship.

InstA = firstB -> R1.Object_A
InstB = thirdA -> R1.Object_B 

# Now check that the navigations can be performed
if InstA != UNDEFINED & InstB != UNDEFINED then
   Has_Failed = FALSE
endif

#-------------------------------------------------------------------#
# Test complete
#-------------------------------------------------------------------#

if Has_Failed then
   [] = RPT3:Test_Failed["objB", Test, -1]
else
   [] = RPT2:Test_Passed["objB", Test, 0]
endif

#-------------------------------------------------------------------#',3,'',"00000000-0000-0000-0000-000000000000",2,1 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-00000000062e","00000000-0000-0000-0000-000000000034",'ObjB_Navigation','',"ba5eda7a-def5-0000-0000-000000000000",0,'#-------------------------------------------------------------------#
#
# Normal navigation
#
# The architecture shall implement simple 1:1 relationships
# 1241-0000-01-0601
# 
# Given a starting instance handle and a relationship specification
# return a single handle of the related instance
# 1241-0000-01-0701
#
# The architecture shall support chains of navigations
# 1241-0000-10-0704
#
# The architecture shall support a translation of the ASL navigate
# statment to map to the mechanism that allows the traversal of
# relationship links
# 1241-0000-01-1205
#
#-------------------------------------------------------------------#

# Initialise the all variables

Supported        = TRUE
Has_Failed       = FALSE
The_Result       = 0

#-------------------------------------------------------------------#

#Find the desired instances for Object_A
firstA = find-one Object_A where idA = 1
thirdA = find-one Object_A where idA = 3

#Find the desired instances for Object_B
firstB  = find-one Object_B where idB = 1
fourthB = find-one Object_B where idB = 4
fifthB  = find-one Object_B where idB = 5

#Find the desired instances for Object_M
secondM = find-one Object_M where idM = 2
thirdM  = find-one Object_M where idM = 3

[Host] = WAW1:What_Env[]

#-------------------------------------------------------------------#
# Test 1 - Navigate from first instance of Object_B to Object_A using 
#          relationship number
#-------------------------------------------------------------------#

   if Iteration = 1 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0701", "Relationships", "objB", "Navigate from Obj B to Obj A"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0601"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      # Perform the navigation
      InstA = firstB -> R1.Object_A

      # Check the result of the navigation
      if InstA = UNDEFINED then
         Has_Failed = TRUE
      else

         if InstA.idA != 1 then
            Has_Failed = TRUE
            The_Result = InstA.idA
         else
            The_Result = InstA.idA
         endif

      endif

   endif

# End Test 1

#-------------------------------------------------------------------#
# Test 2 - Navigate from fourh instance of Object_B to Object_M using 
#          relationship number
#-------------------------------------------------------------------#

   if Iteration = 2 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0701", "Relationships", "objB", "Navigate from Obj B to Obj M"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0601"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      # Perform the navigation
      InstM = fourthB -> R18.Object_M

      # Check the result of the navigation
      if InstM = UNDEFINED then
         Has_Failed = TRUE
      else

         if InstM.idM != 3 then
            Has_Failed = TRUE
            The_Result = InstM.idM
         else
            The_Result = InstM.idM
         endif

      endif

   endif

# End Test 2

#-------------------------------------------------------------------#
# Test 3 - Navigate from third instance of Object_A to Object_B using 
#          relationship number
#-------------------------------------------------------------------#

   if Iteration = 3 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0701", "Relationships", "objB", "Navigate from Obj A to Obj B"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0601"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      # Perform the navigation
      InstB = thirdA -> R1.Object_B

      #Check the result of the navigation
      if InstB = UNDEFINED then
         Has_Failed = TRUE
      else

         if InstB.idB != 4 then
            Has_Failed = TRUE
            The_Result = InstB.idB
         else
            The_Result = InstB.idB
         endif

      endif

   endif

# End Test 3

#-------------------------------------------------------------------#
# Test 4 - Navigate from third instance of Object_M to Object_B using 
#          relationship number
#-------------------------------------------------------------------#

   if Iteration = 4 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0701", "Relationships", "objB", "Navigate from Obj M to Obj B"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0601"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      # Perform the navigation
      InstB = thirdM -> R18.Object_B

      # Check the result of the navigation
      if InstB = UNDEFINED then
         Has_Failed = TRUE
      else

         if InstB.idB != 4 then
            Has_Failed = TRUE
            The_Result = InstB.idB
         else
            The_Result = InstB.idB
         endif

      endif

   endif

# End Test 4

#-------------------------------------------------------------------#
# Test 5 - Navigate from fourth instance of Object_B to Object_A 
#          using relationship role. 
#          This is not currently supported by the WACA
#-------------------------------------------------------------------#

   if Iteration = 5 then

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objB", "Relationship navigation with role"]

      # Perform the navigation
      InstA = fourthB -> R1."May_have_a".Object_A

      # Check the result of the navigation. Role navigation is only
      # supported with reflexive navigations. So should return an 
      # undefined instance.

      if Host = "ISIM" then
         Supported = FALSE
      else

         if InstA = UNDEFINED then
            Has_Failed = FALSE
         else
            Has_Failed = TRUE
            The_Result = InstA.idA
         endif

      endif

   endif

# End Test 5

#-------------------------------------------------------------------#
# Test 6 - Attempt to perform a navigation on instance that is not 
#          linked to another instance
#-------------------------------------------------------------------#

   if Iteration = 6 then

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objB", "Navigate non-linked relationship"]

      # Fifth B is not currently linked to any instances of Object A.
      # Perform the navigation
      InstA = fifthB -> R1.Object_A

      #Check the result of the navigation
      if InstA != UNDEFINED then
         Has_Failed = TRUE
         The_Result = InstA.idA
      endif
 
   endif

# End Test 6

#-------------------------------------------------------------------#
# Test 7 - Perform a chained navigation from the third instance of
#          Object_A through Object_B and finish at Object_M
#-------------------------------------------------------------------#

   if Iteration = 7 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0704", "Relationships", "objB", "Navigate from A to B to M"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0601"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      InstM = thirdA -> R1.Object_B -> R18.Object_M  

      # Check the result of the navigation
      if InstM = UNDEFINED then
         Has_Failed = TRUE
      else

         if InstM.idM != 3 then
            Has_Failed = TRUE
            The_Result = InstM.idM
         else
            The_Result = InstM.idM
         endif

      endif

   endif

# End Test 7

#-------------------------------------------------------------------#
# Test 8 - Perform a chained navigation starting at the first 
#          instance of Object_A and returning back to Object_A via
#          Object_B
#-------------------------------------------------------------------#

   if Iteration = 8 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0704", "Relationships", "objB", "Navigate from A to B to A"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0601"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      InstA = firstA -> R1.Object_B -> R1.Object_A

      # Check the result of the navigation
      if InstA = UNDEFINED then
         Has_Failed = TRUE
      else

         if InstA.idA != 1 then
            Has_Failed = TRUE
            The_Result = InstA.idA
         else
            The_Result = InstA.idA
         endif

      endif

   endif  

# End Test 8 


#-------------------------------------------------------------------#
# Test 9 - Perform a chained navigation starting at the third 
#          instance of Object_M and navigating to Object_A via
#          Object_B
#-------------------------------------------------------------------#
   if Iteration = 9 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0704", "Relationships", "objB", "Navigate from M to B to A"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0601"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      InstA = thirdM -> R18.Object_B -> R1.Object_A

      # Check the result of the navigation
      if InstA = UNDEFINED then
         Has_Failed = TRUE
      else

         if InstA.idA != 3 then
            Has_Failed = TRUE
            The_Result = InstA.idA
         else
            The_Result = InstA.idA
         endif

      endif

   endif  

# End Test 9

#-------------------------------------------------------------------#
# Test 10 - Perform a chained navigation starting at the third 
#           instance of Object_M and returning back to Object_M via
#           Object_B
#-------------------------------------------------------------------#

   if Iteration = 10 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0704", "Relationships", "objB", "Navigate from M to B to M"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0601"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      InstM = thirdM -> R18.Object_B -> R18.Object_M

      # Check the result of the navigation
      if InstM = UNDEFINED then
         Has_Failed = TRUE
      else

         if InstM.idM != 3 then
            Has_Failed = TRUE
            The_Result = InstM.idM
         else
            The_Result = InstM.idM
         endif

      endif

   endif  

# End Test 10

#-------------------------------------------------------------------#
# Test 11 - Perform a chained navigation starting at the fourth 
#           instance of Object_B and returning back to Object_B via
#           Object_M
#-------------------------------------------------------------------#

   if Iteration = 11 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0704", "Relationships", "objB", "Navigate from B to M to B"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0601"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      InstB = fourthB -> R18.Object_M -> R18.Object_B

      # Check the result of the navigation
      if InstB = UNDEFINED then
         Has_Failed = TRUE
      else

         if InstB.idB != 4 then
            Has_Failed = TRUE
            The_Result = InstB.idB
         else
            The_Result = InstB.idB
         endif

      endif

   endif  

# End Test 11

#-------------------------------------------------------------------#
# Test 12 - Perform a chained navigation starting at the fourth 
#           instance of Object_B and returning back to Object_B via
#           Object_A
#-------------------------------------------------------------------#

   if Iteration = 12 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0704", "Relationships", "objB", "Navigate from B to A to B"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0601"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      InstB = fourthB -> R1.Object_A -> R1.Object_B

      # Check the result of the navigation
      if InstB = UNDEFINED then
         Has_Failed = TRUE
      else

         if InstB.idB != 4 then
            Has_Failed = TRUE
            The_Result = InstB.idB
         else
            The_Result = InstB.idB
         endif

      endif

   endif  

# End Test 12

#-------------------------------------------------------------------#
# Test 13 - Attempt to navigate to Object_M from Object_B through a 
#           link thats not yet been established
#-------------------------------------------------------------------#

   if Iteration = 13 then

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objB", "Navigate to M when not linked to B"]

      InstM = firstB -> R18.Object_M

      if InstM != UNDEFINED then
         Has_Failed = TRUE
         The_Result = InstM.idM
      endif

   endif

# End Test 13

#-------------------------------------------------------------------#
# Test 14 - Attempt to navigate from Object_M to Object_B via a link
#           that has not been established
#-------------------------------------------------------------------#

   if Iteration = 14 then

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objB", "B to M while not linked"]

      InstB = secondM -> R18.Object_B

      if InstB != UNDEFINED then
         Has_Failed = TRUE
         The_Result = InstB.idB
      endif

   endif

# End Test 14

#-------------------------------------------------------------------#
# Tests complete
#-------------------------------------------------------------------#

# If the test is supported
if Supported = TRUE then

   if Has_Failed = FALSE then
      [] = RPT2:Test_Passed["objB", Test, The_Result]
   else
      [] = RPT3:Test_Failed["objB", Test, The_Result]
   endif

else
   [] = RPT4:Test_Unsupported[Test]
endif

#-------------------------------------------------------------------#',3,'',"00000000-0000-0000-0000-00000000062c",2,2 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-000000000631","00000000-0000-0000-0000-000000000034",'Delete_Relationships','',"ba5eda7a-def5-0000-0000-000000000000",0,'# -------------------------------------------------------------------#
#
# Delete all relationships
#
# The architecture shall provide a mapping from the ASL delete 
# instance statement to the deletion mechanism
# 1241-0000-01-0121
#
# The architecture shall provide a mechanism to allow deletion of a 
# simple relationship link between two object instances
# 1241-0000-01-0604
#
# The architecture shall support a translation of the ASL unlink
# statement to map to the mechanism that allow the deletion of a 
# link between two objects in a relationship
# 1241-0000-01-1204
#
# The architecture shall support a translation of the ASL navigate
# statment to map to the mechanism that allows the traversal of
# relationship links
# 1241-0000-01-1205
#
# -------------------------------------------------------------------#

Has_Failed = TRUE

[] = RPT1:Start_Test [Test, "1241-0000-01-0604", "Relationships", "objB", "Delete all relationships"]
[] = RPT8:Specify_Requid[Test, "1241-0000-01-0121"]
[] = RPT8:Specify_Requid[Test, "1241-0000-01-1204"]
[] = RPT8:Specify_Requid[Test, "1103-0000-01-0621"]

# Find the desired instances of Object_A
firstA  = find-one Object_A where idA = 1
secondA = find-one Object_A where idA = 2
thirdA  = find-one Object_A where idA = 3
fourthA = find-one Object_A where idA = 4
fifthA  = find-one Object_A where idA = 5 

# Find the desired instances of Object_B
firstB  = find-one Object_B where idB = 1
secondB = find-one Object_B where idB = 2
thirdB  = find-one Object_B where idB = 3
fourthB = find-one Object_B where idB = 4
fifthB  = find-one Object_B where idB = 5

# Find the desired instances of Object_M
firstM  = find-one Object_M where idM = 1
secondM = find-one Object_M where idM = 2
thirdM  = find-one Object_M where idM = 3
fourthM = find-one Object_M where idM = 4
fifthM  = find-one Object_M where idM = 5

# Delete all relationships
unlink firstA  R1  firstB
unlink thirdA  R1  fourthB

unlink fourthB R18 thirdM

# Explicitly check that all instances have been unlinked
# correctly.

InstB1 = firstA -> R1.Object_B
InstB2 = thirdA -> R1.Object_B

InstM1 = firstB -> R18.Object_M
InstM2 = fourthB -> R18.Object_M

# Attempt to perform some illegal navigations

if InstB1 = UNDEFINED then

   if InstB2 = UNDEFINED then

      if InstM1 = UNDEFINED then

         if InstM2 = UNDEFINED then

            delete Object_A where idA = 1 
            delete Object_A where idA = 2
            delete Object_A where idA = 3
            delete Object_A where idA = 4
            delete Object_A where idA = 5

#            delete firstA
#            delete secondA
#            delete thirdA
#            delete fourthA
#            delete fifthA

            delete firstB
            delete secondB
            delete thirdB
            delete fourthB
            delete fifthB

            delete firstM
            delete secondM
            delete thirdM
            delete fourthM
            delete fifthM

            {SetA} = find-all Object_A
            {SetB} = find-all Object_B
            {SetM} = find-all Object_M

            if countof {SetA} = 0 then

               if countof {SetB} = 0 then

                  if countof {SetM} = 0 then
                     Has_Failed = FALSE
                  else
                     Has_Failed   = TRUE
                     Failure_Code = -10
                  endif

               else
                  Has_Failed   = TRUE
                  Failure_Code = -20
               endif

            else
               Has_Failed   = TRUE
               Failure_Code = -30
            endif

         else
            Failure_Code = -40
         endif

         Failure_Code = -50
      endif

      Failure_Code = -60
   endif

  Failure_Code = -70

endif

#-------------------------------------------------------------------#
# Test complete
#-------------------------------------------------------------------#

if Has_Failed then
   [] = RPT3:Test_Failed["objB", Test, Failure_Code]
else
   [] = RPT2:Test_Passed["objB", Test, 0]
endif

#-------------------------------------------------------------------#',3,'',"00000000-0000-0000-0000-00000000062e",2,3 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-0000000006b2","00000000-0000-0000-0000-000000000055",'Create_Relationships','',"ba5eda7a-def5-0000-0000-000000000000",0,'#-------------------------------------------------------------------#
#
# Create relationships
#
# The architecture shall implement simple 1:M relationships
# 1241-0000-01-0602
#
# The architecture shall provide a mechanism to allow creation of a 
# simple relationship link between two object instances
# 1241-0000-01-0603
#
# The architecture shall implement associative 1-1:M relationships
# 1241-0000-01-0609
#
# The architecture shall provide operations which, given a starting 
# instance handle and a relationship specification, return a single 
# handle of the related instance
# 1241-0000-01-0701
#
# The architecture shall provide operations which, given a starting 
# instance handle and a relationship specification, return a set of 
# handles of the related instance
# 1241-0000-01-0702
#
# The architectureshall support a translation of the ASL link 
# statement to map to the mechanism that allows creation of a 
# relationship link between two object instances
# 1241-0000-01-1202
#
#-------------------------------------------------------------------#
 
[] = RPT1:Start_Test     [Test, "1241-0000-01-0603", "Relationship", "objD", "Create relationships"]
[] = RPT8:Specify_Requid [Test, "1241-0000-01-0602"]
[] = RPT8:Specify_Requid [Test, "1241-0000-01-0609"]
[] = RPT8:Specify_Requid [Test, "1241-0000-01-1202"]
[] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
[] = RPT8:Specify_Requid [Test, "1103-0000-01-0612"]

# Find the desired instances for Object_C
firstC  = find-one Object_C where idC = 1
thirdC  = find-one Object_C where idC = 3
fourthC = find-one Object_C where idC = 4
fifthC  = find-one Object_C where idC = 5

# Find the desired instances for Object_D
firstD  = find-one Object_D where idD = 1
fourthD = find-one Object_D where idD = 4

# Find the desired instances for Object_O
secondO = find-one Object_O where idO = 2
thirdO  = find-one Object_O where idO = 3

# Find the desired instances for Object_Do
firstDO = find-one Object_DO where idDO = 1
fifthDO = find-one Object_DO where idDO = 5

# Create normal 1:Mc relationships
link firstD  R3 firstC
link firstD  R3 thirdC
link fourthD R3 fourthC
link fourthD R3 fifthC

# Create associative 1:M relationships
link firstD R19 secondO using firstDO
link firstD R19 thirdO  using fifthDO

#-------------------------------------------------------------------#
# Perform a navigation to ensure that linking has been succesfull
#-------------------------------------------------------------------#

InstD  = firstC -> R3.Object_D
{SetO} = firstD -> R19.Object_O

if InstD.idD = 1 then
   if countof {SetO} = 2 then
      [] = RPT2:Test_Passed["objD", Test, 0]
   else
      [] = RPT3:Test_Failed["objD", Test, -2]
   endif
else
   [] = RPT3:Test_Failed["objD", Test, -1]
endif

#-------------------------------------------------------------------#',3,'',"00000000-0000-0000-0000-000000000000",2,1 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-0000000006b4","00000000-0000-0000-0000-000000000055",'ObjD_Navigation','',"ba5eda7a-def5-0000-0000-000000000000",0,'#-------------------------------------------------------------------#
#
# Normal navigation
# 
# The architecture shall implement simple 1:M relationships
# 1241-0000-01-0602
#
# The architecture shall implement associative 1-1:M relationships
# 1241-0000-01-0609
#
# The architecture shall provide a mechanismto allow the creation of
# associative relationship link between two object instances and an
# associative instance
# 1241-0000-01-0611
#
# The architecture shall provide a mechanismto allow the deletion of
# an associative link between an associative object and the link 
# between two objects
# 1241-0000-01-0612
#
# The architecture shall provide a mechanism to allow the deletion of
# a link between two objects in an associative relationship
# 1241-0000-01-0613
#
# The architecture shall provide operations which, given a starting 
# instance handle and a relationshipspecification, return a single 
# handle of the related instance
# 1241-0000-01-0701
#
# The architecture shall provide operations which, given a starting 
# instance handle and a relationship specification , return a set of
# handles of the related instances
# 1241-0000-01-0703
#
# The architecture shall support chains of navigations expressed in 
# ASL
# 1241-0000-01-0704
#
# The architecture shall support navigations to associative objects
# expressed in ASL
# 1241-0000-01-0706
#
# The architecture shall support navigations from singly associative
# objects expressed in ASL
# 1241-0000-01-0707
#
# The architecture shall support a translation of the ASL link 
# statment to map to the mechanism that allows creation of a 
# relationship link between two object instances
# 1241-0000-01-1202
#
# The architecture shall support a translation of the ASL unassociate
# statment to map to the mechanism that allows the deletion of an 
# associative link between an associative object and the link between
# two objects
# 1241-0000-01-1203
#
# The architecture shall support a translation of the ASL unlink
# statement to map to the mechanism that allow the deletion of a 
# link between two objects in a relationship
# 1241-0000-01-1204
#
# The architecture shall support a translation of the ASL navigate
# statment to map to the mechanism that allows the traversal of
# relationship links
# 1241-0000-01-1205
#
#-------------------------------------------------------------------#

# Initialise the variables
Has_Failed       = FALSE
Supported        = TRUE
Failure_Code     = 0
Testing_For_What = "UNDEFINED"

[Host] = WAW1:What_Env[]

#-------------------------------------------------------------------#

# Find the desired instances for Object_C
firstC  = find-one Object_C where idC = 1
secondC = find-one Object_C where idC = 2
thirdC  = find-one Object_C where idC = 3
fourthC = find-one Object_C where idC = 4
fifthC  = find-one Object_C where idC = 5

# Find the desired instances for Object_D
firstD  = find-one Object_D where idD = 1 & Colour_Of_D = ''Red''
secondD = find-one Object_D where idD = 2 & Colour_Of_D = ''Red''
thirdD  = find-one Object_D where idD = 3 & Colour_Of_D = ''Red''
fourthD = find-one Object_D where idD = 4 & Colour_Of_D = ''Red''

# Find the desired instances for Object_O
secondO = find-one Object_O where idO = 2
thirdO  = find-one Object_O where idO = 3
fifthO  = find-one Object_O where idO = 5

# Find the desired instances for Object_DO
firstDO = find-one Object_DO where idDO = 1
thirdDO = find-one Object_DO where idDO = 3
fifthDO = find-one Object_DO where idDO = 5


#-------------------------------------------------------------------#
# Test 1 - Navigate from a single instance in Object_D to a set in 
#          Object_C
#-------------------------------------------------------------------#

   if Iteration = 1 then

      [] = RPT1:Start_Test [Test, "1241-0000-01-0602", "Relationships", "objD", "Simple navigation to set IH"]
      [] = RPT8:Specify_Requid [Test,"1241-0000-01-0702"]
      [] = RPT8:Specify_Requid [Test,"1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      # Perform the navigation
      {SetC} = firstD -> R3.Object_C

      # Check the results of the navigation
      if countof {SetC} != 2 then

         Failure_Code = -10
         Has_Failed   = TRUE

      else

         # Check the contents of the set
         Val1  = -20
         Val2  = -30

         for InstC in {SetC} do
         
            if InstC.idC = 1 then
               Val1  = InstC.idC
            endif

            if InstC.idC = 3 then
               Val2  = InstC.idC
            endif
 
         endfor

         # Check found values
         if Val1 = 1 then

            if Val2 = 3 then
               Has_Failed = FALSE
            else
               Has_Failed   = TRUE
               Failure_Code = Val2
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = Val1
         endif

      endif

   endif

# End Test 1

#-------------------------------------------------------------------#
# Test 2 - Relationship role, set of instance handles returned
#-------------------------------------------------------------------#

   if Iteration = 2 then

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objD", "Navigate to a set using role"]
      # Target object must be specified for WACA

      # Perform the navigation
      # Relationship Role is unsupported by the WACA so the set
      # returned should be empty. 
   
#      if Host = "WACA" then
         Supported = FALSE
#      else      
#         {SetC} = fourthD -> R3."Has_many".Object_C
#         CountC = countof {SetC}

         # Check the results of the navigation
#         if CountC != 0 then
#            Failure_Code = -10
#            Has_Failed   = TRUE
#         endif

#      endif
   
   endif

# End Test 2

#-------------------------------------------------------------------#
# Test 3 - Navigate from an instance of Object_D to a set of Object_O
#          ignoring the assocciative object DO
#-------------------------------------------------------------------#

   if Iteration = 3 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0702", "Relationships", "objD", "Navigate from ObjD to a set in ObjO"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-0609"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      # Perform the navigation
      {SetO} = firstD -> R19.Object_O

      # Check the results of the navigation
      if countof {SetO} != 2 then
         Failure_Code = -10
         Has_Failed   = TRUE

      else

         # Check the contents of the set
         Val1  = -20
         Val2  = -30

         for InstO in {SetO} do

            if InstO.idO = 2 then
               Val1  = InstO.idO
            endif  

            if InstO.idO = 3 then
               Val2  = InstO.idO
            endif  

         endfor

         # Check the values
         if Val1 = 2 then

            if Val2 = 3 then
               Has_Failed = FALSE
            else
               Has_Failed   = TRUE
               Failure_Code = Val2
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = Val1
         endif

      endif

   endif

# End Test 3

#-------------------------------------------------------------------#
# Test 4 - Navigate from a single instance of a set within Object_C
#          to an instance within Object_D
#-------------------------------------------------------------------#

   if Iteration = 4 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0701", "Relationships", "objD", "Navigate from Object C to Object D"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0602"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      # Perform the navigation
      InstD = thirdC -> R3.Object_D

      # Check the results of the navigation
      if InstD != UNDEFINED then

         if InstD.idD = 1 then

            if InstD.Colour_Of_D = ''Red'' then
               Has_Failed = FALSE
            else
               Failure_Code = -10
               Has_Failed   = TRUE
            endif

         else
            Failure_Code = InstD.idD
            Has_Failed   = TRUE
         endif

      else
         Failure_Code = -20
         Has_Failed   = TRUE
      endif

   endif

# End Test 4

#-------------------------------------------------------------------#
# Test 5 - Navigate from a single instance of a set within Object_O
#          to an instance within Object_D
#-------------------------------------------------------------------#

   if Iteration = 5 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0701", "Relationships", "objD", "Navigate from Object O to Object D"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0609"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      # Perform the navigation
      InstD = thirdO -> R19.Object_D

      # Check the results of the navigation
      if InstD != UNDEFINED then

         if InstD.idD = 1 then
            Has_Failed = FALSE
         else
            Failure_Code = InstD.idD
            Has_Failed   = TRUE
         endif

      else
         Failure_Code = -10
         Has_Failed   = TRUE       
      endif

   endif

# End Test 5

#-------------------------------------------------------------------#
# Test 6 -  Navigate from an instance of the associated object DO to 
#           an instance within object D
#-------------------------------------------------------------------#

   if Iteration = 6 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0707", "Relationships", "objD", "Nav from assoc object to ObjD"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0609"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      # Perform the navigation
      InstD = fifthDO -> R19.Object_D

      # Check the results of the navigation
      if InstD != UNDEFINED then

         if InstD.idD = 1 then
            Has_Failed = FALSE
         else
            Has_Failed   = TRUE
            Failure_Code = InstD.idD
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -10   
      endif

   endif

# End Test 6

#-------------------------------------------------------------------#
# Test 7 - Navigate from a set of one instance to a set of one 
#          instance
#-------------------------------------------------------------------#

   if Iteration = 7 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0703", "Relationships", "objD", "Navigate from set C to D"]

      link secondC R3 secondD

      {SetC} = find Object_C where idC = 2

      if countof {SetC} = 1 then

         {SetD} = {SetC} -> R3.Object_D

         if countof {SetD} != 1 then
            Has_Failed = TRUE
            Failure_Code = -20
         endif

      else
         Has_Failed = TRUE
         Failure_Code = -10
      endif

     unlink secondC R3 secondD

   endif

# End Test 7

#-------------------------------------------------------------------#
# Test 8 - Navigate from a set on the MANY side of the relationship
#-------------------------------------------------------------------#

   if Iteration = 8 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0703", "Relationships", "objD", "Navigate from set C to D"]

      Val1 = 0
      Val2 = 0

      {SetC} = firstD -> R3.Object_C

      if countof {SetC} = 2 then

         {SetD} = {SetC} -> R3.Object_D

         if countof {SetD} != 2 then
            Has_Failed = TRUE
            Failure_Code = -10
         else

            for tmpInst in {SetD} do

               if Val1 = 0 then
                  Val1 = tmpInst.idD
               else
                  Val2 = tmpInst.idD
               endif

            endfor

            if Val1 = 1 then
               if Val2 != 1 then
                  Has_Failed = TRUE
                  Failure_Code = -20
               endif
            else
               Has_Failed = TRUE
               Failure_Code = -30
            endif

         endif

      else

         Has_Failed = TRUE
         Failure_Code = -30
      endif

   endif

# End Test 8

#-------------------------------------------------------------------#
# Test 9 - Navigate from a set on the MANY side of the relationship
#-------------------------------------------------------------------#

   if Iteration = 9 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0703", "Relationships", "objD", "Navigate from set C to D"]

      Val1 = 0
      Val2 = 0
      Val3 = 0

      link secondC R3 secondD

      {SetC} = find Object_C where idC = 1 or idC = 2 or idC = 3

      if countof {SetC} = 3 then

         {SetD} = {SetC} -> R3.Object_D

         if countof {SetD} != 3 then
            Has_Failed = TRUE
            Failure_Code = countof {SetD}
         else

            for tmpInst in {SetD} do

               if Val1 = 0 then
                  Val1 = tmpInst.idD
               else
                  if Val2 = 0 then
                     Val2 = tmpInst.idD
                  else
                     Val3 = tmpInst.idD
                  endif
               endif

            endfor

            if Val1 = 1 & Val2 = 1 & Val3 = 2 then
               Has_Failed = FALSE
            else

               if Val1 = 1 & Val2 = 2 & Val3 = 1 then
                  Has_Failed = FALSE 
               else

                  if Val1 = 2 & Val2 = 1 & Val3 = 1 then
                     Has_Failed = FALSE
                  else
                     Has_Failed = TRUE
                     Failure_Code = -20
                  endif

               endif

            endif

         endif

      else

         Has_Failed = TRUE
         Failure_Code = -30
      endif

      unlink secondC R3 secondD

   endif

# End Test 9

#-------------------------------------------------------------------#
# Test 10 - Navigate from a set to a set in a one to many assoc 
#           relationship
#-------------------------------------------------------------------#

   if Iteration = 10 then

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objD", "Nav from set O to D"]

      Val1 = 0
      Val2 = 0

      {SetO} = firstD -> R19.Object_O

      if countof {SetO} = 2 then

         {SetD} = {SetO} -> R19.Object_D

         if countof {SetD} = 2 then

            for InstD in {SetD} do

               if Val1 = 0 then
                  Val1 = InstD.idD
               else
                  Val2 = InstD.idD
               endif

            endfor

            if Val1 != 1 | Val2 != 1 then
               Has_Failed = TRUE
               Failure_Code = -10
            endif

         else
            Has_Failed = TRUE
            Failure_Code = -20
         endif

      else
         Has_Failed = TRUE
         Failure_Code = -30
      endif

   endif

# End Test 10

#-------------------------------------------------------------------#
# Test 11 - Navigate from a set to a set in a one to many assoc 
#           relationship
#-------------------------------------------------------------------#

   if Iteration = 11 then

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objD", "Nav from set O to DO"]

      Val1 = 0
      Val2 = 0

      {SetO} = firstD -> R19.Object_O

      if countof {SetO} = 2 then

         {SetDO} = {SetO} -> R19.Object_DO

         if countof {SetDO} = 2 then

            for InstDO in {SetDO} do

               if Val1 = 0 then
                  Val1 = InstDO.idDO
               else
                  Val2 = InstDO.idDO
               endif

            endfor

            if Val1 = 1 & Val2 = 5 then
               Has_Failed = FALSE
            else
               if Val1 = 5 & Val2 = 1 then
                  Has_Failed = FALSE
               else
                  Has_Failed = TRUE
                  Failure_Code = -10
               endif

            endif

         else
            Has_Failed = TRUE
            Failure_Code = -20
         endif

      else
         Has_Failed = TRUE
         Failure_Code = -30
      endif

   endif

# End Test 11

#-------------------------------------------------------------------#
# Test 12 - Attempt to navigate from an instance that does not form 
#          any part of a relationship
#-------------------------------------------------------------------#

   if Iteration = 12 then

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objD", "Nav from D to O while not linked"]

      # Perform the navigation
      {SetO} = fourthD -> R19.Object_O

      # Check the results of the navigation
      if countof {SetO} != 0 then
         Failure_Code = -10
         Has_Failed   = TRUE
      endif

   endif

# End Test 12

#-------------------------------------------------------------------#
# Test 13 - Attempt to navigate from an instance that does not form 
#          any part of a relationship
#-------------------------------------------------------------------#

   if Iteration = 13 then

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objD", "Nav from D to C while not linked"]

      # Perform the navigation
      {SetC} = thirdD -> R3.Object_C

      # Check the results of the navigation
      if countof {SetC} != 0 then
         Failure_Code = -10
         Has_Failed   = TRUE
      endif

   endif

# End Test 13

#-------------------------------------------------------------------#
# Test 14 - Attempt to navigate from an instance that does not form 
#           any part of a relationship
#-------------------------------------------------------------------#

   if Iteration = 14 then

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objD", "Nav from C to D while not linked"]

      # Perform the navigation      
      InstD = secondC -> R3.Object_D

      # Check the results of the navigation
      if InstD != UNDEFINED then
         Failure_Code = -10
         Has_Failed   = TRUE
      endif

   endif

# End Test 14

#-------------------------------------------------------------------#
# Test 15 - Attempt to navigate to the associative from an instance 
#           that does not form any part of a relationship  
#-------------------------------------------------------------------#

   if Iteration = 15 then

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objD", "Nav from D to DO while not linked"]

      # Perform the navigation
      {SetDO} = fourthD -> R19.Object_DO

      # Check the results of the navigation
      if countof {SetDO} != 0 then
         Failure_Code = -10
         Has_Failed   = TRUE
      endif

   endif

# End Test 15

#-------------------------------------------------------------------#
# Test 16 - Navigate to the associative object from Object D
#-------------------------------------------------------------------#

   if Iteration = 16 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0706", "Relationships", "objD", "Navigate from ObjD to assoc object DO"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0609"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      # Perform The Navigation
      {SetDO} = firstD -> R19.Object_DO

      if countof {SetDO} != 2 then
         Has_Failed   = TRUE
         Failure_Code = -10
      else

         Val1  = -20
         Val2  = -30         

         for InstDO in {SetDO} do

            if InstDO.idDO = 1 then
               Val1  = InstDO.idDO
            endif

            if InstDO.idDO = 5 then
               Val2  = InstDO.idDO
            endif

         endfor

      endif

      if Val1 = 1 then

         if Val2 = 5 then
            Has_Failed = FALSE
         else
            Has_Failed   = TRUE
            Failure_Code = Val2
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = Val1
      endif

   endif

# End Test 16

#-------------------------------------------------------------------#
# Test 17 - Navigate from associative object to Object D
#-------------------------------------------------------------------#

   if Iteration = 17 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0707", "Relationships", "objD", "Navigate from the assoc to Object D"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0609"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]
      # Perform The Navigation
      InstD = fifthDO -> R19.Object_D

      if InstD.idD != 1  then
         Has_Failed   = TRUE
         Failure_Code = InstD.idD
      endif

   endif

# End Test 17

#-------------------------------------------------------------------#
# Test 18 - Navigate from associative object to Object O
#-------------------------------------------------------------------#

   if Iteration = 18 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0707", "Relationships", "objD", "Nav from the assoc to Obj O"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0609"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      # Perform The Navigation
      InstO = firstDO -> R19.Object_O

      if InstO.idO != 2 then
         Has_Failed   = TRUE
         Failure_Code = InstO.idO
      endif

   endif

# End Test 18

#-------------------------------------------------------------------#
# Test 19 - Navigate from Object O to the asociative object
#-------------------------------------------------------------------#

   if Iteration = 19 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0706", "Relationships", "objD", "Nav from Obj O to Obj DO"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0609"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]
      # Perform The Navigation
      InstDO = secondO -> R19.Object_DO

      if InstDO.idDO != 1 then
         Has_Failed   = TRUE
         Failure_Code = InstDO.idDO
      endif

   endif

# End Test 19

#-------------------------------------------------------------------#
# Test 20 - Attempt to navigate an unlinked relationship 
#-------------------------------------------------------------------#

   if Iteration = 20 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-1205", "Relationships", "objD", "Nav from O to D which isn''t linked"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      BigD = create Object_D with idD = 1000
      BigO = create Object_O with idO = 1001

      # Perform The Navigation
      InstD = BigO -> R19.Object_D

      if InstD != UNDEFINED then
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

      delete BigD
      delete BigO
   endif

# End Test 20

#-------------------------------------------------------------------#
# Test 21 - Create some new instances and link them and then attempt
#           to navigate them
#-------------------------------------------------------------------#

   if Iteration = 21 then
       
      [] = RPT1:Start_Test[Test, "1241-0000-01-0609", "Relationships", "objD", "Nav from O to D"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0611"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0602"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0612"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0613"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0701"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1203"]      
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      NewInstD  = create Object_D  with idD  = 101
      NewInstO  = create Object_O  with idO  = 202
      NewInstDO = create Object_DO with idDO = 303 

      link NewInstD R19 NewInstO using NewInstDO

      #Perform The Navigation
      InstD = NewInstO -> R19.Object_D

      if InstD != UNDEFINED then

         if InstD.idD != 101 then
            Has_Failed   = TRUE
            Failure_Code = InstD.idD
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

      unassociate NewInstD R19 NewInstO from NewInstDO

      unlink NewInstD R19 NewInstO

      delete NewInstD
      delete NewInstO
      delete NewInstDO
     
   endif

# End Test 21

#-------------------------------------------------------------------#
# Test 22 - Chained navigation from a single instance in Object C
#           through Object D to Object O
#-------------------------------------------------------------------#

   if Iteration = 22 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0704", "Relationships", "objD", "ObjC to ObjD to ObjO"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0609"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0602"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      # Perform the navigation
      InstD = thirdC -> R3.Object_D

      if InstD != UNDEFINED then

         {SetO} = thirdC -> R3.Object_D -> R19.Object_O

         if countof {SetO} != 2 then
            Has_Failed   = TRUE
            Failure_Code = -10
         else

            Val1  = -20
            Val2  = -30

            for InstO in {SetO} do

               if InstO.idO = 2 then
                  Val1  = InstO.idO
               endif

               if InstO.idO = 3 then
                  Val2  = InstO.idO
               endif

            endfor

            if Val1 = 2 then
  
               if Val2 = 3 then
                  Has_Failed = FALSE
               else
                  Has_Failed   = TRUE
                  Failure_Code = Val2
               endif

            else
               Has_Failed   = TRUE
               Failure_Code = Val1
            endif

         endif

      else
         Failure_Code = -100
      endif

   endif

# End Test 22

#-------------------------------------------------------------------#
# Test 23 - Chained navigation from a single instance in Object O
#           through Object D to Object C
#-------------------------------------------------------------------#

   if Iteration = 23 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0704", "Relationships", "objD", "ObjO to ObjD to ObjC"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0609"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0602"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      # Perform the navigation
      {SetC} = secondO -> R19.Object_D -> R3.Object_C

      if countof {SetC} != 2 then
         Has_Failed   = TRUE
         Failure_Code = -10
      else

         Val1  = -20
         Val2  = -30

         for InstC in {SetC} do

            if InstC.idC = 1 then
               Val1  = InstC.idC
            endif

            if InstC.idC = 3 then
               Val2  = InstC.idC
            endif

         endfor

         if Val1 = 1 then

            if Val2 = 3 then
               Has_Failed = FALSE
            else
               Has_Failed   = TRUE
               Failure_Code = Val2
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = Val1
         endif

      endif

   endif

# End Test 23

#-------------------------------------------------------------------#
# Test 24 - Chained navigation from a single instance in Object O
#           to Object D via an instance of Object DO
#-------------------------------------------------------------------#

   if Iteration = 24 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0706", "Relationships", "objD", "ObjO to ObjD via ObjDO"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0704"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0609"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      # Perform the navigation
      InstD = secondO -> R19.Object_DO -> R19.Object_D

      if InstD.idD != 1 then
         Has_Failed   = TRUE
         Failure_Code = InstD.idD
      endif

   endif

# End Test 24

#-------------------------------------------------------------------#
# Test 25 - Chained navigation from a single instance in Object C to
#           Object DO via Object D
#-------------------------------------------------------------------#

   if Iteration = 25 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0706", "Relationships", "objD", "ObjC to ObjDO via ObjD"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0704"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0609"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]
     
      # Perform the navigation
      {SetDO} = thirdC -> R3.Object_D -> R19.Object_DO

      if countof{SetDO} != 2 then
         Has_Failed   = TRUE
         Failure_Code = -10
      else

         Val1  = -20
         Val2  = -30

         for InstDO in {SetDO} do
 
           if InstDO.idDO = 1 then
              Val1  = InstDO.idDO
           endif

           if InstDO.idDO = 5 then
              Val2  = InstDO.idDO
           endif


         endfor

      endif

      if Val1 = 1 then

         if Val2 = 5 then
            Has_Failed = FALSE
         else
            Has_Failed   = TRUE
            Failure_Code = Val2
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = Val1
      endif

   endif

# End Test 25

#-------------------------------------------------------------------#
# Test 26 - Chained navigation from a single instance in Object O to
#           Object C via Objects DO and D
#-------------------------------------------------------------------#

   if Iteration = 26 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0706", "Relationships", "objD", "ObjO to ObjC via ObjD and ObjDO"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0704"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0609"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      # Perform the navigation
      {SetC} = secondO -> R19.Object_DO -> R19.Object_D -> R3.Object_C

      if countof{SetC} != 2 then
         Has_Failed   = TRUE
         Failure_Code = -10
      else

         Val1  = -20
         Val2  = -30

         for InstC in {SetC} do

            if InstC.idC = 1 then
               Val1  = InstC.idC
            endif
 
            if InstC.idC = 3 then
               Val2  = InstC.idC
            endif

         endfor

      endif

      if Val1 = 1 then

         if Val2 = 3 then
            Has_Failed = FALSE
         else
            Has_Failed   = TRUE
            Failure_Code = Val2
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = Val1
      endif

   endif

# End Test 26

#-------------------------------------------------------------------#
# Test 27 - Attempt to navigate an unlinked relationship 
#-------------------------------------------------------------------#

   if Iteration = 27 then

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objD", "Nav ObjDO to ObjO while unlinked"]

      # Perform The Navigation
      InstO = thirdDO -> R19.Object_O

      if InstO != UNDEFINED then
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

   endif

# End Test 27

#-------------------------------------------------------------------#
# Test 28 - Attempt to navigate an unlinked relationship 
#-------------------------------------------------------------------#

   if Iteration = 28 then

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objD", "Nav ObjDO to ObjO while unlinked"]

      # Perform The Navigation
      InstD = thirdDO -> R19.Object_D

      if InstD != UNDEFINED then
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

   endif

# End Test 28

#-------------------------------------------------------------------#
# Test 29 - Attempt to navigate an unlinked relationship 
#-------------------------------------------------------------------#

   if Iteration = 29 then

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objD", "Nav ObjO to ObjD while unlinked"]

      # Perform The Navigation
      InstD = fifthO -> R19.Object_D

      if InstD != UNDEFINED then
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

   endif

# End Test 29

#-------------------------------------------------------------------#
# Tests complete
#-------------------------------------------------------------------#

if Supported = TRUE then

   if Has_Failed = FALSE then
      [] = RPT2:Test_Passed["objD", Test, 0]
   else
      [] = RPT3:Test_Failed["objD", Test, Failure_Code]
   endif

else
   [] = RPT4:Test_Unsupported[Test]
endif',3,'',"00000000-0000-0000-0000-0000000006b2",2,2 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-0000000006b7","00000000-0000-0000-0000-000000000055",'Delete_Relationships','',"ba5eda7a-def5-0000-0000-000000000000",0,'#-------------------------------------------------------------------#
#
# Delete all relationships
#
# The architectre shall provide a mechanism to allow deletion of a 
# simple relationship link between two object instance
# 1241-0000-01-0604
#
# The architecture shall provide a mechanism to allow the deletion of 
# an associative link between an associative object and the link 
# between two objects
# 1241-0000-01-0612
#
# The architecture shall provide a mechanism to allow the deletion 
# of a link between two objects in a associative relationship
# 1241-0000-01-0613
#
# The architecture shall support a translation of the ASL unassociate
# statment to map to the mechanism that allows the deletion of an 
# associative link between an associative object and the link between
# two objects
# 1241-0000-01-1203
#
# The architecture shall support a translation of the ASL unlink
# statement to map to the mechanism that allow the deletion of a 
# link between two objects in a relationship
# 1241-0000-01-1204
#
# The architecture shall support a translation of the ASL navigate
# statment to map to the mechanism that allows the traversal of
# relationship links
# 1241-0000-01-1205
#
#-------------------------------------------------------------------#

# Initilise the variables
Has_Failed   = FALSE
Failure_Code = 0

[] = RPT1:Start_Test[Test, "1241-0000-01-0612", "Relationship", "objD", "Delete relationships"]
[] = RPT8:Specify_Requid[Test,"1241-0000-01-0604"]
[] = RPT8:Specify_Requid[Test,"1241-0000-01-0612"]
[] = RPT8:Specify_Requid[Test,"1241-0000-01-0613"]
[] = RPT8:Specify_Requid[Test,"1241-0000-01-1203"]
[] = RPT8:Specify_Requid[Test,"1241-0000-01-1204"]
[] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
[] = RPT8:Specify_Requid [Test, "1103-0000-01-0622"]

# Find the desired instances for Object_C
firstC  = find-one Object_C where idC = 1
secondC = find-one Object_C where idC = 2
thirdC  = find-one Object_C where idC = 3
fourthC = find-one Object_C where idC = 4
fifthC  = find-one Object_C where idC = 5

# Find the desired instances for Object_D
firstD  = find-one Object_D where idD = 1
secondD = find-one Object_D where idD = 2
thirdD  = find-one Object_D where idD = 3
fourthD = find-one Object_D where idD = 4
fifthD  = find-one Object_D where idD = 5

# Find the desired instances for Object_O
firstO  = find-one Object_O where idO = 1
secondO = find-one Object_O where idO = 2
thirdO  = find-one Object_O where idO = 3
fourthO = find-one Object_O where idO = 4
fifthO  = find-one Object_O where idO = 5

# Find the desired instances for Object_DO
firstDO  = find-one Object_DO where idDO = 1
secondDO = find-one Object_DO where idDO = 2
thirdDO  = find-one Object_DO where idDO = 3
fourthDO = find-one Object_DO where idDO = 4
fifthDO  = find-one Object_DO where idDO = 5

# Delete relationships
unlink firstD  R3 firstC
unlink firstD  R3 thirdC
unlink fourthD R3 fourthC
unlink fourthD R3 fifthC

unassociate firstD R19 secondO from firstDO
unassociate firstD R19 thirdO  from fifthDO

unlink firstD R19 secondO
unlink firstD R19 thirdO

#-------------------------------------------------------------------#

   if Has_Failed then
      [] = RPT3:Test_Failed["objD",Test, Failure_Code]
   else
      [] = RPT2:Test_Passed["objD",Test, 0]
   endif

#-------------------------------------------------------------------#',3,'',"00000000-0000-0000-0000-0000000006b4",2,3 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-0000000006b9","00000000-0000-0000-0000-000000000055",'Delete_Instances','',"ba5eda7a-def5-0000-0000-000000000000",0,'[] = RPT1:Start_Test[Test, "1241-0000-01-0612", "Relationship", "objD", "Delete relationships"]

# Delete set of instances

#InstRedD = find-one Object_D where Colour_Of_D = ''Red''
#delete InstRedD

#InstBlackD = find-one Object_D where Colour_Of_D = ''Black''
#delete InstBlackD

{SetC}  = find-all Object_C
{SetD}  = find-all Object_D
{SetDO} = find-all Object_DO
{SetO}  = find-all Object_O

delete {SetC}
delete {SetD}
delete {SetDO}
delete {SetO}

{SetC}  = find-all Object_C
{SetD}  = find-all Object_D
{SetDO} = find-all Object_DO
{SetO}  = find-all Object_O

# Test to ensure that all instances have been deleted
if countof {SetC} = 0 then

   if countof {SetD} = 0 then

      if countof {SetDO} = 0 then

         if countof {SetO} = 0 then
            Has_Failed   = FALSE
         else
            Has_Failed   = TRUE
            Failure_Code = -10
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -20
      endif

   else
      Has_Failed   = TRUE
      Failure_Code = -30
   endif

else
   Has_Failed   = TRUE
   Failure_Code = -40
endif


#-------------------------------------------------------------------#

   if Has_Failed then
      [] = RPT3:Test_Failed["objD",Test, Failure_Code]
   else
      [] = RPT2:Test_Passed["objD",Test, 0]
   endif

#-------------------------------------------------------------------#',3,'',"00000000-0000-0000-0000-0000000006b7",2,4 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-000000000718","00000000-0000-0000-0000-000000000060",'Create_Relationships','',"ba5eda7a-def5-0000-0000-000000000000",0,'#-------------------------------------------------------------------#
#
# Create relationships
#
# The architecture shall provide a mechainsm to allow creation of a 
# simple relationship link between two object instances 
# 1241-0000-01-0603
#
# The architecture shall provide a mechanism to allow creation of a 
# associative relationship link between two object instances and an 
# associative instance
# 1241-0000-01-0611
#
# The architectureshall support a translation of the ASL link 
# statement to map to the mechanism that allows creation of a 
# relationship link between two object instances
# 1241-0000-01-1202
#
#-------------------------------------------------------------------#

[] = RPT1:Start_Test[Test, "1241-0000-01-0603", "Relationships", "objE", "Find instances ObjE F and EF"]
[] = RPT8:Specify_Requid[Test,"1241-0000-01-0611"]
[] = RPT8:Specify_Requid[Test,"1241-0000-01-1202"]
[] = RPT8:Specify_Requid [Test, "1103-0000-01-0612"]

# Find the desired instances for Object_E
firstE  = find-one Object_E where idE = 1
thirdE  = find-one Object_E where idE = 3
fifthE  = find-one Object_E where idE = 5

# Find the desired instances for Object_F
firstF  = find-one Object_F where idF = 1
fourthF = find-one Object_F where idF = 4

# Find the desired instances for Object_EF
firstEF  = find-one Object_EF where idEF = 1
secondEF = find-one Object_EF where idEF = 2
thirdEF  = find-one Object_EF where idEF = 3
fourthEF = find-one Object_EF where idEF = 4

# Create Mc:Mc relationships
link firstE R5 firstF  using fourthEF
link firstE R5 fourthF using thirdEF
link thirdE R5 fourthF using secondEF
link fifthE R5 fourthF using firstEF

#-------------------------------------------------------------------#
# Test that the creation and linking has been successfull
#-------------------------------------------------------------------#

{SetF}  = firstE -> R5.Object_F
{SetEF} = firstE -> R5.Object_EF

if countof {SetF} != 0 then

   if countof {SetEF} != 0 then
      [] = RPT2:Test_Passed["ObjE", Test, 0]
   else
      [] = RPT3:Test_Failed["ObjE", Test, -2]
   endif

else
   [] = RPT3:Test_Failed["ObjE", Test, -1]
endif

#-------------------------------------------------------------------#
',3,'',"00000000-0000-0000-0000-000000000000",2,1 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-00000000071a","00000000-0000-0000-0000-000000000060",'ObjE_Navigation','',"ba5eda7a-def5-0000-0000-000000000000",0,'#-------------------------------------------------------------------#
#
# Normal navigation
#
# The architecture shall implement simple 1:M relationships
# 1241-0000-01-0602
#
# The architecture shall implement associative 1-M:M relationships
# 1241-0000-01-0610
#
# The architecture shall provide a mechanism to allow the creation of
# associative relationship link between two object instances and an
# associative instance
# 1241-0000-01-0611
#
# The architecture shall provide a mechanism to allow the deletion of
# an associative link between an associative object and the link 
# between two objects
# 1241-0000-01-0612
#
# The architecture shall provide a mechanism to allow the deletion of
# a link between two objects in an associative relationship
# 1241-0000-01-0613
#
# The architecture shall provide operations which, given a starting 
# instance handle and a relationshipspecification, return a single 
# handle of the related instance
# 1241-0000-01-0701
#
# The architecture shall provide operations which, given a starting 
# instance handle and a relationship specification , return a set of
# handles of the related instances
# 1241-0000-01-0702
#
# The architecture shall provide operations which, given a starting 
# instance handle and a relationship specification, return a set of 
# handles of the related instances
# 1241-0000-01-0703 **** NOT SUPPORTED BY WACA ****
#
# The architecture shall support chains of navigations expressed in 
# ASL
# 1241-0000-01-0704
#
# The architecture shall support navigations to associative objects
# expressed in ASL
# 1241-0000-01-0706
#
# The architecture shall support navigations from singly associative
# objects expressed in ASL
# 1241-0000-01-0707
#
# The architecture shall support a translation of the ASL link 
# statment to map to the mechanism that allows creation of a 
# relationship link between two object instances
# 1241-0000-01-1202
#
# The architecture shall support a translation of the ASL unassociate
# statment to map to the mechanism that allows the deletion of an 
# associative link between an associative object and the link between
# two objects
# 1241-0000-01-1203
#
# The architecture shall support a translation of the ASL unlink
# statement to map to the mechanism that allow the deletion of a 
# link between two objects in a relationship
# 1241-0000-01-1204
#
# The architecture shall support a translation of the ASL navigate
# statment to map to the mechanism that allows the traversal of
# relationship links
# 1241-0000-01-1205
#
#-------------------------------------------------------------------#

# Initialise the variables
Has_Failed       = FALSE
Unsupported      = FALSE
Failure_Code     = -1

#-------------------------------------------------------------------#

# Find the desired instances for Object_E
firstE  = find-one Object_E where idE = 1
thirdE  = find-one Object_E where idE = 3
fourthE = find-one Object_E where idE = 4
fifthE  = find-one Object_E where idE = 5

#Find the desired instances for Object_F
firstF  = find-one Object_F where idF = 1
fourthF = find-one Object_F where idF = 4
fifthF  = find-one Object_F where idF = 5

#Find the desired instances for Object_EF
firstEF  = find-one Object_EF where idEF = 1
secondEF = find-one Object_EF where idEF = 2
thirdEF  = find-one Object_EF where idEF = 3
fourtEF  = find-one Object_EF where idEF = 4
fifthEF  = find-one Object_EF where idEF = 5

#-------------------------------------------------------------------#
# Test 1 - Navigate from first instance of Object E to Object F
#          using qualified number
#-------------------------------------------------------------------#

   if Iteration = 1 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0702", "Relationships", "objE", "Navigate from ObjE to ObjF"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      # Perform the navigation
      {SetF} = firstE -> R5.Object_F

      # Check the result of the navigation
      if countof {SetF} != 2 then
         Has_Failed   = TRUE
         Failure_Code = -10
      else
         # Check the set contents
         Val1 = -11
         Val2 = -12

         for InstF in {SetF} do

            if InstF.idF = 1 then
               Val1 = InstF.idF
            endif

            if InstF.idF = 4 then
               Val2 = InstF.idF
            endif

         endfor

         if Val1 = 1 then
            if Val2 = 4 then
               Has_Failed = FALSE
            else
               Has_Failed   = TRUE
               Failure_Code = Val2
            endif
         else
            Has_Failed   = TRUE
            Failure_Code = Val1
         endif

      endif

   endif

# End Test 1

#-------------------------------------------------------------------#
# Test 2 - Navigate from Object F back to Object E
#-------------------------------------------------------------------#

   if Iteration = 2 then

      [] = RPT1:Start_Test[Test,"1241-0000-01-0702" , "Relationships", "objE", "Object F to Object E"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      {SetE} = fourthF -> R5.Object_E

      if countof {SetE} = 0 then
         Has_Failed   = TRUE
         Failure_Code = -30
      else
         
         Val1 = -10
         Val2 = -20
         Val3 = -30

         for InstE in {SetE} do

            if InstE.idE = 1 then
               Val1 = InstE.idE
            endif

            if InstE.idE = 3 then
               Val2 = InstE.idE
            endif

            if InstE.idE = 5 then
               Val3 = InstE.idE
            endif

         endfor

         if Val1 = 1 then
            if Val2 = 3 then
               if Val3 = 5 then
                  Has_Failed = FALSE
               else
                  Has_Failed   = TRUE
                  Failure_Code = Val3
               endif
            else
               Has_Failed   = TRUE
               Failure_Code = Val2
            endif
         else
            Has_Failed   = TRUE
            Failure_Code = Val1
         endif

      endif

   endif

# End Test 2


#-------------------------------------------------------------------#
# Test 3 - Navigate from third instance of Object E to Object F
#-------------------------------------------------------------------#

   if Iteration = 3 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0702", "Relationships", "objE", "Navigate from ObjE to ObjF"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      # Perform the navigation
      {SetF} = thirdE -> R5.Object_F

      # Check the result of the navigation
      if countof {SetF} != 1 then
         Has_Failed   = TRUE
         Failure_Code = -10
      else
         # Check the set contents
         Val1 = -20

         for InstF in {SetF} do

            if InstF.idF != 4 then
               Failure_Code = Val1
               Has_Failed   = TRUE
            endif

         endfor

      endif

   endif

# End Test 3

#-------------------------------------------------------------------#
# Test 4 - Navigate from a set of instance handles
#-------------------------------------------------------------------#

   if Iteration = 4 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0703", "Relationships", "objE", "Navigate from set F to E"]

      Val1 = 0
      Val2 = 0
      Val3 = 0
      Val4 = 0

      {SetF} = firstE -> R5.Object_F

      if countof {SetF} = 2 then
         {SetE} = {SetF} -> R5.Object_E

         if countof {SetE} = 4 then
         
            for InstE in {SetE} do

               if Val1 = 0 then
                  Val1 = InstE.idE
               else
                  if Val2 = 0 then
                     Val2 = InstE.idE
                  else

                     if Val3 = 0 then
                        Val3 = InstE.idE
                     else
                        Val4 = InstE.idE
                     endif

                  endif

               endif

            endfor

            Total = 0
            Total = Val1 + Val2 + Val3 + Val4

            if Total != 10 then
               Has_Failed = TRUE
               Failure_Code = -10
            endif

         else
            Has_Failed = TRUE
            Failure_Code = -20
         endif

      else
         Has_Failed = TRUE
         Failure_Code = -30
      endif

   endif

# End Test 4

#-------------------------------------------------------------------#
# Test 5 - Navigate from a set of instance handles
#-------------------------------------------------------------------#

   if Iteration = 5 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0703", "Relationships", "objE", "Navigate from set E to F"]

      temp = 0
      Total = 0

      {SetE} = fourthF -> R5.Object_E

      if countof {SetE} = 3 then
         {SetF} = {SetE} -> R5.Object_F

         if countof {SetF} = 4 then
         
            for InstF in {SetF} do
               temp  = InstF.idF
               Total = Total + temp
            endfor

            if  Total != 13 then
               Has_Failed = TRUE
               Failure_Code = Total
            endif

         else
            Has_Failed = TRUE
            Failure_Code = -20
         endif

      else
         Has_Failed = TRUE
         Failure_Code = -30
      endif

   endif

# End Test 5

#-------------------------------------------------------------------#
# Test 6 - Navigate from a set of instance handles
#-------------------------------------------------------------------#

   if Iteration = 6 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0703", "Relationships", "objE", "Navigate from set F to EF"]

      Val1 = 0
      Val2 = 0
      Val3 = 0
      Val4 = 0

      {SetF} = firstE -> R5.Object_F

      if countof {SetF} = 2 then
         {SetEF} = {SetF} -> R5.Object_EF

         if countof {SetEF} = 4 then
         
            for InstEF in {SetEF} do

               if Val1 = 0 then
                  Val1 = InstEF.idEF
               else
                  if Val2 = 0 then
                     Val2 = InstEF.idEF
                  else

                     if Val3 = 0 then
                        Val3 = InstEF.idEF
                     else
                        Val4 = InstEF.idEF
                     endif

                  endif

               endif

            endfor

            Total = 0
            Total = Val1 + Val2 + Val3 + Val4

            if Total != 10 then
               Has_Failed = TRUE
               Failure_Code = -10
            endif

         else
            Has_Failed = TRUE
            Failure_Code = -20
         endif

      else
         Has_Failed = TRUE
         Failure_Code = -30
      endif

   endif

# End Test 6

#-------------------------------------------------------------------#
# Test 7 - Navigate from a set of instance handles
#-------------------------------------------------------------------#

   if Iteration = 7 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0703", "Relationships", "objE", "Navigate from set E to EF"]

      Val1 = 0
      Val2 = 0
      Val3 = 0
      Val4 = 0

      {SetE} = fourthF -> R5.Object_E

      if countof {SetE} = 3 then
         {SetEF} = {SetE} -> R5.Object_EF

         if countof {SetEF} = 4 then
         
            for InstEF in {SetEF} do

               if Val1 = 0 then
                  Val1 = InstEF.idEF
               else
                  if Val2 = 0 then
                     Val2 = InstEF.idEF
                  else

                     if Val3 = 0 then
                        Val3 = InstEF.idEF
                     else
                        Val4 = InstEF.idEF
                     endif

                  endif

               endif

            endfor

            Total = 0
            Total = Val1 + Val2 + Val3 + Val4

            if Total != 10 then
               Has_Failed = TRUE
               Failure_Code = -10
            endif

         else
            Has_Failed = TRUE
            Failure_Code = -20
         endif

      else
         Has_Failed = TRUE
         Failure_Code = -30
      endif

   endif

# End Test 7

#-------------------------------------------------------------------#
# Test 8 - Navigate to the associative object from the fifth instance
#          of Object E
#-------------------------------------------------------------------#

   if Iteration = 8 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0706", "Relationships", "objE", "Navigate to associative object"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      # Perform the navigation
      {SetEF} = fifthE -> R5.Object_EF

      # Check the result of the navigation
      if countof {SetEF} != 1 then
         Has_Failed = TRUE
      else
 
         # Check the contents of the set
         for InstEF in {SetEF} do

            if InstEF.idEF != 1 then
               Failure_Code = -10
               Has_Failed   = TRUE
            endif

         endfor

      endif

   endif

# End Test 8

#-------------------------------------------------------------------#
# Test 9 - Navigate from Object F to the associated object EF
#-------------------------------------------------------------------#

   if Iteration = 9 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0706", "Relationships", "objE", "ObjF to associated Object EF"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      {SetEF} = fourthF -> R5.Object_EF

      if countof {SetEF} = 0 then
         Has_Failed = TRUE
         Failure_Code = -70
      else
         Val1 = -10
         Val2 = -20
         Val3 = -30

         for InstEF in {SetEF} do

            if InstEF.idEF = 1 then
               Val1 = InstEF.idEF
            endif

            if InstEF.idEF = 2 then
               Val2 = InstEF.idEF
            endif

            if InstEF.idEF = 3 then
               Val3 = InstEF.idEF
            endif

         endfor

         for InstEF in {SetEF} do

            if InstEF.idEF = 1 then
               Val1 = InstEF.idEF
            endif

            if InstEF.idEF = 2 then
               Val2 = InstEF.idEF
            endif

            if InstEF.idEF = 3 then
               Val3 = InstEF.idEF
            endif

         endfor

         if Val1 = 1 then
            if Val2 = 2 then
               if Val3 = 3 then
                  Has_Failed = FALSE
               else
                  Has_Failed   = TRUE
                  Failure_Code = Val3
               endif
            else
               Has_Failed   = TRUE
               Failure_Code = Val2
            endif
         else
            Has_Failed   = TRUE
            Failure_Code = Val1
         endif

      endif

   endif

# End Test 9

#-------------------------------------------------------------------#
# Test 10 - Navigate from the associated object EF to object F
#-------------------------------------------------------------------#

   if Iteration = 10 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0707", "Relationships", "objE", "Associated object EF to object F"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      {SetEF} = find-all Object_EF

      for InstEF in {SetEF} do

         if InstEF.idEF = 1 then
            InstF = InstEF -> R5.Object_F

            if InstF.idF != 4 then
               Has_Failed   = TRUE
               Failure_Code = -10
               break
            endif

         endif

         if InstEF.idEF = 2 then
            InstF = InstEF -> R5.Object_F

            if InstF.idF != 4 then
               Has_Failed   = TRUE
               Failure_Code = -20
               break
            endif

         endif

         if InstEF.idEF = 3 then
            InstF = InstEF -> R5.Object_F

            if InstF.idF != 4 then
               Has_Failed   = TRUE
               Failure_Code = -30
               break
            endif

         endif

         if InstEF.idEF = 4 then
            InstF = InstEF -> R5.Object_F
            if InstF.idF != 1 then
               Has_Failed   = TRUE
               Failure_Code = -40
               break
            endif

         endif

      endfor

   endif

# End Test 10

#-------------------------------------------------------------------#
# Test 11 - Navigate from the associated object EF to object E
#-------------------------------------------------------------------#

   if Iteration = 11 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0707", "Relationships", "objE", "Associated Object EF to Object E"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      InstE = thirdEF -> R5.Object_E

      if InstE = UNDEFINED then
         Has_Failed   = TRUE
         Failure_Code = -10
      else

         if InstE.idE != 1 then
            Has_Failed = TRUE
            Failure_Code = -20
         endif

      endif

   endif 

# End Test 11

#-------------------------------------------------------------------#
# Test 12  - Navigate from object E to the associated object EF and 
#           then to object F
#-------------------------------------------------------------------#

   if Iteration = 12 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0704", "Relationships", "objE", "ObjE to assoc ObjEF to ObjF"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-0706"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-0707"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-1205"]

      # Unsupported by WACA 301 beta
      # Will be supported for WACA 500

      {SetF} = fifthE -> R5.Object_EF -> R5.Object_F
      
      if countof{SetF} = 1 then

         for InstF in {SetF} do

            if InstF.idF != 4 then
               Has_Failed   = TRUE
               Failure_Code = -10
            endif

         endfor

      else
         Has_Failed   = TRUE
         Failure_Code = -20
      endif

   endif

# End Test 12

#-------------------------------------------------------------------#
# Test 13 - Navigate from object F to the associated object EF then  
#           to object E
#-------------------------------------------------------------------#

   if Iteration = 13 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0704", "Relationships", "objE", "Object F to assoc object EF to object E"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-0706"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-0707"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      # Will be supported for WACA 500
      {SetE} = firstF -> R5.Object_EF -> R5.Object_E

      if countof {SetE} = 1 then

         for InstE in {SetE} do

            if InstE.idE != 1 then
               Has_Failed   = TRUE
               Failure_Code = -10
            endif

         endfor
     
      else
         Has_Failed   = TRUE
         Failure_Code = -20
      endif

   endif

# End Test 13


#-------------------------------------------------------------------#
# Test 14 - Navigate a relationships where the source instance does 
#           not form any part of a relationship
#-------------------------------------------------------------------#

   if Iteration = 14 then

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objE", "Source forms no part of relationship"]

      # Perform the navigation
      {SetF} = fourthE -> R5.Object_F

      # Check the result of the navigation
      if countof {SetF} != 0 then
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

   endif

# End Test 14

#-------------------------------------------------------------------#
# Test 15 - Navigate a relationships where the source instance does 
#           not form any part of a relationship
#-------------------------------------------------------------------#

   if Iteration = 15 then

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objE", "Source forms no part of relationship"]

      # Perform the navigation
      {SetE} = fifthF -> R5.Object_E

      # Check the result of the navigation
      if countof {SetF} != 0 then
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

   endif

# End Test 15

#-------------------------------------------------------------------#
# Test 16 - Navigate to an associative object where the source 
#           instance does not form part of the relationship
#-------------------------------------------------------------------#

   if Iteration = 16 then

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objE", "Source forms no part of relationship"]
     
      # Perform the navigation
      {SetEF} = fourthE -> R5.Object_EF

      # Check the result of the navigation
      if countof {SetEF} != 0 then
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

   endif

# End Test 16

#-------------------------------------------------------------------#
# Test 17 - Navigate to an associative object where the source 
#           instance does not form part of the relationship
#-------------------------------------------------------------------#

   if Iteration = 17 then

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objE", "Source forms no part of relationship"]

      # Perform the navigation
      {SetEF} = fifthF -> R5.Object_EF

      # Check the result of the navigation
      if countof {SetEF} != 0 then
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

   endif

# End Test 17

#-------------------------------------------------------------------#
# Test 18 - Navigate to an associative object where the source 
#           instance does not form part of the relationship
#-------------------------------------------------------------------#

   if Iteration = 18 then

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objE", "Source forms no part of relationship"]
      # Perform the navigation
      InstF = fifthEF -> R5.Object_F

      # Check the result of the navigation
      if InstF != UNDEFINED then
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

   endif

# End Test 18

#-------------------------------------------------------------------#
# Test 19 - Navigate to an associative object where the source 
#           instance does not form part of the relationship
#-------------------------------------------------------------------#

   if Iteration = 19 then

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objE", "Source forms no part of relationship"]

      # Perform the navigation
      InstE = fifthEF -> R5.Object_E

      # Check the result of the navigation
      if InstE != UNDEFINED then
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

   endif

# End Test 19

#-------------------------------------------------------------------#
# Test 20 - Correlated associative navigation
#-------------------------------------------------------------------#

   if Iteration = 20 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-1205", "Relationships", "objE", "Correlated Assoc Navigation"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      InstEF = firstE and firstF -> R5.Object_EF

      if InstEF.idEF != 4 then
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

   endif

# End Test 20

#-------------------------------------------------------------------#
# Test 21 - Attempt to naviagate from Object E to Object F via 
#           unlinked relationship
#-------------------------------------------------------------------#

   if Iteration = 21 then

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objE", "Nav from E to F"]

      BigE = create Object_E with idE = 10000
      BigF = create Object_F with idF = 20000

      {SetF} = BigE -> R5.Object_F

      if countof {SetF} != 0 then
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

      delete BigE
      delete BigF

   endif

# End Test 21

#-------------------------------------------------------------------#
# Test 22 - This test ensures that when instances of an object are
#           linked, unlinked then relinked that the linking of the
#           new instances is correct
#-------------------------------------------------------------------#

   if Iteration = 22 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0603", "Relationships", "objE", "Check that no in assoc inst is correct"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-0604"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-0612"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-0613"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-0702"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-1202"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-1203"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-1204"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-1205"]

      firstNewE   = create Object_E  with idE = 10
      secondNewE  = create Object_E  with idE = 11
      firstNewF   = create Object_F  with idF = 20
      secondNewF  = create Object_F  with idF = 21
      firstNewEF  = create Object_EF with idE = 30
      secondNewEF = create Object_EF with idE = 31

      link firstNewE  R5 firstNewF  using firstNewEF
      link secondNewE R5 secondNewF using secondNewEF

      {SetEF} = firstNewE -> R5.Object_EF

      if countof {SetEF} != 1 then
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

      unassociate firstNewE  R5 firstNewF  from firstNewEF
      unassociate secondNewE R5 secondNewF from secondNewEF

      unlink firstNewE  R5 firstNewF
      unlink secondNewE R5 secondNewF

      if not Has_Failed then

         link firstNewE  R5 firstNewF  using firstNewEF
         link secondNewE R5 secondNewF using secondNewEF

         {newSetEF} = firstNewE -> R5.Object_EF

         if countof {newSetEF} != 1 then
            Has_Failed   = TRUE
            Failure_Code = -20
         endif

      endif

      unassociate firstNewE  R5 firstNewF  from firstNewEF
      unassociate secondNewE R5 secondNewF from secondNewEF

      unlink firstNewE  R5 firstNewF
      unlink secondNewE R5 secondNewF

      delete firstNewE 
      delete secondNewE
      delete firstNewF
      delete secondNewF
      delete firstNewEF
      delete secondNewEF

   endif

# End Test 22

#-------------------------------------------------------------------#
# Tests complete
#-------------------------------------------------------------------#

if Unsupported = FALSE then 

   if Has_Failed = FALSE then
      [] = RPT2:Test_Passed["objE" , Test, 0]
   else
      [] = RPT3:Test_Failed["objE", Test, Failure_Code]
   endif

else
   [] = RPT4:Test_Unsupported[Test]
endif

#-------------------------------------------------------------------#

',3,'',"00000000-0000-0000-0000-000000000718",2,2 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-00000000071d","00000000-0000-0000-0000-000000000060",'Delete_Relationships','',"ba5eda7a-def5-0000-0000-000000000000",0,'#-------------------------------------------------------------------#
#
# Delete all relationships
#
# The architectre shall provide a mechanism to allow deletion of a 
# simple relationship link between two object instance
# 1241-0000-01-0604
#
# The architecture shall provide a mechanism to allow the deletion of 
# an associative link between an associative object and the link 
# between two objects
# 1241-0000-01-0612
#
# The architecture shall provide a mechanism to allow the deletion 
# of a link between two objects in a associative relationship
# 1241-0000-01-0613
#
# The architecture shall support a translation of the ASL unassociate
# statment to map to the mechanism that allows the deletion of an 
# associative link between an associative object and the link between
# two objects
# 1241-0000-01-1203
#
# The architecture shall support a translation of the ASL unlink
# statement to map to the mechanism that allow the deletion of a 
# link between two objects in a relationship
# 1241-0000-01-1204
#
# The architecture shall support a translation of the ASL navigate
# statment to map to the mechanism that allows the traversal of
# relationship links
# 1241-0000-01-1205
#
#-------------------------------------------------------------------#

# Set the variable defaults
Has_Failed   = FALSE
Failure_Code = 0

[] = RPT1:Start_Test[Test, "1241-0000-01-0613", "Relationships", "ObjE", "Delete relationships"]
[] = RPT8:Specify_Requid[Test,"1241-0000-01-0604"]
[] = RPT8:Specify_Requid[Test,"1241-0000-01-0612"]
[] = RPT8:Specify_Requid[Test,"1241-0000-01-1203"]
[] = RPT8:Specify_Requid[Test,"1241-0000-01-1204"]
[] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
[] = RPT8:Specify_Requid [Test, "1103-0000-01-0622"]



CurrentID = 1

loop

   InstE = find-one Object_E where idE = CurrentID
   breakif InstE = UNDEFINED

   {setAssoc} = InstE -> R5.Object_EF
   
   for instAssoc in {setAssoc} do
      InstF = instAssoc -> R5.Object_F   
      unassociate InstE R5 InstF from instAssoc
      unlink InstE R5 InstF
      delete instAssoc
   endfor

   delete InstE

   CurrentID = CurrentID + 1

endloop


# Find the desired instances for Object_E
#firstE  = find-one Object_E where idE = 1
#thirdE  = find-one Object_E where idE = 3
#fifthE  = find-one Object_E where idE = 5

# Find the desired instances for Object_F
#firstF  = find-one Object_F where idF = 1
#fourthF = find-one Object_F where idF = 4

# Find the desired instances for Object_EF
#firstEF  = find-one Object_EF where idEF = 1
#secondEF = find-one Object_EF where idEF = 2
#thirdEF  = find-one Object_EF where idEF = 3
#fourthEF = find-one Object_EF where idEF = 4
#fifthEF  = find-one Object_EF where idEF = 5

# Delete relationships
#unassociate firstE R5 firstF  from fourthEF
#unassociate firstE R5 fourthF from thirdEF
#unassociate thirdE R5 fourthF from secondEF
#unassociate fifthE R5 fourthF from firstEF

#unlink firstE R5 firstF
#unlink firstE R5 fourthF
#unlink thirdE R5 fourthF
#unlink fifthE R5 fourthF

{SetE}  = find-all Object_E
{SetEF} = find-all Object_EF
{SetF}  = find-all Object_F

for InstE in {SetE} do
   delete InstE
endfor

for InstEF in {SetEF} do
   delete InstEF
endfor

for InstF in {SetF} do
   delete InstF
endfor

{SetE}  = find-all Object_E
{SetEF} = find-all Object_EF
{SetF}  = find-all Object_F

if countof {SetE} = 0 then

   if countof {SetEF} = 0 then

      if countof {SetF} != 0 then
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

   else
      Has_Failed   = TRUE
      Failure_Code = -20
   endif

else
   Has_Failed   = TRUE
   Failure_Code = -30
endif


#-------------------------------------------------------------------#

if Has_Failed then
   [] = RPT3:Test_Failed["objE", Test, Failure_Code]
else
   [] = RPT2:Test_Passed["ObjE", Test, 0]
endif

#-------------------------------------------------------------------#',3,'',"00000000-0000-0000-0000-00000000071a",2,3 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-0000000007db","00000000-0000-0000-0000-00000000008c",'Create_Relationships','',"ba5eda7a-def5-0000-0000-000000000000",0,'#--------------------------------------------------------------------------------------------#
#
# Create the relationships
#
# The architectureshall support a translation of the ASL link 
# statement to map to the mechanism that allows creation of a 
# relationship link between two object instances
# 1241-0000-01-1202
#
#--------------------------------------------------------------------------------------------#

Has_Failed = FALSE

One_Left    = find-one Far_Left   where Left_Identifier   = 1
One_Middle  = find-one Middle     where Middle_Identifier = 1
One_Right   = find-one Many_Right where Right_Identifier  = 1
Two_Right   = find-one Many_Right where Right_Identifier  = 2
Three_Right = find-one Many_Right where Right_Identifier  = 3

One_MRA = find-one Many_Right_Assoc where MRA_Identifier  = 1
Two_MRA = find-one Many_Right_Assoc where MRA_Identifier  = 2

One_MFR = find-one Many_Far_Right where MFR_Identifier = 1
Two_MFR = find-one Many_Far_Right where MFR_Identifier = 2

link One_Left   R6 One_Middle
link One_Middle R7 One_Right
link One_Middle R7 Two_Right
link One_Middle R7 Three_Right

link One_Right R8 One_MFR using One_MRA
link One_Right R8 Two_MFR using Two_MRA
link Two_Right R8 Two_MFR using Two_MRA

#--------------------------------------------------------------------------------------------#
# Check that the relationships have been correctly established
#--------------------------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1241-0000-01-0602", "Relationships", "Set Navigation", "Create objects and relationships"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0603"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-1202"] 
   [] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
   [] = RPT8:Specify_Requid [Test, "1103-0000-01-0612"]

   {SetMR} = One_Middle -> R7.Many_Right

   if countof {SetMR} != 3 then
      Has_Failed = TRUE
      Failure_Code = -10
   else
   
      for InstMR in {SetMR} do

         if InstMR.Right_Identifier = 1 then
            Val1 = 1
         endif

         if InstMR.Right_Identifier = 2 then
            Val2 = 2
         endif

         if InstMR.Right_Identifier = 3 then
            Val3 = 3
         endif

      endfor

      if Val1 = 1 then

         if Val2 = 2 then

            if Val3 != 3 then
               Has_Failed   = TRUE
               Failure_Code = Val3
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = Val2
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = Val1
      endif

   endif

   if not Has_Failed then
      [] = RPT2:Test_Passed ["Objects created and linked", Test, 0]
   else
      [] = RPT3:Test_Failed ["Error in creation of objects or linking", Test, Failure_Code]
   endif
',3,'',"00000000-0000-0000-0000-000000000000",2,1 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-0000000007dd","00000000-0000-0000-0000-00000000008c",'Middle_Navigation','',"ba5eda7a-def5-0000-0000-000000000000",0,'#-------------------------------------------------------------------#
#
# Normal navigation
#
# The architecture shall implement simple 1:M relationships
# 1241-0000-01-0602
#
# The architecture shall implement associative 1-M:M relationships
# 1241-0000-01-0610
#
# The architecture shall provide a mechanism to allow the creation of
# associative relationship link between two object instances and an
# associative instance
# 1241-0000-01-0611
#
# The architecture shall provide a mechanism to allow the deletion of
# an associative link between an associative object and the link 
# between two objects
# 1241-0000-01-0612
#
# The architecture shall provide a mechanism to allow the deletion of
# a link between two objects in an associative relationship
# 1241-0000-01-0613
#
# The architecture shall provide operations which, given a starting 
# instance handle and a relationshipspecification, return a single 
# handle of the related instance
# 1241-0000-01-0701
#
# The architecture shall provide operations which, given a starting 
# instance handle and a relationship specification , return a set of
# handles of the related instances
# 1241-0000-01-0702
#
# The architecture shall provide operations which, given a starting 
# instance handle and a relationship specification, return a set of 
# handles of the related instances
# 1241-0000-01-0703 **** NOT SUPPORTED BY WACA ****
#
# The architecture shall support chains of navigations expressed in 
# ASL
# 1241-0000-01-0704
#
# The architecture shall support navigations to associative objects
# expressed in ASL
# 1241-0000-01-0706
#
# The architecture shall support navigations from singly associative
# objects expressed in ASL
# 1241-0000-01-0707
#
# The architecture shall support a translation of the ASL link 
# statment to map to the mechanism that allows creation of a 
# relationship link between two object instances
# 1241-0000-01-1202
#
# The architecture shall support a translation of the ASL unassociate
# statment to map to the mechanism that allows the deletion of an 
# associative link between an associative object and the link between
# two objects
# 1241-0000-01-1203
#
# The architecture shall support a translation of the ASL unlink
# statement to map to the mechanism that allow the deletion of a 
# link between two objects in a relationship
# 1241-0000-01-1204
#
# The architecture shall support a translation of the ASL navigate
# statment to map to the mechanism that allows the traversal of
# relationship links
# 1241-0000-01-1205
#
#-------------------------------------------------------------------#


One_Left    = find-one Far_Left   where Left_Identifier   = 1
One_Middle  = find-one Middle     where Middle_Identifier = 1
One_Right   = find-one Many_Right where Right_Identifier  = 1
Two_Right   = find-one Many_Right where Right_Identifier  = 2
Three_Right = find-one Many_Right where Right_Identifier  = 3

One_MRA = find-one Many_Right_Assoc where MRA_Identifier  = 1
Two_MRA = find-one Many_Right_Assoc where MRA_Identifier  = 2

One_MFR = find-one Many_Far_Right where MFR_Identifier = 1
Two_MFR = find-one Many_Far_Right where MFR_Identifier = 2


Has_Failed = FALSE

#--------------------------------------------------------------------------------------------#
# Test 1 - Call a routine in a tight loop that will perform a navigation from an instance in 
#          a set to a set.
#          Repeat this call many times to monitor the release of memory when the local  
#          objects go out of scope.
#--------------------------------------------------------------------------------------------#

   if Iteration = 1 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0621", "Relationships", "Set Navigation", "Navigate in many to many loop"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0611"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1203"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      How_Many_Far_Right_To_Make = 3
      Loop_Counter = 0

      {Set_Right} = find-all Many_Right

      for InstRight in {Set_Right} do

         Counter = 0
   
         loop

            The_ID = Counter + 10
            FarRight = create Many_Far_Right with MFR_Identifier = The_ID & MFR_Data = 0

            The_Assoc = create Many_Right_Assoc with MRA_Data = The_ID

            link InstRight R8 FarRight using The_Assoc

            Counter = Counter + 1
            breakif Counter = How_Many_Far_Right_To_Make

         endloop

      endfor

      break_condition = 501

      Loop_Index = 1

      loop
         # Call the memory leak test many times. Monitor the memory useage in NT Task Manager
         [] = Relationships4::Memory_Leak_Test_Many_To_Many[]
  
         Loop_Index = Loop_Index + 1
         breakif Loop_Index = break_condition
      endloop

      # Now the test is completed unlink and delete the instances  
 
      for InstRight in {Set_Right} do

         {SetAssoc} = InstRight -> R8.Many_Right_Assoc

         for InstAssoc in {SetAssoc} do
   
            InstMFR   = InstAssoc -> R8.Many_Far_Right

            if InstMFR.MFR_Identifier > 9 then      
               unassociate InstRight R8 InstMFR from InstAssoc
               unlink InstRight R8 InstMFR
            endif

         endfor

      endfor

      {SetMFR} = find-all Many_Far_Right

      The_ID = 10

      loop
 
         for InstMFR in {SetMFR} do

            if InstMFR.MFR_Identifier = The_ID then
               delete InstMFR
            endif

         endfor

         The_ID = The_ID + 1
         breakif The_ID = 14

      endloop

      {SetMRA} = find-all Many_Right_Assoc
      The_ID = 10

      loop
 
         for InstMRA in {SetMRA} do

            if InstMRA.MRA_Data = The_ID then
               delete InstMRA
             endif

         endfor

         The_ID = The_ID + 1
         breakif The_ID = 14

      endloop  

      {SetMFR} = find Many_Far_Right where MFR_Identifier > 9
      {SetMRA} = find Many_Right_Assoc where MRA_Data > 9

      if countof{SetMFR} != 0 then
         [] = RPT5:Test_Text[Test, "MFR Not Empty"]
      endif

      if countof{SetMRA} != 0 then
         [] = RPT5:Test_Text[Test, "MRA Not Empty"]
      endif
   
      [] = RPT5:Test_Text[Test, "M  M Memory leak test complete"]

      {Set_Right} = find-all Many_Far_Right 

      Final_Right_Value = 0

      for This_Local_Right in {Set_Right} do
         Final_Right_Value = Final_Right_Value + This_Local_Right.MFR_Data
      endfor

      if Final_Right_Value != 0 then
         [] = RPT2:Test_Passed ["Navigate in MM loop", Test, Final_Right_Value]
      else
         [] = RPT3:Test_Failed ["Navigate in MM loop", Test, Final_Right_Value]
      endif

   endif

# End Test 1

#-------------------------------------------------------------------------------------#
# Test 2 -  Navigate from far left to many to right
#-------------------------------------------------------------------------------------#
   
   if Iteration = 2 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0601", "Relationships", "Set Navigation", "Navigate to a set via a chain"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0602"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0702"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0704"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      {SetRight} = One_Left -> R6.Middle -> R7.Many_Right

      if countof{SetRight} != 3 then
         Has_Failed   = TRUE
         Failure_Code = -10
      else

         Val1 = -20
         Val2 = -30
         Val3 = -40

         for InstRight in {SetRight} do
      
            if InstRight.Right_Identifier = 1 then
               Val1 = InstRight.Right_Identifier
            endif

            if InstRight.Right_Identifier = 2 then
               Val2 = InstRight.Right_Identifier
            endif

            if InstRight.Right_Identifier = 3 then
               Val3 = InstRight.Right_Identifier
            endif

         endfor

         if Val1 = 1 then

            if Val2 = 2 then

               if Val3 !=3 then
                  Has_Failed = TRUE
                  Failure_Code = Val3
               endif

            else
               Has_Failed = TRUE
               Failure_Code = Val2
            endif

         else
            Has_Failed = TRUE
            Failure_Code = Val1
         endif

      endif

      if Has_Failed then
         [] = RPT3:Test_Failed["Set navigation", Test, Failure_Code]
      else
         [] = RPT2:Test_Passed["Set navigation", Test, 0]
      endif

   endif

# End Test 2

#--------------------------------------------------------------------------------------------#
# Test 3 - Call a routine in a tight loop that will perform a navigation from a single 
#          instance to a set.
#          Repeat this call many times to monitor the release of memory when the local 
#          objects go out of scope.
#--------------------------------------------------------------------------------------------#

   if Iteration = 3 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0621", "Relationships", "Set Navigation", "Navigate one to many in loop"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0603"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1203"]

      # Create many objects for this navigation test.

      break_condition = 10
      outer_loop_counter = 0

      loop

         The_ID = outer_loop_counter + 10
         New_Left    = create Far_Left   with Left_Identifier   = The_ID & Left_Data = 0
         New_Middle  = create Middle     with Middle_Identifier = The_ID & Middle_Data = 0

         link New_Left R6 New_Middle

         inner_break_condition = 10
         inner_loop_counter = 0

         loop
            The_Inner_ID = inner_loop_counter + 10
            New_Right   = create Many_Right with Right_Identifier  = The_Inner_ID & Right_Data = 0 
            link New_Middle R7 New_Right

            inner_loop_counter = inner_loop_counter + 1
            breakif inner_loop_counter = inner_break_condition
         endloop

         outer_loop_counter = outer_loop_counter + 1
         breakif outer_loop_counter = break_condition

      endloop

      break_condition = 501

      Loop_Index = 1

      loop

         # Call the memory leak test many times. Monitor the memory useage in NT Task Manager
         [] = Relationships3::Memory_Leak_Test_One_To_Many[]

         Local_Left_Data = 0

         Loop_Index = Loop_Index + 1

         {Set_Of_Left} = find-all Far_Left
         for Local_Left in {Set_Of_Left} do
            Local_Left_Data = Local_Left_Data + Local_Left.Left_Data
         endfor

         breakif Loop_Index = break_condition

      endloop

      # Delete all of the instances created in this test
      {SetM} = find Middle where Middle_Identifier > 9

      for InstM in {SetM} do

         InstL = InstM -> R6.Far_Left
         unlink InstL R6 InstM
         delete InstL

         {SetMR} = InstM -> R7.Many_Right

         for InstMR in {SetMR} do
            unlink InstMR R7 InstM
            delete InstMR
         endfor
      
         delete InstM

      endfor


      {SetMR} = find Many_Right where Right_Identifier > 9
      {SetM}  = find Middle where Middle_Identifier > 9
      {SetFL} = find Far_Left where Left_Identifier > 9

      if countof {SetMR} != 0 then
         [] = RPT5:Test_Text[Test, "MR Not Empty"]
      endif

      if countof {SetM} != 0 then
         [] = RPT5:Test_Text[Test, "M Not Empty"]
      endif

      if countof {SetFL} != 0 then
         [] = RPT5:Test_Text[Test, "FL Not Empty"]
      endif

      [] = RPT5:Test_Text[Test, "1 M Memory leak test complete"]

      {Set_Of_Left} = find-all Far_Left

      Final_Left_Value = 0

      for Local_Left in {Set_Of_Left} do
         Final_Left_Value = Final_Left_Value + Local_Left.Left_Data
      endfor

      if Final_Left_Value != 0 then
         [] = RPT2:Test_Passed ["Navigate in loop", Test, Final_Left_Value]
      else
         [] = RPT3:Test_Failed ["Navigate in loop", Test, Final_Left_Value]
      endif

   endif

# End Test 3

#--------------------------------------------------------------------------------------------#
# Test 4 - Navigate from a single instance in the Middle Object to a set in the Many
#          Right object then navigate from the Many Right Object to the Many Above object
#--------------------------------------------------------------------------------------------#

   if Iteration = 4 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0704", "Relationships", "Set Navigation", "Single Instance to Single Instance M to MR to MA"]

      [] = RPT4:Test_Unsupported [Test]

      One_Above      =   create Many_Above with Above_Data = 1
      link One_Above R10 One_Right

     {SetMA} = One_Middle -> R7.Many_Right -> R10.Many_Above

      NoInSet = countof {SetMA}

      if NoInSet = 1 then

         for Inst in {SetMA} do
            if Inst.Above_Data = 1 then
               [] = RPT2:Test_Passed ["Single Instance to Single Instance M to MR to MA", Test, Inst.Above_Data]
            else
              [] = RPT3:Test_Failed ["Single Instance to Single Instance M to MR to MA", Test, Inst.Above_Data]
            endif
         endfor

      else
        [] = RPT3:Test_Failed ["Single Instance to Single Instance M to MR to MA", Test, NoInSet]
      endif

   endif


# End Test 4

#--------------------------------------------------------------------------------------------#
# Test 5 - Same as the previous test except navigating to a set in Many Above as opposed to a 
#          single instance
#--------------------------------------------------------------------------------------------#

   if Iteration = 5 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0704", "Relationships", "Set Navigation", "Single Instance to Set M to MR to MA"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0602"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0603"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0702"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      Three_Above   = create Many_Above with Above_Data        = 3   

      link Three_Above  R10 Three_Right

      {SetMA} = One_Middle -> R7.Many_Right -> R10.Many_Above

      NoInSet = countof {SetMA}

      if NoInSet = 2 then
         [] = RPT2:Test_Passed ["Single Instance to Set M to MR to MA", Test, NoInSet]
      else
         [] = RPT3:Test_Failed ["Single Instance to Set M to MR to MA", Test, NoInSet]
      endif

   endif 

# End Test 5

#--------------------------------------------------------------------------------------------#
# Test 6 - Add a new instance in Many Above object and link it to One_Right. 
#          Navigate from a single instance in the Middle Object to Many Right object then to 
#           Many Above object returning a set
#--------------------------------------------------------------------------------------------#

   if Iteration = 6 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0704", "Relationships", "Set Navigation", "Single to Set M to MR to MA"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0602"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0603"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0702"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      Two_Above       =   create Many_Above with Above_Data = 2  
      link Two_Above  R10 One_Right

      {SetMA} = One_Middle -> R7.Many_Right ->R10.Many_Above

      NoInSet = countof {SetMA}

      if NoInSet = 3 then
         [] = RPT2:Test_Passed ["Single to Set M to MR to MA", Test, NoInSet]
      else
         [] = RPT3:Test_Failed ["Single to Set M to MR to MA", Test, NoInSet]
      endif

   endif

# End Test 6

#--------------------------------------------------------------------------------------------#
# Test 7 - Add new link from Two_Above to Three_Right, Many Above object has three instances 
#          but four links. Navigate from Middle to Many Above through Many Right object
#--------------------------------------------------------------------------------------------#

   if Iteration = 7 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0704", "Relationships", "Set Navigation", "Single at M to Set at MA through RA"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0602"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0603"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0702"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      Two_Above = find-one Many_Above where Above_Data = 2

      link Two_Above R10 Three_Right

      {SetMA} = One_Middle -> R7.Many_Right -> R10.Many_Above

      NoInSet = countof {SetMA}

      if NoInSet = 4 then
         [] = RPT2:Test_Passed ["Single at M to Set at MA through RA", Test, NoInSet]
      else
         [] = RPT3:Test_Failed ["Single at M to Set at MA through RA", Test, NoInSet]
      endif

   endif

# End Test 7

#--------------------------------------------------------------------------------------------#
# Test 8 - Navigate from a single instance in Middle object to a set in the Many Right  
#          object. Navigate from the third instance of Many Right object to Many above object
#--------------------------------------------------------------------------------------------#

   if Iteration = 8 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0702", "Relationships", "Set Navigation", "M1 to MR then MR3 to MA"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0602"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0602"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      {SetMR} = One_Middle -> R7.Many_Right

      if countof {SetMR} != 3 then
         Has_Failed   = TRUE
         Failure_Code = -10
      else

         InstFound = FALSE

         for InstMR in {SetMR} do

            if InstMR.Right_Identifier = 3 then
               InstFound = TRUE
               {SetMA}   = InstMR -> R10.Many_Above
            
               if countof{SetMA} = 2 then
                  Val1 = -30
                  Val2 = -40

                  for InstMA in {SetMA} do

                     if InstMA.Above_Data = 2 then
                        Val1 = InstMA.Above_Data
                     endif

                     if InstMA.Above_Data = 3 then
                        Val2 = InstMA.Above_Data
                     endif

                  endfor

                  if Val1 = 2 then

                     if Val2 != 3 then
                        Has_Failed   = TRUE
                        Failure_Code = Val2
                     endif
  
                  else
                     Has_Failed   = TRUE
                     Failure_Code = Val1
                  endif

               else
                  Has_Failed   = TRUE
                  Failure_Code = -50
               endif

            endif

         endfor

         if not Has_Failed then

            if not InstFound then
               [] = RPT3:Test_Failed ["Instance not found", Test, -20]      
            else
               [] = RPT2:Test_Passed ["M1 to MR then MR3 to MA", Test, 0]
            endif

         else
            [] = RPT3:Test_Failed ["Navigation Failed", Test, Failure_Code]
         endif

      endif

   endif

# End Test 8

#--------------------------------------------------------------------------------------------#
# Test 9 - Navigate directly from Many Right object to Many Above object
#--------------------------------------------------------------------------------------------#

   if Iteration = 9 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0702", "Relationships", "Set Navigation", "Many Right to Many Above"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0602"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0603"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      Fourth_Right = create Many_Right with Right_Identifier  = 4 & Right_Data = 0
      Fourth_Above = create Many_Above with Above_Data = 4

      link Fourth_Above  R10 Fourth_Right

      {SetMA} = Fourth_Right -> R10.Many_Above

      if countof {SetMA} = 1 then

         for InstMA in {SetMA} do

            if InstMA.Above_Data = 4 then
               [] = RPT2:Test_Passed ["Many Right to Many Above", Test, 0]
            else
               [] = RPT3:Test_Failed ["Wrong instance found", Test, -10]
            endif

         endfor

      else
         [] = RPT3:Test_Failed ["Empty set in Many Above object", Test, -20]      
      endif

   endif

# End Test 9

#--------------------------------------------------------------------------------------------#
# Test 10 - Navigate from a single instance in Many Right object to Middle object
#--------------------------------------------------------------------------------------------#

   if Iteration = 10 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0701", "Relationships", "Set Navigation", "Many Right to Middle"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0602"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      InstM = Two_Right -> R7.Middle

      if InstM.Middle_Identifier = 1 then
         [] = RPT2:Test_Passed ["Many Right to Middle", Test, 0]
      else
         [] = RPT3:Test_Failed ["Wrong instance in Middle", Test, InstM.Middle_Identifier]
      endif

   endif

# End Test 10

#--------------------------------------------------------------------------------------------#
# Test 11 - Navigate from the many right accociative object to the many right object
#--------------------------------------------------------------------------------------------#

   if Iteration = 11 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0707", "Relationships", "Set Navigation", "Navigate from associative object to Many Right"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      InstMR= One_MRA -> R8.Many_Right   

      if InstMR.Right_Identifier = 1 then
         [] = RPT2:Test_Passed ["Associative object to Many Right", Test, 0]
      else
         [] = RPT3:Test_Failed ["Wrong instance in Many Right", Test, InstMR.Right_Identifier]
      endif

   endif

# End Test 11

#--------------------------------------------------------------------------------------------#
# Test 12 - Navigate from the many right accociative object to the many far right object
#--------------------------------------------------------------------------------------------#

   if Iteration = 12 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0707", "Relationships", "Set Navigation", "Assoc object to Many Far Right"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      InstMFR = Two_MRA -> R8.Many_Far_Right   

      if InstMFR.MFR_Identifier = 2 then
         [] = RPT2:Test_Passed ["Associative object to Many Right", Test, 0]
      else
         [] = RPT3:Test_Failed ["Wrong instance found", Test, InstMFR.MFR_Identifier]
      endif

   endif

# End Test 12

#--------------------------------------------------------------------------------------------#
# Test 13 - Test to make sure that the architecture does not restrict the number of instances
#           for a single object
#           Create 10000 instances as this is many times the maximum number of instances for
#           a single instance that is currently being implemented
#--------------------------------------------------------------------------------------------#

   if Iteration = 13 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0619", "Relationships", "Set Navigation", "Create many instances"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]


      # Set about creating 10000 instances of the Middle object
      Count = 0

      loop
         The_ID = Count + 100
         newMiddleInst = create Middle with Middle_Identifier = The_ID
         Count = Count + 1
         breakif Count = 10000

      endloop

      [] = RPT5:Test_Text[Test, "Instances created"]

      {SetM} = find Middle where Middle_Identifier >= 100

      No_Inst = countof {SetM}

      for InstM in {SetM} do
         delete InstM
      endfor

      [] = RPT5:Test_Text[Test, "Instances deleted"]

      if No_Inst = 10000 then
         [] = RPT2:Test_Passed ["All instances created", Test, 0]
      else
         [] = RPT3:Test_Failed ["Instances incorrectly created", Test, No_Inst]
      endif

   endif

# End Test 13

#--------------------------------------------------------------------------------------------#
# Test 14 - Test that architecture does not restrict the total number of instances
#           There are 40 plus objects in the relationships domain each object is going to be
#           populated with 10000 instances making 400000 plus instances.
#--------------------------------------------------------------------------------------------#

   if Iteration = 14 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0619", "Relationships", "Set Navigation", "Create many instances"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]

      Count = 0

      loop
         The_ID = Count + 100

         newA          = create Object_A         with idA               = The_ID
         newB          = create Object_B         with idB               = The_ID
         newC          = create Object_C         with idC               = The_ID
         newD          = create Object_D         with idD               = The_ID
         newDO         = create Object_DO        with idDO              = The_ID
         newE          = create Object_E         with idE               = The_ID
         newF          = create Object_F         with idF               = The_ID
         newEF         = create Object_EF        with idEF              = The_ID
         newG          = create Object_G         with idG               = The_ID         
         newH          = create Object_H         with idH               = The_ID
         newI          = create Object_I         with IDI               = The_ID
         newK          = create Object_K         with idK               = The_ID
         newL          = create Object_L         with idL               = The_ID
         newO          = create Object_O         with idO               = The_ID
         newP          = create Object_P         with idP               = The_ID 
         newQ          = create Object_Q         with idQ               = The_ID
         newR          = create Object_R         with idR               = The_ID
         newLO         = create Left_Object      with idLO              = The_ID
         newMO         = create Middle_Object    with idMO              = The_ID
         newRO         = create Right_Object     with idRO              = The_ID
         newMRAssoc    = create MR_Assoc         with idMR              = The_ID
         newLeftMany   = create Left_Many        with idLM              = The_ID
         newRightMany  = create Right_Many       with idRM              = The_ID
         newLMRMAssoc  = create LMRM_Assoc       with idLMRM            = The_ID
         newBottomMany = create Bottom_Many      with idBM              = The_ID
         newSL1        = create Sub_L1           with idSL1             = The_ID
         newSL2        = create Sub_L2           with idSL2             = The_ID
         newSL3        = create Sub_L3           with idSL3             = The_ID
         newSSL1       = create Sub_Sub_L1       with idSSL1            = The_ID 
         newSSL2       = create Sub_Sub_L2       with idSSL2            = The_ID 
         newSSL3       = create Sub_Sub_L3       with idSSL3            = The_ID 
         newSSL4       = create Sub_Sub_L4       with idSSL4            = The_ID 
         newSSL5       = create Sub_Sub_L5       with idSSL5            = The_ID 
         newSSL6       = create Sub_Sub_L6       with idSSL6            = The_ID 
         newSSL7       = create Sub_Sub_L7       with idSSL7            = The_ID 
         newSSL8       = create Sub_Sub_L8       with idSSL8            = The_ID 
         newSSL9       = create Sub_Sub_L9       with idSSL9            = The_ID 
         newSSL10      = create Sub_Sub_L10      with idSSL10           = The_ID 
         newSSL11      = create Sub_Sub_L11      with idSSL11           = The_ID 
         newSSSL1      = create Sub_Sub_Sub_L1   with idSSSL1           = The_ID 
         newSSSL2      = create Sub_Sub_Sub_L2   with idSSSL2           = The_ID 
         newFL         = create Far_Left         with Left_Identifier   = The_ID
         newMiddleInst = create Middle           with Middle_Identifier = The_ID
         newMR         = create Many_Right       with Right_Identifier  = The_ID
         newMA         = create Many_Above       with Above_Data        = The_ID
         newMRA        = create Many_Right_Assoc with MRA_Identifier    = The_ID
         newMFR        = create Many_Far_Right   with MFR_Identifier    = The_ID

         Count = Count + 1
         breakif Count = 10000

      endloop

      [] = RPT5:Test_Text[Test, "Instances created"]
      
      {SetA}          = find Object_A         where idA               >= 100
      {SetB}          = find Object_B         where idB               >= 100
      {SetC}          = find Object_C         where idC               >= 100
      {SetD}          = find Object_D         where idD               >= 100
      {SetDO}         = find Object_DO        where idDO              >= 100
      {SetE}          = find Object_E         where idE               >= 100
      {SetF}          = find Object_F         where idF               >= 100
      {SetEF}         = find Object_EF        where idEF              >= 100
      {SetG}          = find Object_G         where idG               >= 100  
      {SetH}          = find Object_H         where idH               >= 100
      {SetI}          = find Object_I         where IDI               >= 100
      {SetK}          = find Object_K         where idK               >= 100
      {SetL}          = find Object_L         where idL               >= 100
      {SetO}          = find Object_O         where idO               >= 100
      {SetP}          = find Object_P         where idP               >= 100
      {SetQ}          = find Object_Q         where idQ               >= 100
      {SetR}          = find Object_R         where idR               >= 100
      {SetLO}         = find Left_Object      where idLO              >= 100
      {SetMO}         = find Middle_Object    where idMO              >= 100
      {SetRO}         = find Right_Object     where idRO              >= 100
      {SetMRAssoc}    = find MR_Assoc         where idMR              >= 100
      {SetLeftMany}   = find Left_Many        where idLM              >= 100
      {SetRightMany}  = find Right_Many       where idRM              >= 100
      {SetLMRMAssoc}  = find LMRM_Assoc       where idLMRM            >= 100
      {SetBottomMany} = find Bottom_Many      where idBM              >= 100
      {SetSL1}        = find Sub_L1           where idSL1             >= 100
      {SetSL2}        = find Sub_L2           where idSL2             >= 100
      {SetSL3}        = find Sub_L3           where idSL3             >= 100
      {SetSSL1}       = find Sub_Sub_L1       where idSSL1            >= 100
      {SetSSL2}       = find Sub_Sub_L2       where idSSL2            >= 100
      {SetSSL3}       = find Sub_Sub_L3       where idSSL3            >= 100
      {SetSSL4}       = find Sub_Sub_L4       where idSSL4            >= 100
      {SetSSL5}       = find Sub_Sub_L5       where idSSL5            >= 100
      {SetSSL6}       = find Sub_Sub_L6       where idSSL6            >= 100
      {SetSSL7}       = find Sub_Sub_L7       where idSSL7            >= 100
      {SetSSL8}       = find Sub_Sub_L8       where idSSL8            >= 100
      {SetSSL9}       = find Sub_Sub_L9       where idSSL9            >= 100
      {SetSSL10}      = find Sub_Sub_L10      where idSSL10           >= 100
      {SetSSL11}      = find Sub_Sub_L11      where idSSL11           >= 100
      {SetSSSL1}      = find Sub_Sub_Sub_L1   where idSSSL1           >= 100
      {SetSSSL2}      = find Sub_Sub_Sub_L2   where idSSSL2           >= 100
      {SetFL}         = find Far_Left         where Left_Identifier   >= 100
      {SetMiddleInst} = find Middle           where Middle_Identifier >= 100
      {SetMR}         = find Many_Right       where Right_Identifier  >= 100
      {SetMA}         = find Many_Above       where Above_Data        >= 100
      {SetMRA}        = find Many_Right_Assoc where MRA_Identifier    >= 100
      {SetMFR}        = find Many_Far_Right   where MFR_Identifier    >= 100

      The_Grand_Total = countof {SetA}
      The_Grand_Total = The_Grand_Total + countof {SetB}
      The_Grand_Total = The_Grand_Total + countof {SetC}
      The_Grand_Total = The_Grand_Total + countof {SetD}
      The_Grand_Total = The_Grand_Total + countof {SetDO}
      The_Grand_Total = The_Grand_Total + countof {SetE}
      The_Grand_Total = The_Grand_Total + countof {SetEF}
      The_Grand_Total = The_Grand_Total + countof {SetG}
      The_Grand_Total = The_Grand_Total + countof {SetH}
      The_Grand_Total = The_Grand_Total + countof {SetI}
      The_Grand_Total = The_Grand_Total + countof {SetK}
      The_Grand_Total = The_Grand_Total + countof {SetL}
      The_Grand_Total = The_Grand_Total + countof {SetO}
      The_Grand_Total = The_Grand_Total + countof {SetP}
      The_Grand_Total = The_Grand_Total + countof {SetQ}
      The_Grand_Total = The_Grand_Total + countof {SetR}
      The_Grand_Total = The_Grand_Total + countof {SetLO}
      The_Grand_Total = The_Grand_Total + countof {SetMO}
      The_Grand_Total = The_Grand_Total + countof {SetRO}
      The_Grand_Total = The_Grand_Total + countof {SetMRAssoc}
      The_Grand_Total = The_Grand_Total + countof {SetLeftMany}
      The_Grand_Total = The_Grand_Total + countof {SetRightMany}
      The_Grand_Total = The_Grand_Total + countof {SetLMRMAssoc}
      The_Grand_Total = The_Grand_Total + countof {SetBottomMany}
      The_Grand_Total = The_Grand_Total + countof {SetSL1}
      The_Grand_Total = The_Grand_Total + countof {SetSL2}
      The_Grand_Total = The_Grand_Total + countof {SetSL3}
      The_Grand_Total = The_Grand_Total + countof {SetSSL1}
      The_Grand_Total = The_Grand_Total + countof {SetSSL2}
      The_Grand_Total = The_Grand_Total + countof {SetSSL3}
      The_Grand_Total = The_Grand_Total + countof {SetSSL4}
      The_Grand_Total = The_Grand_Total + countof {SetSSL5}
      The_Grand_Total = The_Grand_Total + countof {SetSSL6}
      The_Grand_Total = The_Grand_Total + countof {SetSSL7}
      The_Grand_Total = The_Grand_Total + countof {SetSSL8}
      The_Grand_Total = The_Grand_Total + countof {SetSSL9}
      The_Grand_Total = The_Grand_Total + countof {SetSSL10}
      The_Grand_Total = The_Grand_Total + countof {SetSSL11}
      The_Grand_Total = The_Grand_Total + countof {SetSSSL1}
      The_Grand_Total = The_Grand_Total + countof {SetSSSL2}
      The_Grand_Total = The_Grand_Total + countof {SetFL}
      The_Grand_Total = The_Grand_Total + countof {SetMiddleInst}
      The_Grand_Total = The_Grand_Total + countof {SetMR}
      The_Grand_Total = The_Grand_Total + countof {SetMA}
      The_Grand_Total = The_Grand_Total + countof {SetMRA}
      The_Grand_Total = The_Grand_Total + countof {SetMFR}

      if The_Grand_Total = 460000 then
         [] = RPT2:Test_Passed ["All instances created", Test, 0]
      else
         [] = RPT3:Test_Failed ["Instances incorrectly created", Test, The_Grand_Total]
      endif

      [] = RPT5:Test_Text[Test, "Deleting instances"]      

      for InstA in {SetA} do
         delete InstA
      endfor

      for InstB in {SetB} do
         delete InstB
      endfor

      for InstC in {SetC} do
         delete InstC
      endfor

      for InstD in {SetD} do
         delete InstD
      endfor

      for InstDO in {SetDO} do
         delete InstDO
      endfor

      for InstE in {SetE} do
         delete InstE
      endfor

      for InstEF in {SetEF} do
         delete InstEF
      endfor

      for InstF in {SetF} do
         delete InstF
      endfor

      for InstG in {SetG} do
         delete InstG
      endfor

      for InstH in {SetH} do
         delete InstH
      endfor

      for InstI in {SetI} do
         delete InstI
      endfor

      for InstK in {SetK} do
         delete InstK
      endfor

      for InstL1 in {SetL} do
         delete InstL1
      endfor

      for InstO in {SetO} do
         delete InstO
      endfor

      for InstP in {SetP} do
         delete InstP
      endfor

      for InstQ in {SetQ} do
         delete InstQ
      endfor

      for InstR in {SetR} do
         delete InstR
      endfor

      for InstLO in {SetLO} do
         delete InstLO
      endfor

      for InstRO in {SetRO} do
         delete InstRO
      endfor

      for InstMO in {SetMO} do
         delete InstMO
      endfor

      for InstMRAssoc in {SetMRAssoc} do
         delete InstMRAssoc
      endfor

      for InstLeftMany in {SetLeftMany} do
         delete InstLeftMany
      endfor

      for InstRightMany in {SetRightMany} do
         delete InstRightMany
      endfor

      for InstLMRMAssoc in {SetLMRMAssoc} do
         delete InstLMRMAssoc
      endfor

      for InstBottomMany in {SetBottomMany} do
         delete InstBottomMany
      endfor

      for InstSL1 in {SetSL1} do
         delete InstSL1
      endfor

      for InstSL2 in {SetSL2} do
         delete InstSL2
      endfor

      for InstSL3 in {SetSL3} do
         delete InstSL3
      endfor

      for InstSSL1 in {SetSSL1} do
         delete InstSSL1
      endfor

      for InstSSL2 in {SetSSL2} do
         delete InstSSL2
      endfor

      for InstSSL3 in {SetSSL3} do
         delete InstSSL3
      endfor

      for InstSSL4 in {SetSSL4} do
         delete InstSSL4
      endfor

      for InstSSL5 in {SetSSL5} do
         delete InstSSL5
      endfor

      for InstSSL6 in {SetSSL6} do
         delete InstSSL6
      endfor

      for InstSSL7 in {SetSSL7} do
         delete InstSSL7
      endfor

      for InstSSL8 in {SetSSL8} do
         delete InstSSL8
      endfor

      for InstSSL9 in {SetSSL9} do
         delete InstSSL9
      endfor

      for InstSSL10 in {SetSSL10} do
         delete InstSSL10
      endfor

      for InstSSL11 in {SetSSL11} do
         delete InstSSL11
      endfor

      for InstSSSL1 in {SetSSSL1} do
         delete InstSSSL1
      endfor

      for InstSSSL2 in {SetSSSL2} do
         delete InstSSSL2
      endfor

      for InstFarLeft in {SetFL} do
         delete InstFarLeft
      endfor

      for InstMiddleInst in {SetMiddleInst} do
         delete InstMiddleInst
      endfor

      for InstMR in {SetMR} do
         delete InstMR
      endfor

      for InstMA in {SetMA} do
         delete InstMA
      endfor

      for InstMRA in {SetMRA} do
         delete InstMRA
      endfor

      for InstMFR in {SetMFR} do
         delete InstMFR
      endfor

      [] = RPT5:Test_Text[Test, "Instances Deleted"] 

   endif',3,'',"00000000-0000-0000-0000-0000000007db",2,2 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-0000000007e0","00000000-0000-0000-0000-00000000008c",'Delete_Relationships','',"ba5eda7a-def5-0000-0000-000000000000",0,'#-------------------------------------------------------------------#
#
# Delete all relationships
#
# The architectre shall provide a mechanism to allow deletion of a 
# simple relationship link between two object instance
# 1241-0000-01-0604
#
# The architecture shall provide a mechanism to allow the deletion of 
# an associative link between an associative object and the link 
# between two objects
# 1241-0000-01-0612
#
# The architecture shall provide a mechanism to allow the deletion 
# of a link between two objects in a associative relationship
# 1241-0000-01-0613
#
# The architecture shall support a translation of the ASL unassociate
# statment to map to the mechanism that allows the deletion of an 
# associative link between an associative object and the link between
# two objects
# 1241-0000-01-1203
#
# The architecture shall support a translation of the ASL unlink
# statement to map to the mechanism that allow the deletion of a 
# link between two objects in a relationship
# 1241-0000-01-1204
#
# The architecture shall support a translation of the ASL navigate
# statment to map to the mechanism that allows the traversal of
# relationship links
# 1241-0000-01-1205
#
#-------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1241-0000-01-0604", "Relationships", "Set Navigation", "Delete objects and relationships"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0612"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0613"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-1203"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-1204"]
   [] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
   [] = RPT8:Specify_Requid [Test, "1103-0000-01-0622"]

   One_Left     = find-one Far_Left   where Left_Identifier   = 1
   One_Middle   = find-one Middle     where Middle_Identifier = 1
   One_Right    = find-one Many_Right where Right_Identifier  = 1
   Two_Right    = find-one Many_Right where Right_Identifier  = 2
   Three_Right  = find-one Many_Right where Right_Identifier  = 3
   Fourth_Right = find-one Many_Right where Right_Identifier  = 4
   Five_Right   = find-one Many_Right where Right_Identifier  = 5
   Six_Right    = find-one Many_Right where Right_Identifier  = 6

   One_MRA = find-one Many_Right_Assoc where MRA_Identifier  = 1
   Two_MRA = find-one Many_Right_Assoc where MRA_Identifier  = 2

   One_MFR = find-one Many_Far_Right where MFR_Identifier = 1
   Two_MFR = find-one Many_Far_Right where MFR_Identifier = 2

   One_Above    = find-one Many_Above where Above_Data = 1
   Two_Above    = find-one Many_Above where Above_Data = 2
   Three_Above  = find-one Many_Above where Above_Data = 3
   Fourth_Above = find-one Many_Above where Above_Data = 4

   Has_Failed   = FALSE
   Failure_Code = 0

   unlink One_Left   R6 One_Middle

   unlink One_Middle R7 One_Right
   unlink One_Middle R7 Two_Right
   unlink One_Middle R7 Three_Right
   
   unlink One_Above     R10 One_Right
   unlink Two_Above     R10 One_Right
   unlink Two_Above     R10 Three_Right
   unlink Three_Above   R10 Three_Right
   unlink Fourth_Above  R10 Fourth_Right

   unassociate One_Right R8 One_MFR from One_MRA
   unassociate One_Right R8 Two_MFR from Two_MRA
   unassociate Two_Right R8 Two_MFR from Two_MRA

   unlink One_Right R8 One_MFR
   unlink One_Right R8 Two_MFR
   unlink Two_Right R8 Two_MFR

   # Test each object for any relationship links prior to deletion
   InstM = One_Left -> R6.Middle

   if InstM = UNDEFINED then
      delete One_Left
   else
      Has_Failed   = TRUE
      Failure_Code = -1
   endif

   {SetMR} = One_Middle -> R7.Many_Right

   if countof{SetMR} = 0 then
      delete One_Middle
   else
      Has_Failed = TRUE
      Failure_Code = Failure_Code - 2
   endif

   {SetMA} = One_Right -> R10.Many_Above

   if countof{SetMA} = 0 then
      delete One_Above
   else
      Has_Failed = TRUE
      Failure_Code = Failure_Code - 4
   endif

   {SetMA} = Three_Right -> R10.Many_Above

   if countof{SetMA} = 0 then
      delete Two_Above
      delete Three_Above
      delete Three_Right
   else
      Has_Failed = TRUE
      Failure_Code = Failure_Code - 8
   endif

   {SetMRA}  = One_Right -> R8.Many_Right_Assoc

   if countof{SetMRA} = 0 then
      delete One_Right
      delete One_MRA
      delete One_MFR
   else
      Has_Failed = TRUE
      Failure_Code = Failure_Code - 16
   endif

   {SetMRA} = Two_MFR -> R8.Many_Right_Assoc
   if countof {SetMRA} = 0 then
      delete Two_MRA
      delete Two_MFR
   else
      Has_Failed = TRUE
      Failure_Code = Failure_Code - 32
   endif

   {SetMA} = Fourth_Right -> R10.Many_Above
   if countof {SetMA} = 0 then
      delete Fourth_Right
      delete Fourth_Above
   else
      Has_Failed = TRUE
      Failure_Code = -64
   endif
   
   # Delete remaining unlinked instances
   delete Two_Right

   if not Has_Failed then

      {SetFL}  = find-all Far_Left
      {SetM}   = find-all Middle
      {SetMR}  = find-all Many_Right
      {SetMA}  = find-all Many_Above
      {SetMRA} = find-all Many_Right_Assoc
      {SetMFR} = find-all Many_Far_Right

      CountFL = countof{SetFL}
      CountM  = countof{SetM}
      CountMR = countof{SetMR}
      CountMA = countof{SetMA}
      CountMRA = countof{SetMRA}
      CountMFR = countof{SetMFR}

      if CountFL = 0 then

         if CountM = 0 then

            if CountMR = 0 then

               if CountMA = 0 then

                  if CountMRA = 0 then

                     if CountMFR != 0 then
                        [] = RPT3:Test_Failed ["Delete all objects and relationships", Test, -10]      
                     else
                        [] = RPT2:Test_Passed ["Delete all objects and relationships", Test, 0]
                     endif

                  else
                     [] = RPT3:Test_Failed ["Delete all objects and relationships", Test, -20]      
                  endif

               else
                  [] = RPT3:Test_Failed ["Delete all objects and relationships", Test, -30]      
               endif

            else
               [] = RPT3:Test_Failed ["Delete all objects and relationships", Test, -40]      
            endif

         else
            [] = RPT3:Test_Failed ["Delete all objects and relationships", Test, -50]      
         endif

      else
         [] = RPT3:Test_Failed ["Delete all objects and relationships", Test, -60]      
      endif

   else
      [] = RPT3:Test_Failed ["Delete all objects and relationships", Test, Failure_Code]      
   endif

# End Test 21
',3,'',"00000000-0000-0000-0000-0000000007dd",2,3 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-0000000007f0","00000000-0000-0000-0000-000000000097",'Super_Sub_Relationships','',"ba5eda7a-def5-0000-0000-000000000000",0,'#-------------------------------------------------------------------#
#
# Subtype/Supertype relationship
#
# The architecture shall implement supertype/subtype relationships
# 1241-0000-01-0614
#
# The architecture shall provide a mechanism to allow creation of a 
# supertype/subtype relationship link between two object instances
# 1241-0000-01-0615
#
# The architecture shall provide a mechanism to all deletion of a 
# supertype/subtype relationship link between two object instances
# 1241-0000-01-0616
# 
# The architecture shall support a minimum of three subtype trees 
# from any supertype object class
# 1241-0000-01-0617
#
# The architecture shall tress of depth greater than 1
# 1241-0000-01-0618
# 
# The architecture shall provide operations which, given a stating 
# instance handle and a relationship specification, return a set of
# instance handles
# 1241-0000-01-0702
#
# The architecture shall support naviagations from a subtype object 
# to a supertype object expressed in ASL
# 1241-0000-01-0708
#
# The architecture shall support navigations from a supertype object
# to a subtype object expressed in ASL
# 1241-0000-01-0709
#
# The architecture shall support a translation of the ASL link 
# statment to map to the mechanism that allows creation of a 
# relationship link between two object instances
# 1241-0000-01-1202
#
# The architecture shall support a translation of the ASL unlink
# statement to map to the mechanism that allow the deletion of a 
# link between two objects in a relationship
# 1241-0000-01-1204
#
# The architecture shall support a translation of the ASL navigate
# statment to map to the mechanism that allows the traversal of
# relationship links
# 1241-0000-01-1205
#
#-------------------------------------------------------------------#

# Initialise the variables
Has_Failed   = FALSE
Unsupported  = FALSE
#-------------------------------------------------------------------#

# Find the desired instances Object_H
firstH  = find-one Object_H where idH = 1
secondH = find-one Object_H where idH = 2
thirdH  = find-one Object_H where idH = 3
fourthH = find-one Object_H where idH = 4
fifthH  = find-one Object_H where idH = 5

# Find the desired instances Object_L
firstL  = find-one Object_L where idL = 1
secondL = find-one Object_L where idL = 2
thirdL  = find-one Object_L where idL = 3

# Find the desired instances Object_I
secondI  = find-one Object_I where IDI = 2
thirdI   = find-one Object_I where IDI = 3
fourthI  = find-one Object_I where IDI = 4
fifthI   = find-one Object_I where IDI = 5

# Find the desired instance of Object_K
firstK = find-one Object_K where idK = 1
thirdK = find-one Object_K where idK = 3
fifthK = find-one Object_K where idK = 5

# Find the desired instance of Sub_L2
secondSL2 = find-one Sub_L2 where idSL2 = 2

# Find the desired instances Sub_L3
firstSL3  = find-one Sub_L3 where idSL3 = 1
secondSL3 = find-one Sub_L3 where idSL3 = 2
thirdSL3  = find-one Sub_L3 where idSL3 = 3

# Find the desired instances Sub_Sub_L1
firstSSL1 = find-one Sub_Sub_L1 where idSSL1 = 1

# Find the desired instances Sub_Sub_L2
secondSSL2 = find-one Sub_Sub_L2 where idSSL2 = 2

# Find the desired instances Sub_Sub_L3
thirdSSL3 = find-one Sub_Sub_L3 where idSSL3 = 3

# Find the desired instances Sub_Sub_L4
fourthSSL4 = find-one Sub_Sub_L4 where idSSL4 = 4

# Find the desired instances Sub_Sub_L5
fifthSSL5 = find-one Sub_Sub_L5 where idSSL5 = 5

# Find the desired instances Sub_Sub_L6
firstSSL6  = find-one Sub_Sub_L6 where idSSL6 = 1
fourthSSL6 = find-one Sub_Sub_L6 where idSSL6 = 4

# Find the desired instances Sub_Sub_L7
secondSSL7 = find-one Sub_Sub_L7 where idSSL7 = 2

# Find the desired instances Sub_Sub_L8
thirdSSL8 = find-one Sub_Sub_L8 where idSSL8 = 3

# Find the desired instances Sub_Sub_L9
fourthSSL9 = find-one Sub_Sub_L9 where idSSL9 = 4

# Find the desired instances Sub_Sub_L10
thirdSSL10 = find-one Sub_Sub_L10 where idSSL10 = 3
fifthSSL10 = find-one Sub_Sub_L10 where idSSL10 = 5

# Find the desired instances Sub_Sub_L10
fourthSSSL2 = find-one Sub_Sub_Sub_L2 where idSSSL2 = 4 

#-------------------------------------------------------------------#
# Test 1 - Navigate from second instance of Object H to Object L
#-------------------------------------------------------------------#

   if Iteration = 1 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0709", "Relationships", "objH", "ObjH to ObjL"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0614"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0615"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0616"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      # Create a relationship
      link secondH R9 firstL

      # Perform the navigation
      InstL = secondH -> R9.Object_L

      # Check the result of the navigation
      if InstL = UNDEFINED then
         Has_Failed   = TRUE
         Failure_Code = -10
      else

         if InstL.idL != 1 then
            Has_Failed   = TRUE
            Failure_Code = -20
         endif

      endif

      # Unlink the relationship
      unlink secondH R9 firstL

   endif

# End Test 1

#-------------------------------------------------------------------#
# Test 2 - Navigate from the first instance of object H to Object I
#-------------------------------------------------------------------#

   if Iteration = 2 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0709", "Relationships", "objH", "ObjH to ObjI"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0614"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0615"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0616"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]


      # Create the relationship
      link firstH R9 thirdI

      # Perform the navigation
      InstI = firstH -> R9.Object_I

      # Check the result of the navigation
      if InstI = UNDEFINED then
         Has_Failed   = TRUE
         Failure_Code = -10
      else

         if InstI.IDI != 3 then
            Has_Failed   = TRUE
            Failure_Code = -20
         endif

      endif

      # Unlink the relationship
      unlink firstH R9 thirdI

   endif

# End Test 2

#-------------------------------------------------------------------#
# Test 3 - Navigate a chained relationship from the third instance of 
#          Object H to the third instance of SubL3 via Object L
#-------------------------------------------------------------------#

   if Iteration = 3 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0709", "Relationships", "objH", "ObjH to SubL3 via ObjL"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0614"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0615"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0616"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0618"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]


      # Create the relationship
      link thirdH R9 thirdL
      link thirdL R26 thirdSL3

      # Perform the navigation
      InstSL3 = thirdH -> R9.Object_L -> R26.Sub_L3

      # Check the result of the navigation
      if InstSL3 = UNDEFINED then
         Has_Failed   = TRUE
         Failure_Code = -10
      else

         if InstSL3.idSL3 != 3 then
            Has_Failed   = TRUE
            Failure_Code = -20
         endif

      endif

      # Unlink the relationships
      unlink thirdH R9 thirdL
      unlink thirdL R26 thirdSL3

   endif

# End Test 3

#-------------------------------------------------------------------#
# Test 4 - Navigate from the second instance of Object H again this  
#          time to the fifth instance of Object I
#-------------------------------------------------------------------#

   if Iteration = 4 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0709", "Relationships", "objH", "ObjH to ObjI"]  
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0614"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0615"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0616"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      # Create the relationship
      link secondH R9 fifthI

      # Perform the navigation
      InstI = secondH -> R9.Object_I

      # Check the result of the navigation
      if InstI = UNDEFINED then
         Has_Failed   = TRUE
         Failure_Code = -10
      else

         if InstI.IDI != 5 then
            Has_Failed   = TRUE
            Failure_Code = -20
         endif

      endif

      # Unlink the relationship
      unlink secondH R9 fifthI

   endif

# End Test 4

#-------------------------------------------------------------------#
# Test 5 - Navigate from Object L to Sub L2 without linking Object L  
#          to Object H
#-------------------------------------------------------------------#

   if Iteration = 5 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-1205", "Relationships", "objH", "ObjL to SubSL2"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      # Create the relationship
      link secondL R26 secondSL2

      # Perform the navigation
      InstSL2 = secondL -> R26.Sub_L2
      
      # Check the results of the navigation
      if InstSL2 = UNDEFINED then
         Has_Failed   = TRUE
         Failure_Code = -10
      else

         if InstSL2.idSL2 != 2 then
            Has_Failed   = TRUE
            Failure_Code = -20
         endif

      endif

      # Unlink the relationship
      unlink secondL R26 secondSL2

   endif

# End Test 5

#-------------------------------------------------------------------#
# Test 6 - Attempt to navigate a partially defined relationship, i.e.
#          the last sequence in the relationship has been deleted
#-------------------------------------------------------------------#

   if Iteration = 6 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-1205", "Relationships", "objH", "Partially defined relationship"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      # Create the relationship
      link firstH R9 firstL

      # Perform the navigation
      InstSL1 = firstH -> R9.Object_L -> R26.Sub_L1

      # Check the result of the navigation
      if InstSL1 != UNDEFINED then
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

      # Unlink the relationship
      unlink firstH R9 firstL

   endif

# End Test 6

#-------------------------------------------------------------------#
# Test 7 - Attempt to navigate to one subtype object while linked to 
#          another
#-------------------------------------------------------------------#

   if Iteration = 7 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-1205", "Relationships", "objH", "Attempt to nav incorrect to subtype"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      # Define a relationship
      link thirdH R9 firstL

      # Perform the navigation
      InstI = thirdH -> R9.Object_I

      # Check the result of the navigation
      if InstI != UNDEFINED then
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

      # Deleete the relationship
      unlink thirdH R9 firstL

   endif

# End Test 7

#-------------------------------------------------------------------#
# Test 8 - Attempt to navigate undefined relationship
#-------------------------------------------------------------------#

   if Iteration = 8 then

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objH", "Attempt to navigate undefined relationship"]

      InstI = thirdH -> R9.Object_I

      # Check the reult of the navigation
      if InstI != UNDEFINED then
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

   endif

# End Test 8

#-------------------------------------------------------------------#
# Test 9 - Navigate to all subtype treesbranching off Sub_L3
#-------------------------------------------------------------------#

   if Iteration = 9 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0709", "Relationships", "objH", "Navigate to all subtypes trees off SL3"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0614"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0615"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0616"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0617"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      # Create the relationships
      link firstH R9 firstL
      link firstL R26 secondSL3
      link secondSL3 R27 firstSSL1
      link secondSL3 R29 secondSSL7
      link secondSL3 R30 thirdSSL8
      link secondSL3 R31 fifthSSL10

      # Perform all of the navigations
      InstSSL1  = firstH -> R9.Object_L -> R26.Sub_L3 -> R27.Sub_Sub_L1
      InstSSL7  = firstH -> R9.Object_L -> R26.Sub_L3 -> R29.Sub_Sub_L7
      InstSSL8  = firstH -> R9.Object_L -> R26.Sub_L3 -> R30.Sub_Sub_L8
      InstSSL10 = firstH -> R9.Object_L -> R26.Sub_L3 -> R31.Sub_Sub_L10

      if InstSSL1 != UNDEFINED then

         if InstSSL7 != UNDEFINED then

            if InstSSL8 != UNDEFINED then

               if InstSSL10 != UNDEFINED then
                  Has_Failed   = FALSE
               else
                  Has_Failed   = TRUE
                  Failure_Code = -40
               endif

            else
               Has_Failed   = TRUE
               Failure_Code = -30   
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = -20
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -10
      endif     


      # Delete the relationships
      unlink firstH R9 firstL
      unlink firstL R26 secondSL3
      unlink secondSL3 R27 firstSSL1
      unlink secondSL3 R29 secondSSL7
      unlink secondSL3 R30 thirdSSL8
      unlink secondSL3 R31 fifthSSL10     

   endif

# End Test 9

#-------------------------------------------------------------------#
# Test 10 - Navigate from Object H all the way down to 
#           Sub_Sub_Sub_L1
#-------------------------------------------------------------------#

   if Iteration = 10 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0709", "Relationships", "objH", "H to L to SL to SSl to SSSL"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0614"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0615"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0616"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0618"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      # Create the relationships
      link secondH    R9 thirdL
      link thirdL     R26 secondSL3
      link secondSL3  R27 secondSSL2
      link secondSSL2 R28 fourthSSSL2

      # Perform the navigation
      InstSSSL2 = secondH -> R9.Object_L -> R26.Sub_L3 -> R27.Sub_Sub_L2 -> R28.Sub_Sub_Sub_L2

      if InstSSSL2 = UNDEFINED then
         Has_Failed   = TRUE
         Failure_Code = -10
      else
         
         if InstSSSL2.idSSSL2 != 4 then
            Has_Failed = TRUE
            Failure_Code = -20
         endif

      endif

      # Delete the relationships
      unlink secondH    R9 thirdL
      unlink thirdL     R26 secondSL3
      unlink secondSL3  R27 secondSSL2
      unlink secondSSL2 R28 fourthSSSL2

   endif

# End Test 10

#-------------------------------------------------------------------#
# Test 11 - Navigate from SSL10 to SSL6 via SL3
#-------------------------------------------------------------------#

   if Iteration = 11 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0708", "Relationships", "objH", "SSL10 to SLL6 via SL3"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0614"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0615"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0616"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0617"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      # Create the relationships
      link firstSL3 R31 thirdSSL10
      link firstSL3 R29 fourthSSL6

      # Perform the navigation
      InstSSL6 = thirdSSL10 -> R31.Sub_L3 -> R29.Sub_Sub_L6

      if InstSSL6 != UNDEFINED then
   
         if InstSSL6.idSSL6 = 4 then
            Has_Failed = FALSE
         else
            Has_Failed   = TRUE
            Failure_Code = -20
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

      # Delete the relationships
      unlink firstSL3 R31 thirdSSL10
      unlink firstSL3 R29 fourthSSL6
      
   endif

# End Test 11

#-------------------------------------------------------------------#
# Test 12 - Navigate from Sub_Sub_Sub_L2 to Object H
#-------------------------------------------------------------------#

   if Iteration = 12 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0708", "Relationships", "objH", "SSSL2 to ObjH"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0614"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0615"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0616"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0618"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      # Create the relationships
      link firstH     R9  secondL
      link secondL    R26 secondSL3
      link secondSL3  R27 secondSSL2
      link secondSSL2 R28 fourthSSSL2

      # Perform the navigation
      InstH = fourthSSSL2 -> R28.Sub_Sub_L2 -> R27.Sub_L3 -> R26.Object_L -> R9.Object_H

      if InstH != UNDEFINED then
      
         if InstH.idH = 1 then
            Has_Failed = FALSE
         else
            Has_Failed = TRUE
            Failure_Code = -20
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

      # Delete the relationships
      unlink firstH     R9  secondL
      unlink secondL    R26 secondSL3
      unlink secondSL3  R27 secondSSL2
      unlink secondSSL2 R28 fourthSSSL2

   endif

# End Test 12

#-------------------------------------------------------------------#
# Test 13 - Navigate from Object_H to Object_K
#-------------------------------------------------------------------#

   if Iteration = 13 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0709", "Relationships", "objH", "Naviaget from objH to ObjK"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0614"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0615"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0616"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0618"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0702"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      # Create the relationships
      link firstH R9 secondL
      link secondL R26 secondSL3
      link secondSL3 R29 firstSSL6
      link firstSSL6 R32 firstK
      link firstSSL6 R32 fifthK

      # Perform the navigation
      {SetK} = firstH -> R9.Object_L -> R26.Sub_L3 -> R29.Sub_Sub_L6 -> R32.Object_K

      if countof {SetK} != 0 then
      
         Val1 = -10
         Val2 = -20

         for InstK in {SetK} do

            if InstK.idK = 1 then
               Val1 = InstK.idK
            endif

            if InstK.idK = 5 then
               Val2 = InstK.idK
            endif

         endfor

         if Val1 = 1 then

            if Val2 = 5 then
               Has_Failed = FALSE
            else
               Has_Failed   = TRUE
               Failure_Code = Val2
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = Val1
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -30
      endif
   
      # Delete the relationships
      unlink firstH R9 secondL
      unlink secondL R26 secondSL3
      unlink secondSL3 R29 firstSSL6
      unlink firstSSL6 R32 firstK
      unlink firstSSL6 R32 fifthK

   endif

# End Test 13

#-------------------------------------------------------------------#
# Test complete
#-------------------------------------------------------------------#

if Unsupported = FALSE then

   if Has_Failed = FALSE then
      [] = RPT2:Test_Passed["objH", Test, 0]
   else
      [] = RPT3:Test_Failed["objH", Test, Failure_Code]
   endif

else
   [] = RPT4:Test_Unsupported[Test]
endif
#-------------------------------------------------------------------#
',3,'',"00000000-0000-0000-0000-000000000000",2,1 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-0000000008cd","00000000-0000-0000-0000-0000000000d9",'Is_It_Defined','',"ba5eda7a-def5-0000-0000-000000000000",0,'It_Is_Defined = FALSE

if The_IH != UNDEFINED then
 
   It_Is_Defined = TRUE

# else

#   [] = RPT5:Test_Text[0, "Undefined"]

endif
',3,'',"00000000-0000-0000-0000-000000000000",2,1 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-0000000008d0","00000000-0000-0000-0000-0000000000d9",'One_To_One_Reflexive','',"ba5eda7a-def5-0000-0000-000000000000",0,'#-------------------------------------------------------------------#
#
# Reflexive navigations 1c:1c
#
#-------------------------------------------------------------------#

#Initialise the fault flag
Has_Failed   = FALSE
Unsupported  = FALSE
Failure_Code = -1

#-------------------------------------------------------------------#

#Find the desired instances of Object_G

firstG  = find-one Object_G where idG = 1
secondG = find-one Object_G where idG = 2
thirdG  = find-one Object_G where idG = 3
fourthG = find-one Object_G where idG = 4
fifthG  = find-one Object_G where idG = 5
sixthG  = find-one Object_G where idG = 6

#-------------------------------------------------------------------#
# Formalise some relationships 
# This section initialise relationships depending upon which test
# is being performed.
#-------------------------------------------------------------------#

   if Iteration >= 2 & Iteration <= 6 then

      # Formalise some relationships
      link firstG  R11."Has_a"    fifthG
      link secondG R11."May_have" thirdG

   endif

#-------------------------------------------------------------------#
# Test 1 - Navigate an undefined relationship
#-------------------------------------------------------------------#

   if Iteration = 1 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0705", "Relationships", "1 to 1 reflexive", "Qualifed single instance source"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]

      # Perform the navigation
      InstG = sixthG -> R11."Has_a".Object_G

      #Check the result of the navigation
      if InstG != UNDEFINED then
         Has_Failed = TRUE
      endif

   endif

# End Test 1

#-------------------------------------------------------------------#
# Test 2 - Relationship role, single instance handle as the source
#-------------------------------------------------------------------#

   if Iteration = 2 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0705", "Relationships", "1 to 1 reflexive", "Qualifed single instance source"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      # Perform the navigation
      InstG = firstG -> R11."Has_a".Object_G

      # Check the result of the navigation
      if InstG != UNDEFINED then

         if InstG.idG != 5 then
            Has_Failed   = TRUE
            Failure_Code = -10
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -20
      endif
      
   endif

# End Test 2

#-------------------------------------------------------------------#
# Test 3 - Qualified role, single instance handle as the source
#-------------------------------------------------------------------#

   if Iteration = 3 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0705", "Relationships", "1 to 1 reflexive", "Qualifed single instance source"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0605"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      # Perform the navigation
      InstG = secondG -> R11."May_have".Object_G

      # Check the result of the navigation
      if InstG != UNDEFINED then

         if InstG.idG != 3 then
            Has_Failed   = TRUE
            Failure_Code = -10
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -20
      endif

   endif

# End Test 3

#-------------------------------------------------------------------#
# Test 4 - Relationship role, set of instance handles as the source
#-------------------------------------------------------------------#

   if Iteration = 4 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0703", "Relationships", "1 to 1 reflexive", "Qualifed single instance source"]
      [] = RPT5:Test_Text [Test, "Navigate from set unsupported"]

      Unsupported = TRUE

   endif

# End Test 4

#-------------------------------------------------------------------#
# Test 5 - Qualified role, set of instance handles as the source
#-------------------------------------------------------------------#

   if Iteration = 5 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0703", "Relationships", "1 to 1 reflexive", "Qualifed single instance source"]
      [] = RPT5:Test_Text [Test, "Navigate from set unsupported"]

      Unsupported = TRUE

   endif

# End Test 5

#-------------------------------------------------------------------#
# Test 6 - Navigate the relationship in reverse 
#          Relationship role, single instance handle as the source
#-------------------------------------------------------------------#

   if Iteration = 6 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0705", "Relationships", "1 to 1 reflexive", "Qualifed single instance source"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0605"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]

      # Perform the navigation
      InstG = fifthG -> R11."May_have".Object_G

      # Check the result of the navigation
      if InstG != UNDEFINED then
      
         if InstG.idG != 1 then
            Has_Failed   = TRUE
            Failure_Code = -10
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -20
      endif

   endif 

# End Test 6

#-------------------------------------------------------------------#
# Test 7 - Attempt to navigate a deleted relationship
#-------------------------------------------------------------------#

   if Iteration = 7 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0705", "Relationships", "1 to 1 reflexive", "Qualifed single instance source"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      # Define a relationship
      link firstG R11."Has_a" thirdG

      # Perform the navigation
      InstG = firstG -> R11."Has_a".Object_G

      # Check the result of the navigation
      if InstG != UNDEFINED then
     
         if InstG.idG != 3 then
            Has_Failed = TRUE
            Failure_Code = -10
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -20
      endif
   
      # Delete relationship
      unlink firstG R11."Has_a" thirdG

      # Perform the navigation, again
      InstG = firstG -> R11."Has_a".Object_G

      # Check the result of the navigation
      if InstG != UNDEFINED then
         Has_Failed   = TRUE
         Failure_Code = -2
      endif

   endif

# End Test 7

# ---------------------------------------------------------------------------
# Test 8 - Link a series of instances together and prove that navigation is 
#          possible from the first through to the last
# ---------------------------------------------------------------------------

   if Iteration = 8 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0705", "Relationships", "1 to 1 reflexive", "Qualifed single instance source"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0605"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0607"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0608"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      Defined = FALSE
 
      link firstG  R11."Has_a" secondG
      link secondG R11."Has_a" thirdG
      link thirdG  R11."Has_a" fourthG
      link fourthG R11."Has_a" fifthG

      second_instanceG  = firstG -> R11."Has_a".Object_G

      [Defined] = objG1:Is_It_Defined[second_instanceG]

      if Defined then
 
         third_instanceG  = second_instanceG -> R11."Has_a".Object_G

         [Defined] = objG1:Is_It_Defined[third_instanceG]

         if Defined then

            fourth_instanceG = third_instanceG  -> R11."Has_a".Object_G

            [Defined] = objG1:Is_It_Defined[fourth_instanceG]

            if Defined then

               fifth_instanceG  = fourth_instanceG -> R11."Has_a".Object_G
   
               [Defined] = objG1:Is_It_Defined[fifth_instanceG]

               if Defined then

                  # Everything has linked through to the final instance.
                  # It would have been easier to traverse the link to the end
                  # in one go, but that would not have shown up any failure at a
                  # particular node.

                  Has_Failed = FALSE

                  # Now unlink the formalised relationships to clean up tidily.
                  unlink fourthG R11."Has_a" fifthG
                  unlink thirdG  R11."Has_a" fourthG
                  unlink secondG R11."Has_a" thirdG
                  unlink firstG  R11."Has_a" secondG

               else

                  Has_Failed   = TRUE
                  Failure_Code = -5
               endif

            else
               Has_Failed   = TRUE
               Failure_Code = -4
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = -3
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -2
      endif

   endif

# End Test 8

# ------------------------------------------------------------------------#
# Test 9 - Link a series of instances together and prove that navigation 
#          is possible from the first through to the last using the other 
#          role parameter.
# ------------------------------------------------------------------------#

   if Iteration = 9 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0705", "Relationships", "1 to 1 reflexive", "Qualifed single instance source"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0605"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0607"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0608"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      Defined = FALSE

      link firstG  R11."May_have" secondG
      link secondG R11."May_have" thirdG
      link thirdG  R11."May_have" fourthG
      link fourthG R11."May_have" fifthG

      second_instanceG  = firstG -> R11."May_have".Object_G

      [Defined] = objG1:Is_It_Defined[second_instanceG]

      if Defined then
 
         third_instanceG  = second_instanceG -> R11."May_have".Object_G

         [Defined] = objG1:Is_It_Defined[third_instanceG]

         if Defined then

            fourth_instanceG = third_instanceG  -> R11."May_have".Object_G

            [Defined] = objG1:Is_It_Defined[fourth_instanceG]

            if Defined then

               fifth_instanceG  = fourth_instanceG -> R11."May_have".Object_G
   
               [Defined] = objG1:Is_It_Defined[fifth_instanceG]

               if Defined then

                  # Everything has linked through to the final instance.
                  # It would have been easier to traverse the link to the end
                  # in one go, but that would not have shown up any failure at a
                  # particular node.

                  Has_Failed = FALSE

                  # Now unlink the formalised relationships to clean up tidily.
                  unlink fourthG R11."May_have" fifthG
                  unlink thirdG  R11."May_have" fourthG
                  unlink secondG R11."May_have" thirdG
                  unlink firstG  R11."May_have" secondG

               else

                  Has_Failed   = TRUE
                  Failure_Code = -5
               endif

            else
               Has_Failed   = TRUE
               Failure_Code = -4
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = -3
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -2
      endif

   endif      

# End Test 9
    
# ------------------------------------------------------------------------#
# Test 10 - Link a series of instances together and prove that navigation 
#           is possible from the first through to the last
# ------------------------------------------------------------------------#

   if Iteration = 10 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0705", "Relationships", "1 to 1 reflexive", "Qualifed single instance source"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0605"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0607"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0608"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      Defined = FALSE

      link firstG  R11."Has_a" secondG
      link secondG R11."Has_a" thirdG
      link thirdG  R11."Has_a" fourthG
      link fourthG R11."Has_a" fifthG

      second_instanceG  = firstG -> R11."Has_a".Object_G

      [Defined] = objG1:Is_It_Defined[second_instanceG]

      if Defined then
 
         third_instanceG  = second_instanceG -> R11."Has_a".Object_G
   
         [Defined] = objG1:Is_It_Defined[third_instanceG]

         if Defined then

            fourth_instanceG = third_instanceG  -> R11."Has_a".Object_G

            [Defined] = objG1:Is_It_Defined[fourth_instanceG]

            if Defined then

               fifth_instanceG  = fourth_instanceG -> R11."Has_a".Object_G
   
               [Defined] = objG1:Is_It_Defined[fifth_instanceG]

               if Defined then

                  # Everything has linked through to the final instance.
                  # It would have been easier to traverse the link to the end
                  # in one go, but that would not have shown up any failure at a
                  # particular node.

                  Has_Failed = FALSE

                  # Now unlink the formalised relationships to clean up tidily.
                  unlink fifthG  R11."May_have" fourthG
                  unlink fourthG R11."May_have" thirdG
                  unlink thirdG  R11."May_have" secondG
                  unlink secondG R11."May_have" firstG

               else

                  Has_Failed   = TRUE
                  Failure_Code = -5
               endif

            else
               Has_Failed   = TRUE
               Failure_Code = -4
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = -3
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -2
      endif
 
   endif      
      
# End Test 10

# ------------------------------------------------------------------------#
# Test 11 - Link a series of instances together and prove that navigation 
#           is possible from the first through to the last
# ------------------------------------------------------------------------#

   if Iteration = 11 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0705", "Relationships", "1 to 1 reflexive", "Qualifed single instance source"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0605"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0607"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0608"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      Defined = FALSE

      link firstG  R11."May_have" secondG
      link secondG R11."May_have" thirdG
      link thirdG  R11."May_have" fourthG
      link fourthG R11."May_have" fifthG

      second_instanceG  = firstG -> R11."May_have".Object_G

      [Defined] = objG1:Is_It_Defined[second_instanceG]

      if Defined then
 
         third_instanceG  = second_instanceG -> R11."May_have".Object_G

         [Defined] = objG1:Is_It_Defined[third_instanceG]

         if Defined then

            fourth_instanceG = third_instanceG  -> R11."May_have".Object_G

            [Defined] = objG1:Is_It_Defined[fourth_instanceG]

            if Defined then

               fifth_instanceG  = fourth_instanceG -> R11."May_have".Object_G
   
               [Defined] = objG1:Is_It_Defined[fifth_instanceG]

               if Defined then

                  # Everything has linked through to the final instance.
                  # It would have been easier to traverse the link to the end
                  # in one go, but that would not have shown up any failure at a
                  # particular node.

                  Has_Failed = FALSE

                  # Now unlink the formalised relationships to clean up tidily.
                  unlink fifthG  R11."Has_a" fourthG
                  unlink fourthG R11."Has_a" thirdG
                  unlink thirdG  R11."Has_a" secondG
                  unlink secondG R11."Has_a" firstG

               else

                  Has_Failed   = TRUE
                  Failure_Code = -5
               endif

            else
               Has_Failed   = TRUE
               Failure_Code = -4
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = -3
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -2
      endif

   endif      
      
# End Test 11

#-------------------------------------------------------------------#
# Test 12 - 
#-------------------------------------------------------------------# 

   if Iteration = 12 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0705", "Relationships", "1 to 1 reflexive", "Qualifed single instance source"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0605"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0607"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0608"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      link firstG R2."A_Large_relationship_role" secondG

      InstG = firstG -> R2."A_Large_relationship_role".Object_G

      if InstG = UNDEFINED then
         Has_Failed   = TRUE
         Failure_Code = -1
      else
         Has_Failed = FALSE
      endif

      unlink firstG R2."A_Large_relationship_role" secondG

   endif

# End Test 12

#-------------------------------------------------------------------#
# Test 13 -
#-------------------------------------------------------------------# 

   if Iteration = 13 then

      [] = RPT1:Start_Test[Test,"1241-0000-01-0705" , "Relationships", "1 to 1 reflexive", "Qualifed single instance source"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0605"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0607"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0608"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      link firstG R2."qwertyuiopasdfghjklzxcvbnmqwerty" secondG

      InstG = firstG -> R2."qwertyuiopasdfghjklzxcvbnmqwerty".Object_G

      if InstG = UNDEFINED then
         Has_Failed   = TRUE
         Failure_Code = -1
      else
         Has_Failed = FALSE
      endif

      unlink firstG R2."qwertyuiopasdfghjklzxcvbnmqwerty" secondG

   endif

# End Test 13

#-------------------------------------------------------------------#
# Test 14 -
#-------------------------------------------------------------------#

   if Iteration = 14 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0705", "Relationships", "1 to 1 reflexive", "Qualifed single instance source"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0605"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0607"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0608"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      link firstG R2."A_Large_relationship_role" secondG

      InstG = secondG -> R2."qwertyuiopasdfghjklzxcvbnmqwerty".Object_G

      if InstG = UNDEFINED then
         Has_Failed   = TRUE
         Failure_Code = -1
      else
         Has_Failed = FALSE
      endif

      unlink firstG R2."A_Large_relationship_role" secondG

   endif

# End Test 14

#-------------------------------------------------------------------#
# Test 15
#-------------------------------------------------------------------# 

   if Iteration = 15 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0705", "Relationships", "1 to 1 reflexive", "Qualifed single instance source"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0605"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0607"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0608"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      link firstG R2."qwertyuiopasdfghjklzxcvbnmqwerty" secondG

      InstG = secondG -> R2."A_Large_relationship_role".Object_G

      if InstG = UNDEFINED then
         Has_Failed   = TRUE
         Failure_Code = -1
      else
         Has_Failed = FALSE
      endif

      unlink firstG R2."qwertyuiopasdfghjklzxcvbnmqwerty" secondG

   endif

# End Test 15

#-------------------------------------------------------------------#
# Test 16 - 
#-------------------------------------------------------------------# 

   if Iteration = 16 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0705", "Relationships", "1 to 1 reflexive", "Qualifed single instance source"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0605"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0607"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0608"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      Defined = FALSE

      link firstG  R11."Has_a" secondG
      link secondG R11."Has_a" thirdG
      link thirdG  R11."Has_a" fourthG
      link fourthG R11."Has_a" fifthG

      # We know this works, see test 8

      second_instanceG  = firstG           -> R11."Has_a".Object_G
      third_instanceG   = second_instanceG -> R11."Has_a".Object_G
      fourth_instanceG  = third_instanceG  -> R11."Has_a".Object_G
      fifth_instanceG   = fourth_instanceG -> R11."Has_a".Object_G
 
      # Belt and braces, prove it
      final_instance = firstG -> R11."Has_a".Object_G  -> R11."Has_a".Object_G -> R11."Has_a".Object_G -> R11."Has_a".Object_G

      [Defined] = objG1:Is_It_Defined[final_instance]
      if Defined then
         # Now unlink the formalised relationship thirdG to fourthG, using same order and role
         # to unlink that they were linked in
         unlink thirdG R11."Has_a" fourthG

         # Check that navigation from first to second, second to third and fourth to fifth
         # is still possible,
         # First to third
         final_instance = firstG -> R11."Has_a".Object_G -> R11."Has_a".Object_G
         [Defined] = objG1:Is_It_Defined[final_instance]
   
         if final_instance.idG = thirdG.idG then
            # Third to first
            first_instance = thirdG -> R11."May_have".Object_G -> R11."May_have".Object_G

            if first_instance.idG = firstG.idG then
               # Fourth to fifth
               final_instance = fourthG -> R11."Has_a".Object_G

               if final_instance.idG = fifthG.idG then
                  # Fifth to fourth
                  first_instance = fifthG -> R11."May_have".Object_G

                  if first_instance.idG = fourthG.idG then
                     # and navigation from third to fourth, or fourth to third is not possible.

                     fourth_instance = thirdG -> R11."Has_a".Object_G
                     [Defined] = objG1:Is_It_Defined[fourth_instance]

                     if Defined = FALSE then
                        third_instance = fourthG -> R11."May_have".Object_G
                        [Defined] = objG1:Is_It_Defined[third_instance]

                        if Defined = FALSE then
                           # Navigating from third to fourth, and fourth to third returns an
                           # undefined instance

                           # And for a finale, relink third to fourth and try the full traverse, first to fifth.
                           link thirdG  R11."Has_a" fourthG 

                           final_instance = firstG -> R11."Has_a".Object_G  -> R11."Has_a".Object_G -> R11."Has_a".Object_G -> R11."Has_a".Object_G

                           [Defined] = objG1:Is_It_Defined[final_instance]

                           if Defined then
                              Has_Failed   = FALSE
                              Failure_Code = 0

                              unlink firstG  R11."Has_a" secondG
                              unlink secondG R11."Has_a" thirdG
                              unlink thirdG  R11."Has_a" fourthG
                              unlink fourthG R11."Has_a" fifthG

                           else
                              Has_Failed   = TRUE
                              Failure_Code = -12
                           endif
 
                        else
                           Has_Failed   = TRUE
                           Failure_Code = -11
                        endif

                     else
                        Has_Failed   = TRUE
                        Failure_Code = -10
                     endif

                  else
                     Has_Failed   = TRUE
                     Failure_Code = -9
                  endif

               else
                  Has_Failed   = TRUE
                  Failure_Code = -8
               endif

            else
               Has_Failed   = TRUE
               Failure_Code = -7
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = -6
         endif
 
      else
         # Link didn''t work, 
         Failure_Code = -1
         Has_Failed   = TRUE
      endif
               
   endif

# End Test 16

#-------------------------------------------------------------------#
# Test 17
#-------------------------------------------------------------------#

   if Iteration = 17 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0705", "Relationships", "1 to 1 reflexive", "Qualifed single instance source"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0605"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0607"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0608"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      Defined = FALSE
   
      link firstG  R11."Has_a" secondG
      link secondG R11."Has_a" thirdG
      link thirdG  R11."Has_a" fourthG
      link fourthG R11."Has_a" fifthG

      # We know this works, see test 8

      second_instanceG  = firstG           -> R11."Has_a".Object_G
      third_instanceG   = second_instanceG -> R11."Has_a".Object_G
      fourth_instanceG  = third_instanceG  -> R11."Has_a".Object_G
      fifth_instanceG   = fourth_instanceG -> R11."Has_a".Object_G
 
      # Belt and braces, prove it
      final_instance = firstG -> R11."Has_a".Object_G  -> R11."Has_a".Object_G -> R11."Has_a".Object_G -> R11."Has_a".Object_G

      [Defined] = objG1:Is_It_Defined[final_instance]
      if Defined then
 
         # Now unlink the formalised relationship thirdG to fourthG, using opposite order and role
         # to unlink that they were linked in
         unlink fourthG R11."May_have" thirdG

         # Check that navigation from first to second, second to third and fourth to fifth
         # is still possible,
         # First to third
         final_instance = firstG -> R11."Has_a".Object_G -> R11."Has_a".Object_G
         [Defined] = objG1:Is_It_Defined[final_instance]

         if final_instance.idG = thirdG.idG then
            # Third to first
            first_instance = thirdG -> R11."May_have".Object_G -> R11."May_have".Object_G

            if first_instance.idG = firstG.idG then
               # Fourth to fifth
               final_instance = fourthG -> R11."Has_a".Object_G

               if final_instance.idG = fifthG.idG then
                  # Fifth to fourth
                  first_instance = fifthG -> R11."May_have".Object_G

                  if first_instance.idG = fourthG.idG then
                     # and navigation from third to fourth, or fourth to third is not possible.

                     fourth_instance = thirdG -> R11."Has_a".Object_G
                     [Defined] = objG1:Is_It_Defined[fourth_instance]

                     if Defined = FALSE then
                        third_instance = fourthG -> R11."May_have".Object_G
                        [Defined] = objG1:Is_It_Defined[third_instance]
     
                        if Defined = FALSE then
                           # Navigating from third to fourth, and fourth to third returns an
                           # undefined instance
 
                           # And for a finale, relink third to fourth and try the full traverse, first to fifth.
                           link thirdG  R11."Has_a" fourthG 

                           final_instance = firstG -> R11."Has_a".Object_G  -> R11."Has_a".Object_G -> R11."Has_a".Object_G -> R11."Has_a".Object_G
 
                           [Defined] = objG1:Is_It_Defined[final_instance]

                           if Defined then
                              Has_Failed   = FALSE
                              Failure_Code = 0

                              unlink firstG  R11."Has_a" secondG
                              unlink secondG R11."Has_a" thirdG
                              unlink thirdG  R11."Has_a" fourthG
                              unlink fourthG R11."Has_a" fifthG
 
                           else
                              Has_Failed   = TRUE
                              Failure_Code = -12
                           endif
 
                        else
                           Has_Failed   = TRUE
                           Failure_Code = -11
                        endif

                     else
                        Has_Failed   = TRUE
                        Failure_Code = -10
                     endif

                  else
                     Has_Failed = TRUE
                     Failure_Code = -9
                  endif

               else
                  Has_Failed   = TRUE
                  Failure_Code = -8
               endif

            else
               Has_Failed   = TRUE
               Failure_Code = -7
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = -6
         endif
 
      else
         # Link didn''t work, 
         Failure_Code = -1
         Has_Failed   = TRUE
      endif

   endif

# End Test 17

#-------------------------------------------------------------------#
# Test 18
#-------------------------------------------------------------------# 

   if Iteration = 18 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0705", "Relationships", "1 to 1 reflexive", "Qualifed single instance source"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0605"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0607"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0608"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      Defined = FALSE

      link firstG  R11."Has_a" secondG
      link secondG R11."Has_a" thirdG
      link thirdG  R11."Has_a" fourthG
      link fourthG R11."Has_a" fifthG

      # We know this works, see test 8

      second_instanceG  = firstG           -> R11."Has_a".Object_G
      third_instanceG   = second_instanceG -> R11."Has_a".Object_G
      fourth_instanceG  = third_instanceG  -> R11."Has_a".Object_G
      fifth_instanceG   = fourth_instanceG -> R11."Has_a".Object_G
 
      # Belt and braces, prove it

      final_instance = firstG -> R11."Has_a".Object_G  -> R11."Has_a".Object_G -> R11."Has_a".Object_G -> R11."Has_a".Object_G

      [Defined] = objG1:Is_It_Defined[final_instance]

      if Defined then
 
         # Now unlink the formalised relationship thirdG to fourthG, using same order and role
         # to unlink that they were linked in
         unlink thirdG R11."Has_a" fourthG

         # Check that navigation from first to second, second to third and fourth to fifth
         # is still possible,
         # First to third
         final_instance = firstG -> R11."Has_a".Object_G -> R11."Has_a".Object_G
         [Defined] = objG1:Is_It_Defined[final_instance]

         if final_instance.idG = thirdG.idG then
            # Third to first
            first_instance = thirdG -> R11."May_have".Object_G -> R11."May_have".Object_G

            if first_instance.idG = firstG.idG then
               # Fourth to fifth
               final_instance = fourthG -> R11."Has_a".Object_G

               if final_instance.idG = fifthG.idG then
                  # Fifth to fourth
                  first_instance = fifthG -> R11."May_have".Object_G

                  if first_instance.idG = fourthG.idG then
                     # and navigation from third to fourth, or fourth to third is not possible.
                     fourth_instance = thirdG -> R11."Has_a".Object_G
                     [Defined] = objG1:Is_It_Defined[fourth_instance]
      
                     if Defined = FALSE then
                        third_instance = fourthG -> R11."May_have".Object_G
                        [Defined] = objG1:Is_It_Defined[third_instance]
         
                        if Defined = FALSE then
                           # Navigating from third to fourth and fourth to third returns an
                           # undefined instance

                           # And for a finale, relink fourth to third and try the full traverse, first to fifth.
                           link fourthG  R11."May_have" thirdG 

                           final_instance = firstG -> R11."Has_a".Object_G  -> R11."Has_a".Object_G -> R11."Has_a".Object_G -> R11."Has_a".Object_G

                           [Defined] = objG1:Is_It_Defined[final_instance]

                           if Defined then
                              Has_Failed = FALSE
                              Failure_Code = 0

                              unlink firstG  R11."Has_a" secondG
                              unlink secondG R11."Has_a" thirdG
                              unlink thirdG  R11."Has_a" fourthG
                              unlink fourthG R11."Has_a" fifthG

                           else
                              Has_Failed = TRUE
                              Failure_Code = -12
                           endif
 
                        else
                           Has_Failed   = TRUE
                           Failure_Code = -11
                        endif

                     else
                        Has_Failed   = TRUE
                        Failure_Code = -10
                     endif

                  else
                     Has_Failed   = TRUE
                     Failure_Code = -9
                  endif

               else
                  Has_Failed   = TRUE
                  Failure_Code = -8
               endif

            else
               Has_Failed   = TRUE
               Failure_Code = -7
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = -6
         endif
 
      else
         # Link didn''t work, 
         Failure_Code = -1
         Has_Failed   = TRUE
      endif
 
   endif

# End Test 18

#-------------------------------------------------------------------#
# Test 19
#-------------------------------------------------------------------#

   if Iteration = 19 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0705", "Relationships", "1 to 1 reflexive", "Qualifed single instance source"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0605"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0607"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0608"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      Defined = FALSE
   
      link firstG  R11."Has_a" secondG
      link secondG R11."Has_a" thirdG
      link thirdG  R11."Has_a" fourthG
      link fourthG R11."Has_a" fifthG

      # We know this works, see test 8

      second_instanceG  = firstG           -> R11."Has_a".Object_G
      third_instanceG   = second_instanceG -> R11."Has_a".Object_G
      fourth_instanceG  = third_instanceG  -> R11."Has_a".Object_G
      fifth_instanceG   = fourth_instanceG -> R11."Has_a".Object_G
 
      # Belt and braces, prove it

      final_instance = firstG -> R11."Has_a".Object_G  -> R11."Has_a".Object_G -> R11."Has_a".Object_G -> R11."Has_a".Object_G

      [Defined] = objG1:Is_It_Defined[final_instance]
      if Defined then
 
         # Now unlink the formalised relationship thirdG to fourthG, using same order and role
         # to unlink that they were linked in
         unlink fourthG R11."May_have" thirdG

         # Check that navigation from first to second, second to third and fourth to fifth
         # is still possible,
         # First to third
         final_instance = firstG -> R11."Has_a".Object_G -> R11."Has_a".Object_G
         [Defined] = objG1:Is_It_Defined[final_instance]
         if final_instance.idG = thirdG.idG then
            # Third to first
            first_instance = thirdG -> R11."May_have".Object_G -> R11."May_have".Object_G

            if first_instance.idG = firstG.idG then
               # Fourth to fifth
               final_instance = fourthG -> R11."Has_a".Object_G

               if final_instance.idG = fifthG.idG then
                  # Fifth to fourth
                  first_instance = fifthG -> R11."May_have".Object_G

                  if first_instance.idG = fourthG.idG then
                     # and navigation from third to fourth, or fourth to third is not possible.
                     fourth_instance = thirdG -> R11."Has_a".Object_G
                     [Defined] = objG1:Is_It_Defined[fourth_instance]
       
                     if Defined = FALSE then
                        third_instance = fourthG -> R11."May_have".Object_G
                        [Defined] = objG1:Is_It_Defined[third_instance]
      
                        if Defined = FALSE then
                           # Navigating from third to fourth, and fourth to third returns an
                           # undefined instance

                           # And for a finale, relink third to fourth and try the full traverse, first to fifth.
                           link fourthG  R11."May_have" thirdG 

                           final_instance = firstG -> R11."Has_a".Object_G  -> R11."Has_a".Object_G -> R11."Has_a".Object_G -> R11."Has_a".Object_G

                           [Defined] = objG1:Is_It_Defined[final_instance]

                           if Defined then
                              Has_Failed = FALSE

                              unlink firstG  R11."Has_a" secondG
                              unlink secondG R11."Has_a" thirdG
                              unlink thirdG  R11."Has_a" fourthG
                              unlink fourthG R11."Has_a" fifthG

                              Failure_Code = 0

                           else
                              Has_Failed   = TRUE
                              Failure_Code = -12
                           endif
 
                        else
                           Has_Failed   = TRUE
                           Failure_Code = -11
                        endif

                     else
                        Has_Failed   = TRUE
                        Failure_Code = -10
                     endif

                  else
                     Has_Failed = TRUE
                     Failure_Code = -9
                  endif

               else
                  Has_Failed   = TRUE
                  Failure_Code = -8
               endif
            
            else
               Has_Failed   = TRUE
               Failure_Code = -7
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = -6
         endif
 
      else
         # Link didn''t work, 
         Failure_Code = -1
         Has_Failed   = TRUE
      endif
 
   endif

# End Test 19

#-------------------------------------------------------------------#
# Test 20
#-------------------------------------------------------------------#

   if Iteration = 20 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0705", "Relationships", "1 to 1 reflexive", "Qualifed single instance source"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0605"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0607"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0608"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      Defined = FALSE

      link firstG  R11."Has_a" secondG
      link secondG R11."Has_a" thirdG
      link thirdG  R11."Has_a" fourthG
      link fourthG R11."Has_a" fifthG

      # We know this works, see test 8

      second_instanceG  = firstG           -> R11."Has_a".Object_G
      third_instanceG   = second_instanceG -> R11."Has_a".Object_G
      fourth_instanceG  = third_instanceG  -> R11."Has_a".Object_G
      fifth_instanceG   = fourth_instanceG -> R11."Has_a".Object_G
 
      # Belt and braces, prove it

      final_instance = firstG -> R11."Has_a".Object_G  -> R11."Has_a".Object_G -> R11."Has_a".Object_G -> R11."Has_a".Object_G

      [Defined] = objG1:Is_It_Defined[final_instance]
      if Defined then
 
         #  Break a link, add a new entry and remake the chain.
         unlink third_instanceG R11."Has_a" fourth_instanceG

         local_objectG = create Object_G with idG = Iteration & ResultA = 0

         link third_instanceG R11."Has_a" local_objectG

         link local_objectG R11."Has_a" fourth_instanceG

         # See if it worked
         final_instance = firstG -> R11."Has_a".Object_G  -> R11."Has_a".Object_G  -> R11."Has_a".Object_G -> R11."Has_a".Object_G -> R11."Has_a".Object_G

         [Defined] = objG1:Is_It_Defined[final_instance]
         if Defined then

            unlink firstG         R11."Has_a" secondG
            unlink secondG        R11."Has_a" thirdG
            unlink thirdG         R11."Has_a" local_objectG
            unlink local_objectG  R11."Has_a" fourthG
            unlink fourthG        R11."Has_a" fifthG


            Failure_Code = 0
            Has_Failed   = FALSE

         else
            # New link didn''t work, 
            Failure_Code = -2
            Has_Failed = TRUE

         endif
      else
         # Link didn''t work, 
         Failure_Code = -1
         Has_Failed   = TRUE
      endif

   endif

# End Test 20

#-------------------------------------------------------------------#
# Test 21
#-------------------------------------------------------------------#

   if Iteration = 21 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0705", "Relationships", "1 to 1 reflexive", "Qualifed single instance source"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0605"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0607"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0608"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      Defined = FALSE

      link firstG  R11."Has_a" secondG
      link secondG R11."Has_a" thirdG
      link thirdG  R11."Has_a" fourthG
      link fourthG R11."Has_a" fifthG

      # We know this works, see test 8

      second_instanceG  = firstG           -> R11."Has_a".Object_G
      third_instanceG   = second_instanceG -> R11."Has_a".Object_G
      fourth_instanceG  = third_instanceG  -> R11."Has_a".Object_G
      fifth_instanceG   = fourth_instanceG -> R11."Has_a".Object_G
 
      # Belt and braces, prove it

      final_instance = firstG -> R11."Has_a".Object_G  -> R11."Has_a".Object_G -> R11."Has_a".Object_G -> R11."Has_a".Object_G

      [Defined] = objG1:Is_It_Defined[final_instance]
      
      if Defined then
 
         #  Break a link, add a new entry and remake the chain.
         unlink second_instanceG R11."Has_a" third_instanceG

         link second_instanceG R11."Has_a" sixthG

         link sixthG R11."Has_a" third_instanceG

         # See if it worked
         final_instance = firstG -> R11."Has_a".Object_G  -> R11."Has_a".Object_G  -> R11."Has_a".Object_G -> R11."Has_a".Object_G -> R11."Has_a".Object_G

         [Defined] = objG1:Is_It_Defined[final_instance]
         if Defined then

            unlink firstG   R11."Has_a" secondG
            unlink secondG  R11."Has_a" sixthG
            unlink sixthG   R11."Has_a" thirdG
            unlink thirdG   R11."Has_a" fourthG
            unlink fourthG  R11."Has_a" fifthG

            Failure_Code = 0
            Has_Failed   = FALSE

         else
            # New link didn''t work, 
            Failure_Code = -2
            Has_Failed   = TRUE

         endif
  
      else
         # Link didn''t work, 
         Failure_Code = -1
         Has_Failed   = TRUE
      endif

   endif

# End Test 21

#-------------------------------------------------------------------#
# Test 22
#-------------------------------------------------------------------# 

   if Iteration = 22 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0705", "Relationships", "1 to 1 reflexive", "Qualifed single instance source"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0605"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0607"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      link firstG  R11."Has_a" secondG

      # Attempt navigation from first instance to the unlinked side 
      first_undefined_instance = firstG -> R11."May_have".Object_G

      # Attempt navigation from last instance to unlinked side
      last_undefined_instance = secondG -> R11."Has_a".Object_G

      if first_undefined_instance != UNDEFINED then

        Failure_Code = -1
        Has_Failed   = TRUE

      else

         if last_undefined_instance != UNDEFINED then

            Failure_Code = -2
            Has_Failed   = TRUE

         else

            Failure_Code = 0
            Has_Failed   = FALSE

            unlink firstG  R11."Has_a" secondG

        endif

      endif

   endif

# End Test 22

#-------------------------------------------------------------------#
# Delete some relationships This section deletes relationships 
# depending upon which test has been performed.
#-------------------------------------------------------------------#

   if Iteration >= 2 & Iteration <= 6 then

      # Delete the formalised relationships
      unlink firstG  R11."Has_a"    fifthG
      unlink secondG R11."May_have" thirdG

   endif

#-------------------------------------------------------------------#
# Tests complete
#-------------------------------------------------------------------#

   if Unsupported = FALSE then

      if Has_Failed = FALSE then
         [] = RPT2:Test_Passed["1 to 1 reflexive", Test, 0]
      else
         [] = RPT3:Test_Failed["1 to 1 reflexive", Test, Failure_Code]
      endif

   else
      [] = RPT4:Test_Unsupported[Test]
   endif

#-------------------------------------------------------------------#
',3,'',"00000000-0000-0000-0000-0000000008cd",2,2 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-0000000008d3","00000000-0000-0000-0000-0000000000d9",'One_To_Many_Reflexive','',"ba5eda7a-def5-0000-0000-000000000000",0,'#-------------------------------------------------------------------#
#Reflexive navigations 1c:Mc
#-------------------------------------------------------------------#

# Initialise the fault flag
Has_Failed   = FALSE
Inst_Failed  = FALSE
Unsupported  = FALSE

# Tests 11 to 15 are copies of tests 6 to 10, using a reflexive navigation with the A and B
# conditional roles reversed.

#-------------------------------------------------------------------#

# Find the desired instances for Object_G
firstG   = find-one Object_G where idG = 1
secondG  = find-one Object_G where idG = 2
thirdG   = find-one Object_G where idG = 3
fourthG  = find-one Object_G where idG = 4
fifthG   = find-one Object_G where idG = 5
sixthG   = find-one Object_G where idG = 6
seventhG = find-one Object_G where idG = 7
eigthG   = find-one Object_G where idG = 8
ninthG   = find-one Object_G where idG = 9

#-------------------------------------------------------------------#

# Formalise some relationships
# This section initialise relationships depending upon which test
# is being performed.

if Iteration >= 2 & Iteration <= 5 then

   # Formalise some relationships
   link firstG R13."Has_many" thirdG
   link firstG R13."Has_many" fourthG
   link fifthG R13."Has_a"    secondG

endif

#-------------------------------------------------------------------#
# Test 1 - Navigate an undefined relationship
#-------------------------------------------------------------------#

   if Iteration = 1 then

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objG", "1c to Mc reflexive navigations"]

      # Perform the navigation
      InstG = sixthG -> R13."Has_a".Object_G

      # Check the result of the navigation
      if InstG != UNDEFINED then
         Has_Failed = TRUE
      endif
  
   endif

# End Test 1

#-------------------------------------------------------------------#
# Test 2 - Navigate to the MANY side of the relationship
#          Relationship role, single instance handle as the source
#-------------------------------------------------------------------#

   if Iteration = 2 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0705", "Relationships", "objG", "1c to Mc reflexive navigations"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0606"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      # Perform the navigation
      {SetG} = firstG -> R13."Has_many".Object_G

      # Check the result of the navigation
      if countof {SetG} != 2 then
         Has_Failed   = TRUE
         Failure_Code = -30
      else
         # Check the contents of the set
         Val1 = -10
         Val2 = -20

         for InstG in {SetG} do

            if InstG.idG = 3 then
               Val1 = InstG.idG
            endif

            if InstG.idG = 4 then
               Val2 = InstG.idG
            endif

         endfor

         # Check counter values
         if Val1 = 3 then

            if Val2 != 4 then
               Has_Failed   = TRUE
               Failure_Code = Val2
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = Val1
         endif

      endif

   endif

#End Test 2

#-------------------------------------------------------------------#
# Test 3 - Navigate to the MANY side of the relationship
#          Qualified role, set of instance handles as the source
#-------------------------------------------------------------------#

   if Iteration = 3 then

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objG", "1c to Mc reflexive navigations"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0703"]
      [] = RPT5:Test_Text [Test, "Navigation from sets unsupported"]

      Unsupported = TRUE

   endif

# End Test 3

#-------------------------------------------------------------------#
# Test 4 -Navigate to the SINGLE side of the relationship
#         Relationship role, single instance handle as the source
#-------------------------------------------------------------------#

   if Iteration = 4 then
 
      [] = RPT1:Start_Test[Test, "1241-0000-01-0705", "Relationships", "objG", "1c to Mc reflexive navigations"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0606"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      # Perform the navigation
      InstG = fifthG -> R13."Has_a".Object_G

      # Check the result of the navigation
      if InstG != UNDEFINED then

         if InstG.idG != 2 then
            Has_Failed   = TRUE
            Failure_Code = -10
         endif
   
      else
         Has_Failed   = TRUE
         Failure_Code = -20
      endif

   endif

# End Test 4

#-------------------------------------------------------------------#
# Test 5 - Navigate to the SINGLE side of the relationship
#          Qualified role, set of instance handles as the source
#-------------------------------------------------------------------#

   if Iteration = 5 then

      [] = RPT1:Start_Test[Test,  "Null Requid", "Relationships", "objG", "1c to Mc reflexive navigations"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0703"]

      [] = RPT5:Test_Text [Test, "Navigation from set unsupported"]

      Unsupported = TRUE
 
   endif

#End Test 5

#-------------------------------------------------------------------#
# Test 6 - Attempt to navigate a deleted relationship
#-------------------------------------------------------------------#

   if Iteration = 6 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0705", "Relationships", "objG", "1c to Mc reflexive navigations"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0606"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0607"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0608"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      # Formalise some relationships
      link firstG R13."Has_many" thirdG
      link firstG R13."Has_many" fourthG
      link fifthG R13."Has_a"    secondG

      # Delete the formalised relationships
      unlink firstG R13."Has_many" thirdG
      unlink firstG R13."Has_many" fourthG
      unlink fifthG R13."Has_a"    secondG

      # Navigate to the MANY side
      {SetG} = firstG -> R13."Has_many".Object_G

      # Check the result of the navigation
      if countof {SetG} != 0 then
         Has_Failed   = TRUE
         Failure_Code = -10
      else
         # Navigate to the SINGLE side
         InstG = fifthG -> R13."Has_a".Object_G

         # Check the result of the navigation
         if InstG != UNDEFINED then
            Has_Failed   = TRUE
            Failure_Code = -2
         endif

      endif

   endif

# End Test 6

#-------------------------------------------------------------------#
# Test 7 - Attempt to link one to many and navigate to the end of 
#          each link
#-------------------------------------------------------------------#

   if Iteration = 7 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0705", "Relationships", "objG", "Navigate to the end of each link"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0606"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0607"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0608"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      # Formalise some relationships
      link firstG R13."Has_many" secondG
      link firstG R13."Has_many" thirdG
      link firstG R13."Has_many" fourthG

      link secondG R13."Has_many" fifthG
      link secondG R13."Has_many" sixthG

      link thirdG R13."Has_many" seventhG
 
      link fourthG R13."Has_many" eigthG
      link fourthG R13."Has_many" ninthG

      # Prove that we can navigate from first to fifth and sixth
      {SetG} = firstG -> R13."Has_many".Object_G

      # Count of number of instances in this little empire.
      # Include the instance that we are navigating from.

      Local_Counter = 1

      if countof {SetG} = 3 then

         for InstG in {SetG} do

            if InstG = UNDEFINED then
               Inst_Failed  = TRUE
               Failure_Code = -10
            else
               Local_Counter = Local_Counter + 1
               {Next_SetG} = InstG -> R13."Has_many".Object_G

               for Sub_InstG in {Next_SetG} do

                  if Sub_InstG = UNDEFINED then
                     Inst_Failed  = TRUE
                     Failure_Code = -20
                  else
                     Local_Counter = Local_Counter + 1
                  endif

               endfor         

            endif

         endfor

      else
         Inst_Failed = TRUE
         Failure_Code = countof {SetG}
      endif

      if Inst_Failed = FALSE then

         if Local_Counter = 9 then
            Has_Failed = FALSE
         else
            Has_Failed   = TRUE
            Failure_Code = Local_Counter
         endif
 
      else
         Has_Failed   = TRUE
         Failure_Code = Local_Counter
      endif

      unlink firstG R13."Has_many" secondG
      unlink firstG R13."Has_many" thirdG
      unlink firstG R13."Has_many" fourthG

      unlink secondG R13."Has_many" fifthG
      unlink secondG R13."Has_many" sixthG
 
      unlink thirdG R13."Has_many" seventhG
 
      unlink fourthG R13."Has_many" eigthG
      unlink fourthG R13."Has_many" ninthG

   endif

# End Test 7


#-------------------------------------------------------------------#
# Test 8 - Attempt to link one to many and navigate to the end of 
#          each link
#          Add in a new instance as a last instance in a chain.
#-------------------------------------------------------------------#

   if Iteration = 8 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0705", "Relationships", "objG", "1c to Mc reflexive navigations"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0606"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0607"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0608"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      Local_Counter = 0

      # Formalise some relationships
      link firstG R13."Has_many" secondG
      link firstG R13."Has_many" thirdG
      link firstG R13."Has_many" fourthG

      link secondG R13."Has_many" fifthG
      link secondG R13."Has_many" sixthG

      link thirdG R13."Has_many" seventhG
 
      link fourthG R13."Has_many" eigthG
      link fourthG R13."Has_many" ninthG

      tenthG = find-one Object_G where idG = 10

      {SetG} = firstG -> R13."Has_many".Object_G

      # Count of number of instances in this little empire.
      # Include the instance that we are navigating from.
      Local_Counter = 1

      if countof {SetG} = 3 then

         for InstG in {SetG} do

            if InstG = UNDEFINED then
               Inst_Failed  = TRUE
               Failure_Code = -10
            else
               Local_Counter = Local_Counter + 1
               {Next_SetG} = InstG -> R13."Has_many".Object_G

               for Sub_InstG in {Next_SetG} do
 
                  if Sub_InstG = UNDEFINED then
                     Inst_Failed  = TRUE
                     Failure_Code = -20
                  else
                     Local_Counter = Local_Counter + 1
                     Inst_Failed   = FALSE
                  endif

               endfor         

            endif

         endfor

      else
         Inst_Failed  = TRUE
         Failure_Code = countof {SetG} 
      endif

      if Inst_Failed = FALSE then

         if Local_Counter = 9 then
            # Link in new element
            link thirdG R13."Has_many" tenthG
                  
            #Can we navigate back from tenthG to thirdG
            newThird = tenthG -> R13."Has_a".Object_G

            if newThird = UNDEFINED then
               Inst_Failed  = TRUE
               Failure_Code = -30
            else

               # New instance is not undefined
               Inst_Failed = FALSE
               Local_Counter = 1
               {SetG} = firstG -> R13."Has_many".Object_G

               for InstG in {SetG} do

                  if InstG = UNDEFINED then
                     Inst_Failed  = TRUE
                     Failure_Code = -40
                  else
                     Local_Counter = Local_Counter + 1
                     {Next_SetG} = InstG -> R13."Has_many".Object_G
  
                     for Sub_InstG in {Next_SetG} do

                        if Sub_InstG = UNDEFINED then
                           Inst_Failed  = TRUE
                           Failure_Code = -50
                        else
                           Local_Counter = Local_Counter + 1
                        endif
  
                     endfor         

                  endif

               endfor
 
            endif

            if Inst_Failed = FALSE then

               if Local_Counter = 10 then
                  Failure_Code = 0
                  Has_Failed   = FALSE
               else
                  Failure_Code = -100 - Local_Counter
                  Has_Failed   = TRUE
               endif

            else
               Has_Failed   = TRUE
               Failure_Code = -60
            endif

         else
            Failure_Code = -200 - Local_Counter
            Has_Failed   = TRUE
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -70
      endif

      unlink firstG R13."Has_many" secondG
      unlink firstG R13."Has_many" thirdG
      unlink firstG R13."Has_many" fourthG

      unlink secondG R13."Has_many" fifthG
      unlink secondG R13."Has_many" sixthG

      unlink thirdG R13."Has_many" seventhG
      unlink thirdG R13."Has_many" tenthG
   
      unlink fourthG R13."Has_many" eigthG
      unlink fourthG R13."Has_many" ninthG

   endif

# End Test 8

#-------------------------------------------------------------------#
# Test 9 - Attempt to link one to many and navigate to the end of
#          each link
#          Add in a new instance in the middle of a chain with one 
#          end object.
#-------------------------------------------------------------------#

   if Iteration = 9 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0705", "Relationships", "objG", "1c to Mc reflexive navigations"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0606"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0607"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0608"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      Local_Counter = 0
      No_Instances  = 0

      # Formalise some relationships
      link firstG R13."Has_many" secondG
      link firstG R13."Has_many" thirdG
      link firstG R13."Has_many" fourthG

      link secondG R13."Has_many" fifthG
      link secondG R13."Has_many" sixthG

      link thirdG R13."Has_many" seventhG
 
      link fourthG R13."Has_many" eigthG
      link fourthG R13."Has_many" ninthG

      tenthG = find-one Object_G where idG = 10

      {SetG} = firstG -> R13."Has_many".Object_G

      # Count of number of instances in this little empire.
      # Include the instance that we are navigating from.
      Local_Counter = 1

      if countof {SetG} = 3 then

         for InstG in {SetG} do

            if InstG = UNDEFINED then
               Inst_Failed  = TRUE
               Failure_Code = -10
            else
               Local_Counter = Local_Counter + 1
               {Next_SetG} = InstG -> R13."Has_many".Object_G

               for Sub_InstG in {Next_SetG} do

                  if Sub_InstG = UNDEFINED then
                     Inst_Failed  = TRUE
                     Failure_Code = -20
                  else
                     Local_Counter = Local_Counter + 1
                  endif

               endfor         

            endif
  
         endfor

      else
         Inst_Failed  = TRUE
         Failure_Code = countof {SetG} 
      endif

      if Inst_Failed = FALSE then

         if Local_Counter = 9 then
            # Unlink old element and splice in a new element, making sure that the links are
            # still correct.
            unlink firstG R13."Has_many" thirdG

            # Link in new element
            link firstG R13."Has_many" tenthG

            # Relink new element to old element
            link tenthG R13."Has_many" thirdG 
                  
            # Can we navigate back from thirdG to tenthG
            new_tenth = thirdG -> R13."Has_a".Object_G

            # And while we''re at it, can we navigate from last back to first,
            # taking into account the newly added link
            new_first = seventhG -> R13."Has_a".Object_G -> R13."Has_a".Object_G -> R13."Has_a".Object_G

            if new_tenth = UNDEFINED then
               Inst_Failed  = TRUE
               Failure_Code = -30
            else

               if new_first = UNDEFINED then
                  Inst_Failed  = TRUE
                  Failure_Code = -40
               else
                  # New instance is not undefined
                  Inst_Failed = FALSE
                  Failure_Code = 0

                  Local_Counter = 1

                  {SetG} = firstG -> R13."Has_many".Object_G

                  for InstG in {SetG} do

                     if InstG = UNDEFINED then
                        Inst_Failed  = TRUE
                        Failure_Code = -50
                     else
                        Local_Counter = Local_Counter + 1
                        {Next_SetG} = InstG -> R13."Has_many".Object_G
                        for Sub_InstG in {Next_SetG} do

                           if Sub_InstG = UNDEFINED then
                              Inst_Failed  = TRUE
                              Failure_Code = -60
                           else
                              Local_Counter = Local_Counter + 1
                              {Next_Next_SetG} = Sub_InstG -> R13."Has_many".Object_G

                              for Sub_Sub_InstG in {Next_Next_SetG} do
 
                                 if Sub_Sub_InstG = UNDEFINED then
                                    Inst_Failed  = TRUE
                                    Failure_Code = -70
                                 else 
                                    Local_Counter = Local_Counter + 1
                                 endif

                              endfor

                           endif

                        endfor         

                     endif

                  endfor

               endif

            endif

            if Inst_Failed = FALSE then

               if Local_Counter = 10 then
                  Failure_Code = 0
                  Has_Failed   = FALSE
               else
                  Has_Failed   = TRUE
                  Failure_Code = -100 - Local_Counter
               endif

            else
               Has_Failed   = TRUE
               Failure_Code = -80
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = -200 - Local_Counter
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -90
      endif

      unlink firstG R13."Has_many" secondG
      unlink firstG R13."Has_many" tenthG
      unlink firstG R13."Has_many" fourthG

      unlink tenthG R13."Has_many" thirdG

      unlink secondG R13."Has_many" fifthG
      unlink secondG R13."Has_many" sixthG

      unlink thirdG R13."Has_many" seventhG
   
      unlink fourthG R13."Has_many" eigthG
      unlink fourthG R13."Has_many" ninthG

   endif

# End Test 9

#-------------------------------------------------------------------#
# Test 10 - Attempt to link one to many and navigate to the end of 
#           each link
#           Add in a new instance in the middle of a chain with two 
#           end objects.
#-------------------------------------------------------------------#

   if Iteration = 10 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0705", "Relationships", "objG", "1c to Mc reflexive navigations"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0606"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0607"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0608"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      Local_Counter = 0
      Has_Failed    = TRUE
      Inst_Failed   = FALSE
 
      # Formalise some relationships
      link firstG R13."Has_many" secondG
      link firstG R13."Has_many" thirdG
      link firstG R13."Has_many" fourthG

      link secondG R13."Has_many" fifthG
      link secondG R13."Has_many" sixthG

      link thirdG R13."Has_many" seventhG
 
      link fourthG R13."Has_many" eigthG
      link fourthG R13."Has_many" ninthG

      tenthG = find-one Object_G where idG = 10

      {SetG} = firstG -> R13."Has_many".Object_G

      # Count of number of instances in this little empire.
      # Include the instance that we are navigating from.
      Local_Counter = 1

      No_Instances = countof {SetG}
      if No_Instances = 3 then

         for InstG in {SetG} do

            if InstG = UNDEFINED then
               Inst_Failed  = TRUE
               Failure_Code = -10
            else
               Local_Counter = Local_Counter + 1
               {Next_SetG} = InstG -> R13."Has_many".Object_G

               for Sub_InstG in {Next_SetG} do

                  if Sub_InstG = UNDEFINED then
                     Inst_Failed  = TRUE
                     Failure_Code = -3
                  else
                     Local_Counter = Local_Counter + 1
                  endif

               endfor         

            endif

         endfor

      else
         Inst_Failed  = TRUE
         Failure_Code = No_Instances 
      endif

      if Inst_Failed = FALSE & Local_Counter = 9 then
         # Unlink old element and splice in a new element, making sure that the links are
         # still correct.
         unlink firstG R13."Has_many" fourthG

         # Link in new element
         link firstG R13."Has_many" tenthG

         # Relink new element to old element
         link tenthG R13."Has_many" fourthG 
                  
         # Can we navigate back from thirdG to tenthG
         new_tenth = fourthG -> R13."Has_a".Object_G

         # And while we''re at it, can we navigate from last back to first,
         # taking into account the newly added link
         new_first = eigthG -> R13."Has_a".Object_G -> R13."Has_a".Object_G -> R13."Has_a".Object_G

         if new_tenth = UNDEFINED then
            Inst_Failed  = TRUE
            Failure_Code = -30
         else

            if new_first = UNDEFINED then
               Inst_Failed  = TRUE
               Failure_Code = -40
            else
               # New instance is not undefined
               Inst_Failed   = FALSE
               Failure_Code  = 0
               Local_Counter = 1
               {SetG} = firstG -> R13."Has_many".Object_G

               for InstG in {SetG} do

                  if InstG = UNDEFINED then
                     Inst_Failed  = TRUE
                     Failure_Code = -50
                  else
                     Local_Counter = Local_Counter + 1
                     {Next_SetG} = InstG -> R13."Has_many".Object_G

                     for Sub_InstG in {Next_SetG} do

                        if Sub_InstG = UNDEFINED then
                           Inst_Failed  = TRUE
                           Failure_Code = -60
                        else
                           Local_Counter = Local_Counter + 1
                           {Next_Next_SetG} = Sub_InstG -> R13."Has_many".Object_G

                           for Sub_Sub_InstG in {Next_Next_SetG} do

                              if Sub_Sub_InstG = UNDEFINED then
                                 Inst_Failed  = TRUE
                                 Failure_Code = -8
                               else
                                 Local_Counter = Local_Counter + 1
                               endif

                            endfor         
  
                         endif
   
                      endfor         

                   endif

                endfor

             endif

          endif

          if Inst_Failed = FALSE & Local_Counter = 10 then
             Failure_Code = 0
             Has_Failed   = FALSE

             unlink firstG R13."Has_many" secondG
             unlink firstG R13."Has_many" thirdG
             unlink firstG R13."Has_many" tenthG

             unlink tenthG R13."Has_many" fourthG
 
             unlink secondG R13."Has_many" fifthG
             unlink secondG R13."Has_many" sixthG

             unlink thirdG R13."Has_many" seventhG

             unlink fourthG R13."Has_many" eigthG
             unlink fourthG R13."Has_many" ninthG

          else
             Has_Failed   = TRUE
             Failure_Code = Local_Counter
          endif

       else
          Has_Failed = TRUE
          Failure_Code = Local_Counter
       endif

   endif

# End Test 10

#-------------------------------------------------------------------#
# Test 11 - Attempt to navigate a deleted relationship
#-------------------------------------------------------------------#

   if Iteration = 11 then

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objG", "Attempt to navigate a deleted relationship"]

      # Formalise some relationships
      link firstG R4."Has_many" thirdG
      link firstG R4."Has_many" fourthG
      link fifthG R4."Has_a"    secondG

      # Delete the formalised relationships
      unlink firstG R4."Has_many" thirdG
      unlink firstG R4."Has_many" fourthG
      unlink fifthG R4."Has_a"    secondG

      # Navigate to the MANY side
      {SetG} = firstG -> R4."Has_many".Object_G

      # Check the result of the navigation
      if countof {SetG} != 0 then
         Has_Failed   = TRUE
         Failure_Code = -10
      else
         # Navigate to the SINGLE side
         InstG = fifthG -> R4."Has_a".Object_G

         # Check the result of the navigation
         if InstG != UNDEFINED then
            Has_Failed   = TRUE
            Failure_Code = -20
         endif

      endif

   endif

# End Test 11

#-------------------------------------------------------------------#
# Test 12 - Attempt to link one to many and navigate to the end of 
#           each link
#-------------------------------------------------------------------#

   if Iteration = 12 then
 
      [] = RPT1:Start_Test[Test, "1241-0000-01-0705", "Relationships", "objG", "1c to Mc reflexive navigations"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0606"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0607"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0608"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      #Navigate to the MANY side
      {SetG} = firstG -> R4."Has_many".Object_G

      # Check the result of the navigation
      what = countof {SetG} 

      #Formalise some relationships
      link firstG R4."Has_many" secondG
      link firstG R4."Has_many" thirdG
      link firstG R4."Has_many" fourthG

      link secondG R4."Has_many" fifthG
      link secondG R4."Has_many" sixthG

      link thirdG R4."Has_many" seventhG
 
      link fourthG R4."Has_many" eigthG
      link fourthG R4."Has_many" ninthG

      # Prove that we can navigate from first to fifth and sixth

      {SetG} = firstG -> R4."Has_many".Object_G

      # Count of number of instances in this little empire.
      # Include the instance that we are navigating from.
      Local_Counter = 1

      if countof {SetG} = 3 then

         for InstG in {SetG} do

            if InstG = UNDEFINED then
               Inst_Failed  = TRUE
               Failure_Code = -10
            else
               Local_Counter = Local_Counter + 1
               {Next_SetG} = InstG -> R4."Has_many".Object_G

               for Sub_InstG in {Next_SetG} do

                  if Sub_InstG = UNDEFINED then
                     Inst_Failed  = TRUE
                     Failure_Code = -3
                  else
                     Local_Counter = Local_Counter + 1
                  endif

               endfor         

            endif

         endfor

      else
         Inst_Failed  = TRUE
         Failure_Code = countof {SetG} 
      endif

      if Inst_Failed = FALSE & Local_Counter = 9 then
         Has_Failed   = FALSE
         Failure_Code = 0
      else
         Has_Failed   = TRUE
         Failure_Code = Local_Counter
      endif

      unlink firstG R4."Has_many" secondG
      unlink firstG R4."Has_many" thirdG
      unlink firstG R4."Has_many" fourthG

      unlink secondG R4."Has_many" fifthG
      unlink secondG R4."Has_many" sixthG

      unlink thirdG R4."Has_many" seventhG
 
      unlink fourthG R4."Has_many" eigthG
      unlink fourthG R4."Has_many" ninthG

   endif

# End Test 12

#-------------------------------------------------------------------#
# Test 13 - Attempt to link one to many and navigate to the end of 
#           each link
#           Add in a new instance as a last instance in a chain.
#-------------------------------------------------------------------#

   if Iteration = 13 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0705", "Relationships", "objG", "1c to Mc reflexive navigations"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0606"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0607"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0608"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      Local_Counter = 0
      Has_Failed    = TRUE
      Inst_Failed   = TRUE

      # Formalise some relationships
      link firstG R4."Has_many" secondG
      link firstG R4."Has_many" thirdG
      link firstG R4."Has_many" fourthG

      link secondG R4."Has_many" fifthG
      link secondG R4."Has_many" sixthG

      link thirdG R4."Has_many" seventhG
 
      link fourthG R4."Has_many" eigthG
      link fourthG R4."Has_many" ninthG

      tenthG = find-one Object_G where idG = 10

      {SetG} = firstG -> R4."Has_many".Object_G

      # Count of number of instances in this little empire.
      # Include the instance that we are navigating from.
      Local_Counter = 1

      No_Instances = countof {SetG}
      if No_Instances = 3 then

         for InstG in {SetG} do

            if InstG = UNDEFINED then
               Inst_Failed  = TRUE
               Failure_Code = -10
            else
               Local_Counter = Local_Counter + 1
               {Next_SetG} = InstG -> R4."Has_many".Object_G

               for Sub_InstG in {Next_SetG} do

                  if Sub_InstG = UNDEFINED then
                     Inst_Failed = TRUE
                     Failure_Code = -20
                  else
                     Local_Counter = Local_Counter + 1
                     Inst_Failed = FALSE
                  endif

               endfor         

            endif

         endfor

      else
         Inst_Failed = TRUE
         Failure_Code = No_Instances 
      endif

      if Inst_Failed = FALSE & Local_Counter = 9 then
         # Link in new element
         link thirdG R4."Has_many" tenthG
                  
         # Can we navigate back from tenthG to thirdG
         new_third = tenthG -> R4."Has_a".Object_G

         if new_third = UNDEFINED then
            Inst_Failed  = TRUE
            Failure_Code = -30
         else
            # New instance is not undefined
            Inst_Failed  = FALSE
            Failure_Code = 0

            Local_Counter = 1

            {SetG} = firstG -> R4."Has_many".Object_G

            for InstG in {SetG} do

               if InstG = UNDEFINED then
                  Inst_Failed  = TRUE
                  Failure_Code = -40
               else
                  Local_Counter = Local_Counter + 1
                  {Next_SetG} = InstG -> R4."Has_many".Object_G

                  for Sub_InstG in {Next_SetG} do

                     if Sub_InstG = UNDEFINED then
                        Inst_Failed  = TRUE
                        Failure_Code = -50
                     else
                        Local_Counter = Local_Counter + 1
                     endif

                  endfor         

               endif

            endfor

         endif

         if Inst_Failed = FALSE & Local_Counter = 10 then
            Failure_Code = 0
            Has_Failed   = FALSE

            unlink firstG R4."Has_many" secondG
            unlink firstG R4."Has_many" thirdG
            unlink firstG R4."Has_many" fourthG

            unlink secondG R4."Has_many" fifthG
            unlink secondG R4."Has_many" sixthG

            unlink thirdG R4."Has_many" seventhG
            unlink thirdG R4."Has_many" tenthG
   
            unlink fourthG R4."Has_many" eigthG
            unlink fourthG R4."Has_many" ninthG
         else
            Has_Failed   = TRUE
            Failure_Code = Local_Counter
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = Local_Counter
      endif

   endif

# End Test 13

#-------------------------------------------------------------------#
# Test 14 - Attempt to link one to many and navigate to the end of 
#           each link
#           Add in a new instance in the missle of a chain with one 
#           end object.
#-------------------------------------------------------------------#

   if Iteration = 14 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0705", "Relationships", "objG", "1c to Mc reflexive navigations"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-0606"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0607"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0608"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      Local_Counter = 0
      Inst_Failed = FALSE
      Unsupported = FALSE
      No_Instances = 0

      {SetG} = firstG -> R4."Has_many".Object_G

      No_Instances = countof {SetG}

      # Formalise some relationships
      link firstG R4."Has_many" secondG
      link firstG R4."Has_many" thirdG
      link firstG R4."Has_many" fourthG

      link secondG R4."Has_many" fifthG
      link secondG R4."Has_many" sixthG

      link thirdG R4."Has_many" seventhG
 
      link fourthG R4."Has_many" eigthG
      link fourthG R4."Has_many" ninthG

      tenthG = find-one Object_G where idG = 10

      {SetG} = firstG -> R4."Has_many".Object_G

      # Count of number of instances in this little empire.
      # Include the instance that we are navigating from.
      Local_Counter = 1

      if countof {SetG} = 3 then

         for InstG in {SetG} do

            if InstG = UNDEFINED then
               Inst_Failed  = TRUE
               Failure_Code = -10
            else
               Local_Counter = Local_Counter + 1
               {Next_SetG} = InstG -> R4."Has_many".Object_G

               for Sub_InstG in {Next_SetG} do

                  if Sub_InstG = UNDEFINED then
                     Inst_Failed  = TRUE
                     Failure_Code = -20
                  else
                     Local_Counter = Local_Counter + 1
                  endif

               endfor         

            endif

         endfor

      else
         Inst_Failed  = TRUE
         Failure_Code = countof {SetG}
      endif

      if Inst_Failed = FALSE then

         if Local_Counter = 9 then
            # Unlink old element and splice in a new element, making sure that the links are
            # still correct.
            unlink firstG R4."Has_many" thirdG

            # Link in new element
            link firstG R4."Has_many" tenthG

            # Relink new element to old element
            link tenthG R4."Has_many" thirdG 
                  
            # Can we navigate back from thirdG to tenthG
            new_tenth = thirdG -> R4."Has_a".Object_G

            # And while we''re at it, can we navigate from last back to first,
            # taking into account the newly added link
            new_first = seventhG -> R4."Has_a".Object_G -> R4."Has_a".Object_G -> R4."Has_a".Object_G
  
            if new_tenth = UNDEFINED then
               Inst_Failed  = TRUE
               Failure_Code = -30
            else

               if new_first = UNDEFINED then
                  Inst_Failed  = TRUE
                  Failure_Code = -40
               else
                  # New instance is not undefined
                  Inst_Failed  = FALSE
                  Failure_Code = 0
                  Local_Counter = 1

                  {SetG} = firstG -> R4."Has_many".Object_G
                  No_Instances = countof {SetG}

                  for InstG in {SetG} do

                     if InstG = UNDEFINED then
                        Inst_Failed  = TRUE
                        Failure_Code = -50
                     else
                        Local_Counter = Local_Counter + 1
                        {Next_SetG} = InstG -> R4."Has_many".Object_G

                        for Sub_InstG in {Next_SetG} do

                           if Sub_InstG = UNDEFINED then
                              Inst_Failed  = TRUE
                              Failure_Code = -60
                           else
                              Local_Counter = Local_Counter + 1
                              {Next_Next_SetG} = Sub_InstG -> R4."Has_many".Object_G
                              No_Next_Next_Set = countof {Next_Next_SetG}

                              for Sub_Sub_InstG in {Next_Next_SetG} do

                                 if Sub_Sub_InstG = UNDEFINED then
                                    Inst_Failed  = TRUE
                                    Failure_Code = -70
                                 else 
                                    Local_Counter = Local_Counter + 1
                                 endif

                              endfor

                           endif

                        endfor         

                     endif

                  endfor

               endif

            endif

            if Inst_Failed = FALSE then

               if Local_Counter = 10 then
                  Failure_Code = 0
                  Has_Failed   = FALSE
               else
                  Has_Failed   = TRUE
                  Failure_Code = -100 - Local_Counter
               endif

            else
               Failure_Code = -80
               Has_Failed   = TRUE
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = -200 - Local_Counter      
         endif

      else
         Has_Failed = TRUE
         Failure_Code = Local_Counter
      endif

      unlink firstG R4."Has_many" secondG
      unlink firstG R4."Has_many" tenthG
      unlink firstG R4."Has_many" fourthG

      unlink tenthG R4."Has_many" thirdG

      unlink secondG R4."Has_many" fifthG
      unlink secondG R4."Has_many" sixthG

      unlink thirdG R4."Has_many" seventhG
   
      unlink fourthG R4."Has_many" eigthG
      unlink fourthG R4."Has_many" ninthG

   endif

# End Test 14

#-------------------------------------------------------------------#
# Test 15 - Attempt to link one to many and navigate to the end of 
#           each link
#           Add in a new instance in the middle of a chain with two 
#           end objects.
#-------------------------------------------------------------------#

   if Iteration = 15 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0705", "Relationships", "objG", "1c to Mc reflexive navigations"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-0606"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0607"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-0608"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1204"]
      [] = RPT8:Specify_Requid [Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      Local_Counter = 0
      Inst_Failed   = FALSE
      Unsupported   = FALSE

      # Formalise some relationships
      link firstG R4."Has_many" secondG
      link firstG R4."Has_many" thirdG
      link firstG R4."Has_many" fourthG

      link secondG R4."Has_many" fifthG
      link secondG R4."Has_many" sixthG

      link thirdG R4."Has_many" seventhG
 
      link fourthG R4."Has_many" eigthG
      link fourthG R4."Has_many" ninthG

      tenthG = find-one Object_G where idG = 10

      {SetG} = firstG -> R4."Has_many".Object_G

      Local_Counter = 1

      if countof {SetG} = 3 then

         for InstG in {SetG} do

            if InstG = UNDEFINED then
               Inst_Failed  = TRUE
               Failure_Code = -10
            else
               Local_Counter = Local_Counter + 1

               {Next_SetG} = InstG -> R4."Has_many".Object_G

               for Sub_InstG in {Next_SetG} do
 
                  if Sub_InstG = UNDEFINED then
                     Inst_Failed  = TRUE
                     Failure_Code = -20
                  else
                     Local_Counter = Local_Counter + 1
                  endif

               endfor         

            endif

         endfor

      else
         Inst_Failed  = TRUE
         Failure_Code = countof {SetG}
      endif

      if Inst_Failed = FALSE then 

         if Local_Counter = 9 then
            # Unlink old element and splice in a new element, making sure that the links are
            # still correct.
            unlink firstG R4."Has_many" fourthG

            # Link in new element
            link firstG R4."Has_many" tenthG

            # Relink new element to old element
            link tenthG R4."Has_many" fourthG 
                    
            # Can we navigate back from thirdG to tenthG
            new_tenth = fourthG -> R4."Has_a".Object_G

            # And while we''re at it, can we navigate from last back to first,
            # taking into account the newly added link
            new_first = eigthG -> R4."Has_a".Object_G -> R4."Has_a".Object_G -> R4."Has_a".Object_G

            if new_tenth = UNDEFINED then
               Inst_Failed  = TRUE
               Failure_Code = -30
            else

               if new_first = UNDEFINED then
                  Inst_Failed  = TRUE
                  Failure_Code = -40
               else
                  # New instance is not undefined
                  Inst_Failed  = FALSE
                  Failure_Code = 0

                  Local_Counter = 1

                  {SetG} = firstG -> R4."Has_many".Object_G

                  for InstG in {SetG} do

                     if InstG = UNDEFINED then
                        Inst_Failed  = TRUE
                        Failure_Code = -50
                     else
                        Local_Counter = Local_Counter + 1
                        {Next_SetG} = InstG -> R4."Has_many".Object_G

                        for Sub_InstG in {Next_SetG} do
     
                           if Sub_InstG = UNDEFINED then
                              Inst_Failed  = TRUE
                              Failure_Code = -60
                           else
                              Local_Counter = Local_Counter + 1
                              {Next_Next_SetG} = Sub_InstG -> R4."Has_many".Object_G
     
                              for Sub_Sub_InstG in {Next_Next_SetG} do
      
                                 if Sub_Sub_InstG = UNDEFINED then
                                    Inst_Failed  = TRUE
                                    Failure_Code = -70
                                 else
                                    Local_Counter = Local_Counter + 1
                                 endif

                              endfor         

                           endif

                        endfor         

                     endif

                  endfor

               endif

            endif

            if Inst_Failed = FALSE then

               if Local_Counter = 10 then
                  Failure_Code = 0
                  Has_Failed = FALSE
               else
                  Has_Failed   =TRUE
                  Failure_Code = -100 - Local_Counter
               endif

            else
               Has_Failed   = TRUE
               Failure_Code = -80
            endif

         else
            Has_Failed = TRUE
            Failure_Code = -200 - Local_Counter
         endif

      else
         Has_Failed = TRUE
         Failure_Code = -90
      endif

      unlink firstG R4."Has_many" secondG
      unlink firstG R4."Has_many" thirdG
      unlink firstG R4."Has_many" tenthG

      unlink tenthG R4."Has_many" fourthG
 
      unlink secondG R4."Has_many" fifthG
      unlink secondG R4."Has_many" sixthG

      unlink thirdG R4."Has_many" seventhG

      unlink fourthG R4."Has_many" eigthG
      unlink fourthG R4."Has_many" ninthG

   endif

# End Test 15

#-------------------------------------------------------------------#
# Delete some relationships
# This section deletes relationships depending upon which test
# has been performed.
#-------------------------------------------------------------------#

   if Iteration >= 2 & Iteration <= 5 then

      # Delete the formalised relationships
      unlink firstG R13."Has_many" thirdG
      unlink firstG R13."Has_many" fourthG
      unlink fifthG R13."Has_a"    secondG

   endif

#-------------------------------------------------------------------#
# Tests complete
#-------------------------------------------------------------------#

   if Unsupported = FALSE then

      if Has_Failed = FALSE then
         [] = RPT2:Test_Passed["objG", Test, 0]
      else
         [] = RPT3:Test_Failed["objG", Test, Failure_Code]
      endif

   else
      [] = RPT4:Test_Unsupported[Test]
   endif

#-------------------------------------------------------------------#
',3,'',"00000000-0000-0000-0000-0000000008d0",2,3 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-0000000008d6","00000000-0000-0000-0000-0000000000d9",'Many_To_Many_Reflexive','',"ba5eda7a-def5-0000-0000-000000000000",0,'#-------------------------------------------------------------------#
# Reflexive navigations Mc:Mc
#-------------------------------------------------------------------#
 
[] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objG", "Mc to Mc reflexive navigations"]

[] = RPT4:Test_Unsupported[Test]

#-------------------------------------------------------------------#
',3,'',"00000000-0000-0000-0000-0000000008d3",2,4 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-000000000951","00000000-0000-0000-0000-000000000105",'Create_Relationships','',"ba5eda7a-def5-0000-0000-000000000000",0,'#-------------------------------------------------------------------#
#
# Create relationships
#
# The architecture shall implement simple 1:M relationships
# 1241-0000-01-0602
#
# The architecture shall provide a mechanism to allow creation of a 
# simple relationship link between two object instances
# 1241-0000-01-0603
#
# The architecture shall implement associative 1-1:M relationships
# 1241-0000-01-0609
# 
# The architecture shall provide a mechanism to allow creation of an
# associative relationship link between two object instances and am
# associative instance
# 1241-0000-01-0611
#
# The architectureshall support a translation of the ASL link 
# statement to map to the mechanism that allows creation of a 
# relationship link between two object instances
# 1241-0000-01-1202
#
# The architecture shall support a translation of the ASL navigate
# statment to map to the mechanism that allows the traversal of
# relationship links
# 1241-0000-01-1205
#
#-------------------------------------------------------------------#

[] = RPT1:Start_Test[Test, "1241-0000-01-0602", "Relationships", "MO", "Create relationships"]
[] = RPT8:Specify_Requid[Test, "1241-0000-01-0603"]
[] = RPT8:Specify_Requid[Test, "1241-0000-01-0609"]
[] = RPT8:Specify_Requid[Test, "1241-0000-01-0611"]
[] = RPT8:Specify_Requid[Test, "1241-0000-01-1202"]
[] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
[] = RPT8:Specify_Requid [Test, "1103-0000-01-0612"]

Has_Failed  = FALSE

# Find the desired instances for Left_Object
firstLeft  = find-one Left_Object where idLO = 1
secondLeft = find-one Left_Object where idLO = 2
thirdLeft  = find-one Left_Object where idLO = 3

# Find the desired instances for Middle_Object
firstMiddle  = find-one Middle_Object where idMO = 1
thirdMiddle  = find-one Middle_Object where idMO = 3
fourthMiddle = find-one Middle_Object where idMO = 4
fifthMiddle  = find-one Middle_Object where idMO = 5

# Find the desired instances for Right_Object
secondRight = find-one Right_Object where idRO = 2
fourthRight = find-one Right_Object where idRO = 4
fifthRight  = find-one Right_Object where idRO = 5

# Find the desired instances for MR_Object
firstMR = find-one MR_Assoc where idMR = 1
secondMR = find-one MR_Assoc where idMR = 2
thirdMR = find-one MR_Assoc where idMR = 3
fifthMR = find-one MR_Assoc where idMR = 5

# Create normal 1:Mc relationships
link firstLeft R12 firstMiddle
link firstLeft R12 thirdMiddle
link secondLeft R12 fifthMiddle

# Create associative Mc:1 relationships
link firstMiddle R14 secondRight using firstMR
link thirdMiddle R14 fourthRight using fifthMR
link fifthMiddle R14 fourthRight using thirdMR

# Create a couple of instances to prove the relationships
# For coding purposes, it is necessary to overspecify
# the relationship.

LeftInstance   = firstMiddle -> R12.Left_Object
{MiddleSet}    = secondLeft  -> R12.Middle_Object
RightInstance  = firstMiddle -> R14.Right_Object
InstAssoc      = firstMiddle -> R14.MR_Assoc

# Now check that the navigations can be performed

if LeftInstance = UNDEFINED then
   Has_Failed   = TRUE
   Failure_Code = -10
else

   if LeftInstance.idLO != 1 then
      Has_Failed   = TRUE
      Failure_Code = -20
   endif

endif

if not Has_Failed then

   if countof {MiddleSet} != 1 then
      Has_Failed   = TRUE
      Failure_Code = -30
   endif

endif

if not Has_Failed then
   if InstAssoc = UNDEFINED then
      Has_Failed   = TRUE
      Failure_Code = -40
   else

      if InstAssoc.idMR != 1 then
         Has_Failed   = TRUE
         Failure_Code = -50
      endif

   endif

endif

if not Has_Failed then
   if RightInstance = UNDEFINED then
      Has_Failed   = TRUE
      Failure_Code = -60
   else

      if RightInstance.idRO != 2 then
         Has_Failed = TRUE
         Failure_Code = -70
      endif

   endif

endif

#-------------------------------------------------------------------#
# Test complete
#-------------------------------------------------------------------#

   if not Has_Failed then
      [] = RPT2:Test_Passed["MO", Test, 0]
   else
      [] = RPT3:Test_Failed["MO", Test, Failure_Code]
   endif

#-------------------------------------------------------------------#',3,'',"00000000-0000-0000-0000-000000000000",2,1 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-000000000953","00000000-0000-0000-0000-000000000105",'Middle_Object_Navigation','',"ba5eda7a-def5-0000-0000-000000000000",0,'#-------------------------------------------------------------------#
#
# Normal navigation
# 
# The architecture shall implement simple 1:M relationships
# 1241-0000-01-0602
#
# The architecture shall implement associative 1-1:M relationships
# 1241-0000-01-0609
#
# The architecture shall provide operations which, given a starting 
# instance handle and a relationshipspecification, return a single 
# handle of the related instance
# 1241-0000-01-0701
#
# The architecture shall provide operations which, given a starting 
# instance handle and a relationship specification , return a set of
# handles of the related instances
# 1241-0000-01-0702
#
# The architecture shall support chains of navigations expressed in 
# ASL
# 1241-0000-01-0704
#
# The architecture shall support navigations to associative objects
# expressed in ASL
# 1241-0000-01-0706
#
# The architecture shall support navigations from singly associative
# objects expressed in ASL
# 1241-0000-01-0707
#
# The architectureshall support a translation of the ASL link 
# statement to map to the mechanism that allows creation of a 
# relationship link between two object instances
# 1241-0000-01-1202
#
# The architecture shall support a translation of the ASL navigate
# statment to map to the mechanism that allows the traversal of
# relationship links
# 1241-0000-01-1205
#
#-------------------------------------------------------------------#

# Initialise the fault flag
Has_Failed       = FALSE
Supported        = TRUE
#-------------------------------------------------------------------#

# Find the desired instances Left_Object
firstLeft  = find-one Left_Object where idLO = 1
secondLeft = find-one Left_Object where idLO = 2
thirdLeft  = find-one Left_Object where idLO = 3

# Find the desired instances Middle_Object
firstMiddle  = find-one Middle_Object where idMO = 1
thirdMiddle  = find-one Middle_Object where idMO = 3
fourthMiddle = find-one Middle_Object where idMO = 4
fifthMiddle  = find-one Middle_Object where idMO = 5

# Find the desired instances Right_Object
secondRight = find-one Right_Object where idRO = 2
fourthRight = find-one Right_Object where idRO = 4
fifthRight  = find-one Right_Object where idRO = 5

# Find the desired instances Associative Object
firstMR  = find-one MR_Assoc where idMR = 1
secondMR = find-one MR_Assoc where idMR = 2

#-------------------------------------------------------------------#
# Test 1 - Navigate from Left to Middle using relationship number
#-------------------------------------------------------------------#

   if Iteration = 1 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0702", "Relationships", "MO", "Navigate from Left to Middle"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0602"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]  

      # Perform the navigation
      {SetMO} = firstLeft -> R12.Middle_Object

      if countof {SetMO} = 0 then
         Has_Failed = TRUE
      else

         Val1 = -10
         Val2 = -20

         for InstMO in {SetMO} do
   
            if InstMO.idMO = 1 then
               Val1 = InstMO.idMO
            endif

            if InstMO.idMO = 3 then
               Val2 = InstMO.idMO
            endif

         endfor

         if Val1 = 1 then

            if Val2 != 3 then
               Has_Failed = TRUE
               Failure_Code = Val2
            endif

         else
            Has_Failed = TRUE
            Failure_Code = Val1
         endif 

      endif

   endif

# End Test 1

#-------------------------------------------------------------------#
# Test 2 - Navigate From Middle To Left using relationship number
#-------------------------------------------------------------------#

   if Iteration = 2 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0701", "Relationships", "MO", "Navigate From Middle To Left"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0602"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      # Perform the navigation
      InstLO = fifthMiddle -> R12.Left_Object

      # Check the result of the navigation
      if InstLO != UNDEFINED then

         if InstLO.idLO != 2 then
            Has_Failed   = TRUE
            Failure_Code = -10
         endif

      endif

   endif

# End Test 2

#-------------------------------------------------------------------#
# Test 3 - Navigate from an instance of the middle object to an
#          instance in the right object using relationship number
#-------------------------------------------------------------------#

   if Iteration = 3 then 

      [] = RPT1:Start_Test[Test, "1241-0000-01-0701", "Relationships", "MO", "Navigate From Middle To Right"]   
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0609"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      # Perform the navigation
      InstRO = firstMiddle -> R14.Right_Object

      # Check the result of the navigation
      if InstRO != UNDEFINED then

         if InstRO.idRO != 2 then
            Has_Failed   = TRUE
            Failure_Code = InstRO.idRO
         endif

      else
         Has_Failed = TRUE
         Failure_Code = -20
      endif

   endif
 
# End Test 3

#-------------------------------------------------------------------#
# Test 4 - Navigate from an instance in the right object to a set in
#          the middle object
#-------------------------------------------------------------------#

   if Iteration = 4 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0702", "Relationships", "MO", "Navigate From Right To Middle"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0609"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      # Perform the navigation
      {SetMO} = fourthRight -> R14.Middle_Object

      if countof {SetMO} = 0 then
         Has_Failed   = TRUE
         Failure_Code = -10
      else

         Val1 = -20
         Val2 = -30

         for InstMO in {SetMO} do

            if (InstMO.idMO = 3) then
               Val1 = InstMO.idMO
            endif

            if InstMO.idMO = 5 then
               Val2 = InstMO.idMO
            endif

         endfor

         if Val1 = 3 then

            if Val2 != 5 then
               Has_Failed   = TRUE
               Failure_Code = Val2
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = Val1
         endif

      endif

   endif

# End Test 4


#-------------------------------------------------------------------#
# Test 5 - Navigate to the associative object from the Middle Object
#-------------------------------------------------------------------#

   if Iteration = 5 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0706", "Relationships", "MO", "Nav from MO to Assoc"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0609"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      InstAssoc = firstMiddle -> R14.MR_Assoc

      if InstAssoc != UNDEFINED then

         if InstAssoc.idMR != 1 then
            Has_Failed = TRUE
            Failure_Code = InstAssoc.idMR
         endif

      endif

   endif

# End Test 5

#-------------------------------------------------------------------#
# Test 6 - Navigation from a set of instance handles as the source
#-------------------------------------------------------------------#

   if Iteration = 6 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0703", "Relationships", "MO", "Navigation from set of IH"]

      [] = RPT5:Test_Text [Test, "Naviagation from sets unsupported"]

      Supported = FALSE

   endif

# End Test 6

#-------------------------------------------------------------------#
# Test 7 - Attempt to perform a navigation on instance that is not 
#          linked to another instance
#-------------------------------------------------------------------#

   if Iteration = 7 then

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "MO", "Nav non-linked rel M to L"]

      # Fourth Middle is not currently linked to any instances of Left Object.

      # Perform the navigation
      InstLO = fourthMiddle -> R12.Left_Object

      # Check the result of the navigation
      if InstLO != UNDEFINED then
         Has_Failed = TRUE
      endif

   endif

# End Test 7

#-------------------------------------------------------------------#
# Test 8 - Attempt to perform a navigation on instance that is not 
#          linked to another instance
#-------------------------------------------------------------------#

   if Iteration = 8 then

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "MO", "Nav non-linked rel M to R"]

      # Create two new instances
      bigMiddle = create Middle_Object with idMO = 1975
      bigRight  = create Right_Object  with idRO = 2001

      # Seventh Middle is not currently linked to any instances of Right Object.
 
      # Perform the navigation
      InstRO = bigMiddle -> R14.Right_Object

      # Check the result of the navigation
      if InstRO != UNDEFINED then
         Failure_Code = InstRO.idRO
         Has_Failed   = TRUE
      endif

   endif

# End Test 8

#-------------------------------------------------------------------#
# Test 9 - Attempt to perform a navigation on instance that is not 
#          linked to another instance
#-------------------------------------------------------------------#

   if Iteration = 9 then

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "MO", "Nav non-linked rel L to M"]

      # Third Left is not currently linked to any instances of Middle Object.

      # Perform the navigation
      {SetMO} = thirdLeft -> R12.Middle_Object

      if countof {SetMO} != 0 then
         Has_Failed   = TRUE
         Failure_Code = -10
      endif 

   endif

# End Test 9

#-------------------------------------------------------------------#
# Test 10 - Attempt to perform a navigation on instance that is not
#           linked to another instance
#-------------------------------------------------------------------#

   if Iteration = 10 then
      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "MO", "Nav non-linked rel R to M"]

      # Fifth Right is not currently linked to any instances of Middle Object.

      # Perform the navigation
      {SetMO} = fifthRight -> R14.Middle_Object

      if countof {SetMO} != 0 then
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

   endif

# End Test 10

#-------------------------------------------------------------------#
# Test 11 - Navigate to the associative object from the Right Object
#-------------------------------------------------------------------#

   if Iteration = 11 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0706", "Relationships", "MO", "Nav from RO to Assoc"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0609"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      {SetAssoc} = fourthRight -> R14.MR_Assoc

      No_In_Set = countof {SetAssoc}

      if countof {SetAssoc} != 2 then
         Has_Failed   = TRUE
         Failure_Code = -10
      else
         
         Val1 = -20
         Val2 = -30

         for InstAssoc in {SetAssoc} do

            if InstAssoc.idMR = 3 then
               Val1 = InstAssoc.idMR
            endif

            if InstAssoc.idMR = 5 then
               Val2 = InstAssoc.idMR
            endif

         endfor

         if Val1 = 3 then

            if Val2 != 5 then
               Has_Failed   = TRUE
               Failure_Code = Val2
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = Val1
         endif

      endif

   endif

# End Test 11

#-------------------------------------------------------------------#
# Test 12 - Navigate to the associative object from a middle instance 
#           that isn''t linked to the associated object
#-------------------------------------------------------------------#

   if Iteration = 12 then

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "MO", "Nav from RO to Assoc which isnt linked"]
      {SetAssoc} = fifthRight -> R14.MR_Assoc

      if countof {SetAssoc} != 0 then
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

   endif

# End Test 12

#-------------------------------------------------------------------#
# Test 13 - Navigate to the associative object from a right instance 
#           that isn''t linked to the associated object
#-------------------------------------------------------------------#

   if Iteration = 13 then

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "MO", "Nav from MO to Assoc which isnt linked"]

      InstAssoc = fourthMiddle -> R14.MR_Assoc

      if InstAssoc != UNDEFINED then
         Failure_Code = InstAssoc.idMR
         Has_Failed   = TRUE
      endif

   endif

# End Test 13

#-------------------------------------------------------------------#
# Test 14 - Navigate to the associative object from a middle instance 
#           then to the right object
#-------------------------------------------------------------------#

   if Iteration = 14 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0706", "Relationships", "MO", "Navigate from middle to associative to right"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0609"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0704"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0707"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      InstRO = firstMiddle -> R14.MR_Assoc -> R14.Right_Object

      if InstRO != UNDEFINED then

         if InstRO.idRO != 2 then
            Has_Failed = TRUE
            Failure_Code = InstRO.idRO
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

   endif

# End Test 14

#-------------------------------------------------------------------#
# Test 15 - Navigate to the associative object from a right instance 
#           then to a set in the middle object
#-------------------------------------------------------------------#

   if Iteration = 15 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0706", "Relationships", "MO", "Navigate from right to associative to middle"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0609"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0704"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0707"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      {SetMO} = fourthRight -> R14.MR_Assoc -> R14.Middle_Object

      if countof {SetMO} = 0 then
         Has_Failed   = TRUE
         Failure_Code = -10
      else

         Val1 = -20
         Val2 = -30

         for InstMO in {SetMO} do

            if InstMO.idMO = 3 then
               Val1 = InstMO.idMO
            endif

            if InstMO.idMO = 5 then
              Val2 = InstMO.idMO
            endif

         endfor

         if Val1 = 3 then

            if Val2 != 5 then
               Has_Failed   = TRUE
               Failure_Code = Val2
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = Val1
         endif

      endif

   endif

# End Test 15

#-------------------------------------------------------------------#
# Test 16 - Navigate from Left to Middle to Right
#-------------------------------------------------------------------#

   if Iteration = 16 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0704", "Relationships", "MO", "Navigate from left to middle to right"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0602"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0609"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0702"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1202"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      link thirdLeft    R12 fourthMiddle
      link fourthMiddle R14 fifthRight using secondMR
   
      {SetRO} = thirdLeft -> R12.Middle_Object -> R14.Right_Object

      if countof {SetRO} != 1 then
         Has_Failed   = TRUE
         Failure_Code = -10
      else

         for InstRO in {SetRO} do

            if InstRO.idRO != 5 then
               Has_Failed   = TRUE
               Failure_Code = -20
            endif

         endfor

      endif

   endif

# End Test 16

#-------------------------------------------------------------------#
# Test 17 - Navigate from Right to Middle to Left
#-------------------------------------------------------------------#

   if Iteration = 17 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0704", "Relationships", "MO", "Navigate from Right to middle to left"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0602"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0609"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0702"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      {SetLO} = fifthRight -> R14.Middle_Object -> R12.Left_Object

      if countof {SetLO} != 1  then
         Has_Failed   = TRUE
         Failure_Code = -10
      else

         for InstLO in {SetLO} do
         
            if InstLO.idLO != 3 then
               Has_Failed   = TRUE
               Failure_Code = InstLO.idLO
            endif
  
         endfor

      endif

   endif

# End Test 17

#-------------------------------------------------------------------#
# Test 18 - Navigate from second instance of right object to the 
#           associative object to the middle object to the left 
#           object
#-------------------------------------------------------------------#

   if Iteration = 18 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0704", "Relationships", "MO", "RO to Assoc to MO to LO"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0602"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0609"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0702"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0706"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0707"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      {SetLO} = secondRight -> R14.MR_Assoc -> R14.Middle_Object -> R12.Left_Object

      if countof {SetLO} != 1 then
         Has_Failed   = TRUE
         Failure_Code = -10
      else

         for InstLO in {SetLO} do

            if InstLO.idLO != 1 then
               Has_Failed   = TRUE
               Failure_Code = InstLO.idLO
            endif

         endfor

      endif

   endif

# End Test 18

#-------------------------------------------------------------------#
# Tests complete
#-------------------------------------------------------------------#

   if Supported = TRUE then

      if Has_Failed = FALSE then
         [] = RPT2:Test_Passed["MO", Test, 0]
      else
         [] = RPT3:Test_Failed["MO", Test, Failure_Code]
      endif
   
   else
      [] = RPT4:Test_Unsupported[Test]
   endif

#-------------------------------------------------------------------#
',3,'',"00000000-0000-0000-0000-000000000951",2,2 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-000000000956","00000000-0000-0000-0000-000000000105",'Delete_Relationships','',"ba5eda7a-def5-0000-0000-000000000000",0,'#-------------------------------------------------------------------#
#
# Delete all relationships
#
# The architecture shall provide a mapping from the ASL delete 
# instance statment to the deletion mechanism
# 1241-0000-01-0121
#
# The architecture shall provide a mechanism to allow deletion of a 
# simple relationship link between two object instances
# 1241-0000-01-0604
#
# The architecture shall provide a mechanism to allow the deletion of 
# an associative link between an associative object and the link an
# between two objects
# 1241-0000-01-0612
#
# The architecture shall provide a mechanism to allow the deletion of 
# a link between two objects in an associative relationship
# 1241-0000-01-0613
#
# The architecture shall support a translation of the ASL unassociate
# statment to map to the mechanism that allows the deletion of an 
# associative link between an associative object and the link between
# two objects
# 1241-0000-01-1203
#
# The architecture shall support a translation of the ASL unlink
# statement to map to the mechanism that allow the deletion of a 
# link between two objects in a relationship
# 1241-0000-01-1204
#
# The architecture shall support a translation of the ASL navigate
# statment to map to the mechanism that allows the traversal of
# relationship links
# 1241-0000-01-1205
#
#-------------------------------------------------------------------#

Has_Failed = FALSE

[] = RPT1:Start_Test[Test, "1241-0000-01-0604", "Relationships", "MO", "Delete all relationships"]
[] = RPT8:Specify_Requid[Test, "1241-0000-01-0612"]
[] = RPT8:Specify_Requid[Test, "1241-0000-01-0613"]
[] = RPT8:Specify_Requid[Test, "1241-0000-01-1203"]
[] = RPT8:Specify_Requid[Test, "1241-0000-01-1204"]
[] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
[] = RPT8:Specify_Requid [Test, "1103-0000-01-0622"]
# Find the desired instances 

# Find the desired instances Left_Object
firstLeft  = find-one Left_Object where idLO = 1
secondLeft = find-one Left_Object where idLO = 2
thirdLeft  = find-one Left_Object where idLO = 3

# Find the desired instances Middle_Object
firstMiddle  = find-one Middle_Object where idMO = 1
thirdMiddle  = find-one Middle_Object where idMO = 3
fourthMiddle = find-one Middle_Object where idMO = 4
fifthMiddle  = find-one Middle_Object where idMO = 5
bigMiddle    = find-one Middle_Object where idMO = 1975

# Find the desired instances Right_Object
secondRight = find-one Right_Object where idRO = 2
fourthRight = find-one Right_Object where idRO = 4
fifthRight  = find-one Right_Object where idRO = 5
bigRight    = find-one Right_Object where idRO = 2001

# Find the desired instances Associative_Object
firstMR  = find-one MR_Assoc where idMR = 1
secondMR = find-one MR_Assoc where idMR = 2
thirdMR  = find-one MR_Assoc where idMR = 3
fifthMR  = find-one MR_Assoc where idMR = 5
   
# Delete all relationships
unlink firstLeft  R12 firstMiddle
unlink firstLeft  R12 thirdMiddle

# unlink secondLeft R12 firstMiddle
unlink secondLeft R12 fifthMiddle
unlink thirdLeft  R12 fourthMiddle

unassociate firstMiddle  R14 secondRight from firstMR
unassociate thirdMiddle  R14 fourthRight from fifthMR
unassociate fifthMiddle  R14 fourthRight from thirdMR
unassociate fourthMiddle R14 fifthRight from secondMR

unlink firstMiddle  R14 secondRight
unlink thirdMiddle  R14 fourthRight
unlink fifthMiddle  R14 fourthRight
unlink fourthMiddle R14 fifthRight

# Explicitly check that all instances have been unlinked
# correctly.

{Set1M}    = firstLeft  -> R12.Middle_Object
{Set2M}    = secondLeft -> R12.Middle_Object
{Set3M}    = thirdLeft  -> R12.Middle_Object

Inst1MRa = firstMiddle  -> R14.MR_Assoc
Inst1MRb = fourthMiddle -> R14.MR_Assoc
Inst5MRa = thirdMiddle  -> R14.MR_Assoc
Inst5MRb = fifthMiddle  -> R14.MR_Assoc  

Inst2R = firstMR -> R14.Right_Object
Inst4R = fifthMR -> R14.Right_Object

No_In_Set_1M = countof {Set1M}

# Attempt to perform some illegal navigations

if countof {Set1M}  = 0 then

   if Inst1MRa = UNDEFINED then

      if Inst4R != UNDEFINED then
         Has_Failed   = TRUE
         Failure_Code = -30
      endif

   else
      Has_Failed   = TRUE
      Failure_Code = -20
   endif

else
   Has_Failed   = TRUE
   Failure_Code = -10
endif

if not Has_Failed then
   {SetLO}  = find-all Left_Object
   {SetMO}  = find-all Middle_Object
   {SetRO}  = find-all Right_Object
   {SetMRA} = find-all MR_Assoc

   for InstLO in {SetLO} do
      delete InstLO
   endfor

   for InstMO in {SetMO} do
      delete InstMO
   endfor


   for InstRO in {SetRO} do
      delete InstRO
   endfor


   for InstMRA in {SetMRA} do
      delete InstMRA
   endfor

   {SetLO}  = find-all Left_Object
   {SetMO}  = find-all Middle_Object
   {SetRO}  = find-all Right_Object
   {SetMRA} = find-all MR_Assoc

   if countof {SetLO} = 0 then

      if countof {SetMO} = 0 then

         if countof {SetRO} = 0 then

            if countof {SetMRA} != 0 then
               Has_Failed   = TRUE
               Failure_Code = -40
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = -50
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -60
      endif

   else
      Has_Failed   = TRUE
      Failure_Code = -70
   endif

endif

#-------------------------------------------------------------------#
# Test complete
#-------------------------------------------------------------------#

   if Has_Failed then
      [] = RPT3:Test_Failed["MO", Test, Failure_Code]
   else
      [] = RPT2:Test_Passed["MO", Test, 0]
   endif

#-------------------------------------------------------------------#',3,'',"00000000-0000-0000-0000-000000000953",2,3 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-0000000009af","00000000-0000-0000-0000-00000000011b",'Create_Relationships','',"ba5eda7a-def5-0000-0000-000000000000",0,'#-------------------------------------------------------------------#
#
# Create relationships
#
# The architecture shall support the creation of a new object 
# instance at application start or and during execution
# 1241-0000-01-0101
#
# A mapping shall be provided for the ASL create statment, including 
# the extension which allows some or all atributes to be specified
# 1241-0000-01-0102
#
# The architecture shall provide a mechanism to allow creation of a 
# simple relationship link between two object instances
# 1241-0000-01-0603
#
# The architectureshall support a translation of the ASL link 
# statement to map to the mechanism that allows creation of a 
# relationship link between two object instances
# 1241-0000-01-1202
#
# The architecture shall support a translation of the ASL navigate
# statment to map to the mechanism that allows the traversal of
# relationship links
# 1241-0000-01-1205
#
#-------------------------------------------------------------------#

[] = RPT1:Start_Test[Test, "1241-0000-01-0603", "Relationships", "objLM", "Create relationships"]
[] = RPT8:Specify_Requid[Test,"1241-0000-01-1202"]
[] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
[] = RPT8:Specify_Requid [Test, "1103-0000-01-0612"]

Has_Failed = TRUE

# Find the desired instances for Left Many Object
firstLM    = find-one Left_Many where idLM = 1
secondLM   = find-one Left_Many where idLM = 2
thirdLM    = find-one Left_Many where idLM = 3
tenthLM    = find-one Left_Many where idLM = 10
eleventhLM = find-one Left_Many where idLM = 11
twelthLM   = find-one Left_Many where idLM = 12

# Find the desired instances for Right Many Object
firstRM    = find-one Right_Many where idRM = 1
secondRM   = find-one Right_Many where idRM = 2
thirdRM    = find-one Right_Many where idRM = 3
tenthRM    = find-one Right_Many where idRM = 10
eleventhRM = find-one Right_Many where idRM = 11
twelthRM   = find-one Right_Many where idRM = 12

# Find the desired instances for Associative Object
secondAssoc   = find-one LMRM_Assoc where idLMRM = 2
thirdAssoc    = find-one LMRM_Assoc where idLMRM = 3
fourthAssoc   = find-one LMRM_Assoc where idLMRM = 4
fifthAssoc    = find-one LMRM_Assoc where idLMRM = 5
eighthAssoc   = find-one LMRM_Assoc where idLMRM = 8
ninthAssoc    = find-one LMRM_Assoc where idLMRM = 9
tenthAssoc    = find-one LMRM_Assoc where idLMRM = 10
eleventhAssoc = find-one LMRM_Assoc where idLMRM = 11
twelthAssoc   = find-one LMRM_Assoc where idLMRM = 12

# Find the desired instances for Bottom Many Object
firstBM  = find-one Bottom_Many where idBM = 1
thirdBM  = find-one Bottom_Many where idBM = 3
fourthBM = find-one Bottom_Many where idBM = 4
fifthBM  = find-one Bottom_Many where idBM = 5
tenthBM  = find-one Bottom_Many where idBM = 10

# Create associative Mc:Mc relationships
link firstLM  R15 firstRM  using secondAssoc
link firstLM  R15 thirdRM  using thirdAssoc
link secondLM R15 secondRM using fifthAssoc
link thirdLM  R15 firstRM  using fourthAssoc

link tenthLM    R15 tenthRM    using tenthAssoc
link tenthLM    R15 eleventhRM using eleventhAssoc
link tenthLM    R15 twelthRM   using twelthAssoc
link eleventhLM R15 eleventhRM using eighthAssoc
link twelthLM   R15 eleventhRM using ninthAssoc

# Create normal 1:Mc relationships
link secondAssoc R16 firstBM
link thirdAssoc  R16 firstBM
link thirdAssoc  R16 fifthBM
link fourthAssoc R16 firstBM
link fourthAssoc R16 thirdBM
link fifthAssoc  R16 fourthBM
link tenthAssoc  R16 tenthBM

# Create a couple of instances to prove the relationships
# For coding purposes, it is necessary to overspecify
# the relationship.

{A_RM_Set} = firstLM -> R15.Right_Many

{A_BM_Set} = fourthAssoc -> R16.Bottom_Many

{A_Assoc_Instance}  = thirdLM -> R15.LMRM_Assoc

No_In_BM_Set = countof {A_BM_Set}
No_In_Set    = countof {A_RM_Set}
No_In_Assoc  = countof {A_Assoc_Instance}

# Now check that the navigations can be performed
if No_In_Set    != 0 & \ 
   No_In_BM_Set != 0 & \   
   No_In_Assoc  != 0   \
then
   Has_Failed = FALSE
endif

#-------------------------------------------------------------------#
# Test complete
#-------------------------------------------------------------------#

if Has_Failed then
   [] = RPT3:Test_Failed["objLM", Test, -1]
else
   [] = RPT2:Test_Passed["objLM", Test, 0]
endif

#-------------------------------------------------------------------#',3,'',"00000000-0000-0000-0000-000000000000",2,1 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-0000000009b1","00000000-0000-0000-0000-00000000011b",'Left_Many_Navigation','',"ba5eda7a-def5-0000-0000-000000000000",0,'#-------------------------------------------------------------------#
#
# Normal navigation
#
# The architecture shall implement  simple 1:M relationships
# 1241-0000-01-0602
#
# The architecture shall implement associative 1-M:M relationships
# 1241-0000-01-0610
# 
# The architecture shall provide operations which, given a starting  
# instance handle and a relationship specification, return single
# handle of the related instance
# 1241-0000-01-0701
#
# The architecture shall provide operations which, given a starting  
# instance handle and a relationship specification, return a set of
# handles of the related instance
# 1241-0000-01-0702
#
# The architecture shall support chains of navigations expressed in 
# ASL 
# 1241-0000-01-0704
# 
# The architecture shall support navigations to associative objects
# expressed in ASL
# 1241-0000-01-0706
#
# The architecture shall support navigations from singly associative
# objects expressed in ASL
# 1241-0000-01-0707
#
# The architecture shall support a translation of the ASL navigate
# statment to map to the mechanism that allows the traversal of
# relationship links
# 1241-0000-01-1205
#
#-------------------------------------------------------------------#

# Initialise the variables
Has_Failed   = FALSE
Failure_Code = 0
Supported    = TRUE

#-------------------------------------------------------------------#

# Find the desired instances for Left ManyObject
firstLM    = find-one Left_Many where idLM = 1
secondLM   = find-one Left_Many where idLM = 2
thirdLM    = find-one Left_Many where idLM = 3
tenthLM    = find-one Left_Many where idLM = 10
eleventhLM = find-one Left_Many where idLM = 11
twelthLM   = find-one Left_Many where idLM = 12

# Find the desired instances for Right Many Object
firstRM     = find-one Right_Many where idRM = 1
secondRM    = find-one Right_Many where idRM = 2
thirdRM     = find-one Right_Many where idRM = 3
tenthRM     = find-one Right_Many where idRM = 10
eleventhRM  = find-one Right_Many where idRM = 11
twelthRM    = find-one Right_Many where idRM = 12

# Find the desired instances for Associative Object
secondAssoc   = find-one LMRM_Assoc where idLMRM = 2
thirdAssoc    = find-one LMRM_Assoc where idLMRM = 3
fourthAssoc   = find-one LMRM_Assoc where idLMRM = 4
fifthAssoc    = find-one LMRM_Assoc where idLMRM = 5
eighthAssoc   = find-one LMRM_Assoc where idLMRM = 8
ninthAssoc    = find-one LMRM_Assoc where idLMRM = 9
tenthAssoc    = find-one LMRM_Assoc where idLMRM = 10
eleventhAssoc = find-one LMRM_Assoc where idLMRM = 11
twelthAssoc   = find-one LMRM_Assoc where idLMRM = 12

# Find the desired instances for Bottom Object
firstBM  = find-one Bottom_Many where idBM = 1
thirdBM  = find-one Bottom_Many where idBM = 3
fourthBM = find-one Bottom_Many where idBM = 4
fifthBM  = find-one Bottom_Many where idBM = 5
tenthBM  = find-one Bottom_Many where idBM = 10

#-------------------------------------------------------------------#
# Test 1 - Navigate from left many to associative object
#-------------------------------------------------------------------#

   if Iteration = 1 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0706", "Relationships", "objLM", "Nav from Left Many to Assoc"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0702"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      {SetAssoc} = secondLM -> R15.LMRM_Assoc

      if countof {SetAssoc} = 0 then
         Has_Failed = TRUE
      else

         for InstAssoc in {SetAssoc} do

            if InstAssoc.idLMRM != 5 then
               Has_Failed = TRUE
               Failure_Code = -10
            endif

         endfor

      endif

   endif

# End Test 1

#-------------------------------------------------------------------#
# Test 2 - Navigate from the associative object to the bottom object
#-------------------------------------------------------------------#

   if Iteration = 2 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0707", "Relationships", "objLM", "Assoc object to Bottom Object"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0702"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      {SetBM} = thirdAssoc -> R16.Bottom_Many

      if countof {SetBM} != 2 then
         Has_Failed = TRUE
      else
  
         Val1 = -10
         Val2 = -20

         for InstBM in {SetBM} do
 
            if InstBM.idBM = 1 then
               Val1 = InstBM.idBM   
            endif

            if InstBM.idBM = 5 then
               Val2 = InstBM.idBM
            endif

         endfor

         if Val1 = 1 then

            if Val2 != 5 then
               Has_Failed   = TRUE
               Failure_Code = Val2
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = Val1
         endif

      endif

   endif

# End Test 2

#-------------------------------------------------------------------#
# Test 3 - Chained navigation from object BM to associative obejct 
#          then to object RM
#-------------------------------------------------------------------#

   if Iteration = 3 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0704", "Relationships", "objLM", "ObjBM to Assoc to ObjRM"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0602"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0702"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0707"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      InstRM = firstBM -> R16.LMRM_Assoc -> R15.Right_Many

      if InstRM.idRM != 1 then
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

   endif

# End Test 3

#-------------------------------------------------------------------#
# Test 4 - Chained navigation from object BM to associative object 
#          to object LM
#-------------------------------------------------------------------#

   if Iteration = 4 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0704", "Relationships", "objLM", "ObjBM to Assoc to ObjLM"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0602"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0702"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0707"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      InstLM = firstBM -> R16.LMRM_Assoc -> R15.Left_Many

      if InstLM.idLM != 3 then
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

   endif

# End Test 4

#-------------------------------------------------------------------#
# Test 5 - Full navigation
#-------------------------------------------------------------------#

   if Iteration = 5 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0704", "Relationships", "objLM", "Full navigation"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0602"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0702"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0706"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0707"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      {SetRM} = secondLM -> R15.LMRM_Assoc -> R16.Bottom_Many -> R16.LMRM_Assoc -> R15.Right_Many

      if countof {SetRM} != 1 then
         Has_Failed   = TRUE
         Failure_Code = countof {SetRM}
      endif

   endif

# End Test 5

#-------------------------------------------------------------------#
# Test 6 - Correlated associative navigation
#-------------------------------------------------------------------#

   if Iteration = 6 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0706", "Relationships", "objLM", "Correlated Assoc"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0701"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      {Assoc1} = firstLM -> R15.LMRM_Assoc
      {Assoc2} = firstRM -> R15.LMRM_Assoc
      {SetRM}  = firstLM -> R15.Right_Many

      FirstInstFound  = FALSE
      SecondInstFound = FALSE
      ThirdInstFound  = FALSE

      for RMInst in {SetRM} do

         if RMInst.idRM = 1 then
            FirstInstFound = TRUE

            for InstAssoc1 in {Assoc1} do

               if InstAssoc1.idLMRM = 2 then
                  SecondInstFound = TRUE
  
                  for InstAssoc2 in {Assoc2} do      

                     if InstAssoc2.idLMRM = 2 then
                        ThirdInstFound = TRUE
                        InstAssoc = firstLM and firstRM -> R15.LMRM_Assoc
                     endif

                  endfor

               endif

            endfor

         endif

      endfor

      if FirstInstFound then

         if SecondInstFound then

            if ThirdInstFound then
            
               if InstAssoc != UNDEFINED then

                  if InstAssoc.idLMRM != 2 then
                     Has_Failed = TRUE
                     Failure_Code = InstAssoc.idLMRM
                  endif

               else
                  Has_Failed = TRUE
                  Failure_Code = -20
               endif

            else
               Has_Failed = TRUE
               Failure_Code  = -30
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = -40
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -50
      endif

   endif

# End Test 6

#-------------------------------------------------------------------#
# Test 7 - Navigate from the first instance of the right object to 
#          the associative object to return a set
#-------------------------------------------------------------------#

   if Iteration = 7 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0706", "Relationships", "objLM", "ObjRM to Assoc to ObjBM"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0702"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      {SetAssoc} = firstRM -> R15.LMRM_Assoc
            
      if countof{SetAssoc} = 2 then

         Val1 = -10
         Val2 = -20

         for InstAssoc in {SetAssoc} do
   
            if InstAssoc.idLMRM = 2 then
               Val1 = InstAssoc.idLMRM
            endif

            if InstAssoc.idLMRM = 4 then
               Val2 = InstAssoc.idLMRM
            endif

         endfor

         if Val1 = 2 then

            if Val2 !=  4 then
               Has_Failed   = TRUE
               Failure_Code = Val2
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = Val1
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -30
      endif     

   endif

# End Test 7

#-------------------------------------------------------------------#
# Test 8 - Correlated associative navigation from first instance of 
#          the left many object and the first instance of the right
#          many object to the associative object and then to the
#          bottom many object
#
#          N.B. Correlated associative navigation cannot form part of
#          chained navigation
#-------------------------------------------------------------------#

   if Iteration = 8 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0706", "Relationships", "objLM", "ObjRM and Obj LM to Assoc to ObjBM"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0602"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0702"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0707"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0704"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      {Assoc1} = tenthLM -> R15.LMRM_Assoc
      {Assoc2} = tenthRM -> R15.LMRM_Assoc

      FirstInstFound = FALSE
      SecondInstFound = FALSE

      for AssocInst1 in {Assoc1} do

         if AssocInst1.idLMRM = 10 then
            FirstInstFound = TRUE

            for AssocInst2 in {Assoc2} do

               if AssocInst2.idLMRM = 10 then
                  SecondInstFound = TRUE      
                  InstAssoc = tenthLM and tenthRM -> R15.LMRM_Assoc       
               endif

            endfor

         endif

      endfor

      if FirstInstFound then

         if SecondInstFound then

            if InstAssoc != UNDEFINED then

               {SetBM} = InstAssoc -> R16.Bottom_Many
                  
               if countof{SetBM} != 1 then
                  Has_Failed = TRUE
                  Failure_Code = -10
               else

                  for InstBM in {SetBM} do

                     if InstBM.idBM != 10 then
                        Has_Failed   = TRUE
                        Failure_Code = InstBM.idBM
                     endif

                  endfor
           
               endif

            else
               Has_Failed = TRUE
               Failure_Code = -10
            endif

         else
            Has_Failed = TRUE
            Failure_Code = -20
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -30
      endif

   endif

# End Test 8

#-------------------------------------------------------------------#
# Test 9 - Perform correlated associative navigation from the 11th
#          instance of the Left Many object and the 11th instance of
#          the Right Many object to the 8th instance of the 
#          Associative object
#-------------------------------------------------------------------#

   if Iteration = 9 then
      
      Failure_Code = 0

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objLM", "Correlated"]

      InstAssoc = eleventhLM and eleventhRM -> R15.LMRM_Assoc

      if InstAssoc != UNDEFINED then

         if InstAssoc.idLMRM != 8 then
            Has_Failed   = TRUE
            Failure_Code = -10
         endif

      endif

   endif

# End Test 9

#-------------------------------------------------------------------#
# Test 10 - Perform correlated associative navigation from the 10th
#           instance of the Left Many object and the 11th instance of
#           Right MAny object to the 11th instance of the Associative
#           object
#-------------------------------------------------------------------#

   if Iteration = 10 then
      
      Failure_Code = 0

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objLM", "Correlated"]

      InstAssoc = tenthLM and eleventhRM -> R15.LMRM_Assoc

      if InstAssoc != UNDEFINED then

         if InstAssoc.idLMRM != 11 then
            Has_Failed   = TRUE
            Failure_Code = -10
         endif

      endif

   endif

# End Test 10

#-------------------------------------------------------------------#
# Report start of the test
#-------------------------------------------------------------------#

if Supported = TRUE then

   if Has_Failed = FALSE then
      [] = RPT2:Test_Passed["objLM", Test, 0]
   else
      [] = RPT3:Test_Failed["objLM", Test, Failure_Code]
   endif

else
   [] = RPT4:Test_Unsupported[Test]
endif

#-------------------------------------------------------------------#
',3,'',"00000000-0000-0000-0000-0000000009af",2,2 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-0000000009b4","00000000-0000-0000-0000-00000000011b",'Delete_Relationships','',"ba5eda7a-def5-0000-0000-000000000000",0,'#-------------------------------------------------------------------#
#
# Delete all relationships
#
# The architecture shall provide a mapping from the ASL delete
# instance statement to the deletion mechanism
# 1241-0000-01-0121
#
# The architecture shall provide a mechanism to allow deletion of a 
# simple relational link between two object instances
# 1241-0000-01-0604
#
# The architecture shall provide a mechanism to allow the deletion of
# an associative object and the link between two objects
# 1241-0000-01-0612
#
# The architecture shall provide a mechanism to allow the deletion of
# a link between two objects in an associative relationship
# 1241-0000-01-0613
#
# The architecture shall support a translation of the ASL unassociate
# statment to map to the mechanism that allows the deletion of an 
# associative link between an associative object and the link between
# two objects
# 1241-0000-01-1203
#
# The architecture shall support a translation of the ASL unlink
# statement to map to the mechanism that allow the deletion of a 
# link between two objects in a relationship
# 1241-0000-01-1204
#
# The architecture shall support a translation of the ASL navigate
# statment to map to the mechanism that allows the traversal of
# relationship links
# 1241-0000-01-1205
#
#-------------------------------------------------------------------#

# Initialise the variables
Has_Failed   = FALSE
Failure_Code = 0

[] = RPT1:Start_Test[Test, "1241-0000-01-0604", "Relationships", "objLM", "Delete all relationships"]

[] = RPT8:Specify_Requid[Test, "1241-0000-01-0612"]
[] = RPT8:Specify_Requid[Test, "1241-0000-01-0613"]
[] = RPT8:Specify_Requid[Test, "1241-0000-01-1203"]
[] = RPT8:Specify_Requid[Test, "1241-0000-01-1204"]
[] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
[] = RPT8:Specify_Requid [Test, "1103-0000-01-0622"]

# Find the desired instances for Left Many Object
firstLM    = find-one Left_Many where idLM = 1
secondLM   = find-one Left_Many where idLM = 2
thirdLM    = find-one Left_Many where idLM = 3
tenthLM    = find-one Left_Many where idLM = 10
eleventhLM = find-one Left_Many where idLM = 11
twelthLM   = find-one Left_Many where idLM = 12

# Find the desired instances for Right Many Object
firstRM     = find-one Right_Many where idRM = 1
secondRM    = find-one Right_Many where idRM = 2
thirdRM     = find-one Right_Many where idRM = 3
tenthRM     = find-one Right_Many where idRM = 10
eleventhRM  = find-one Right_Many where idRM = 11
twelthRM    = find-one Right_Many where idRM = 12

# Find the desired instances for Bottom Many Object
firstBM  = find-one Bottom_Many where idBM = 1
thirdBM  = find-one Bottom_Many where idBM = 3
fourthBM = find-one Bottom_Many where idBM = 4
fifthBM  = find-one Bottom_Many where idBM = 5
tenthBM  = find-one Bottom_Many where idBM = 10

# Find the desired instances for Associative Object
secondAssoc   = find-one LMRM_Assoc where idLMRM = 2
thirdAssoc    = find-one LMRM_Assoc where idLMRM = 3
fourthAssoc   = find-one LMRM_Assoc where idLMRM = 4
fifthAssoc    = find-one LMRM_Assoc where idLMRM = 5
eighthAssoc   = find-one LMRM_Assoc where idLMRM = 8
ninthAssoc    = find-one LMRM_Assoc where idLMRM = 9
tenthAssoc    = find-one LMRM_Assoc where idLMRM = 10
eleventhAssoc = find-one LMRM_Assoc where idLMRM = 11
twelthAssoc   = find-one LMRM_Assoc where idLMRM = 12

# Delete all relationships
unassociate firstLM  R15 firstRM  from secondAssoc
unassociate firstLM  R15 thirdRM  from thirdAssoc
unassociate secondLM R15 secondRM from fifthAssoc
unassociate thirdLM  R15 firstRM  from fourthAssoc

unassociate tenthLM    R15 tenthRM    from tenthAssoc
unassociate tenthLM    R15 eleventhRM from eleventhAssoc
unassociate tenthLM    R15 twelthRM   from twelthAssoc
unassociate eleventhLM R15 eleventhRM from eighthAssoc
unassociate twelthLM   R15 eleventhRM from ninthAssoc

unlink tenthAssoc R16 tenthBM

unlink secondAssoc R16 firstBM
unlink thirdAssoc  R16 firstBM
unlink thirdAssoc  R16 fifthBM
unlink fourthAssoc R16 firstBM
unlink fourthAssoc R16 thirdBM
unlink fifthAssoc  R16 fourthBM

unlink firstLM    R15 firstRM
unlink firstLM    R15 thirdRM
unlink secondLM   R15 secondRM
unlink thirdLM    R15 firstRM
unlink tenthLM    R15 tenthRM    
unlink tenthLM    R15 eleventhRM 
unlink tenthLM    R15 twelthRM
unlink eleventhLM R15 eleventhRM 
unlink twelthLM   R15 eleventhRM 
# Test that the unlinking has been performed

{SetAssoc} = firstLM -> R15.LMRM_Assoc
{SetBM}    = thirdAssoc -> R16.Bottom_Many
InstRM     = fifthAssoc -> R15.Right_Many

if countof {SetAssoc} = 0 then
   
   if countof {SetBM} = 0 then

      if InstRM != UNDEFINED then
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

   else
      Has_Failed   = TRUE
      Failure_Code = -20
   endif

else
   Has_Failed = TRUE
   Failure_Code = -30
endif

if not Has_Failed then

   {SetLM}    = find-all Left_Many
   {SetRM}    = find-all Right_Many
   {SetAssoc} = find-all LMRM_Assoc
   {SetBM}    = find-all Bottom_Many

   for InstLM in {SetLM} do
      delete InstLM
   endfor

   for InstRM in {SetRM} do
      delete InstRM
   endfor

   for InstAssoc in {SetAssoc} do
      delete InstAssoc
   endfor

   for InstBM in {SetBM} do
      delete InstBM
   endfor

   {SetLM}    = find-all Left_Many
   {SetRM}    = find-all Right_Many
   {SetAssoc} = find-all LMRM_Assoc
   {SetBM}    = find-all Bottom_Many

   if countof {SetLM} = 0 then

      if countof {SetRM} = 0 then

         if countof {SetAssoc} = 0 then

            if countof {SetBM} != 0 then
               Has_Failed   = TRUE
               Failure_Code = -40
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = -50
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -60
      endif

   else
      Has_Failed   = TRUE
      Failure_Code = -70
   endif

endif

#-------------------------------------------------------------------#
# Test complete
#-------------------------------------------------------------------#

if Has_Failed then
   [] = RPT3:Test_Failed["objLM", Test, Failure_Code]
else
   [] = RPT2:Test_Passed["objLM", Test, 0]
endif

#-------------------------------------------------------------------#',3,'',"00000000-0000-0000-0000-0000000009b1",2,3 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-000000000a6a","00000000-0000-0000-0000-00000000015d",'ObjP_Navigation','',"ba5eda7a-def5-0000-0000-000000000000",0,'#-------------------------------------------------------------------#
#
# Composed relationships
#
#-------------------------------------------------------------------#

# Initialise the fault flag

[] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "ObjP", "Composed Relationships"]

# Test 1
# Navigate from a single instance handle as the source
#End Test 1

#-------------------------------------------------------------------#

#Test 2
#Navigate from a set of instance handles as the source
#End Test 2

#-------------------------------------------------------------------#

[] = RPT4:Test_Unsupported[Test]

#-------------------------------------------------------------------#
',3,'',"00000000-0000-0000-0000-000000000000",2,1 );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-00000000062d","00000000-0000-0000-0000-00000000062c",'Test',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-00000000062f","00000000-0000-0000-0000-00000000062e",'Iteration',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-000000000630","00000000-0000-0000-0000-00000000062e",'Test',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-00000000062f",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-000000000632","00000000-0000-0000-0000-000000000631",'Test',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000006b3","00000000-0000-0000-0000-0000000006b2",'Test',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000006b5","00000000-0000-0000-0000-0000000006b4",'Iteration',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000006b6","00000000-0000-0000-0000-0000000006b4",'Test',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-0000000006b5",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000006b8","00000000-0000-0000-0000-0000000006b7",'Test',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000006ba","00000000-0000-0000-0000-0000000006b9",'Test',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-000000000719","00000000-0000-0000-0000-000000000718",'Test',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-00000000071b","00000000-0000-0000-0000-00000000071a",'Iteration',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-00000000071c","00000000-0000-0000-0000-00000000071a",'Test',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-00000000071b",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-00000000071e","00000000-0000-0000-0000-00000000071d",'Test',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000007dc","00000000-0000-0000-0000-0000000007db",'Test',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000007de","00000000-0000-0000-0000-0000000007dd",'Iteration',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000007df","00000000-0000-0000-0000-0000000007dd",'Test',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-0000000007de",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000007e1","00000000-0000-0000-0000-0000000007e0",'Test',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000007f1","00000000-0000-0000-0000-0000000007f0",'Iteration',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000007f2","00000000-0000-0000-0000-0000000007f0",'Test',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-0000000007f1",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000008ce","00000000-0000-0000-0000-0000000008cd",'The_IH',"00000000-0000-0000-0000-0000000000dd",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000008cf","00000000-0000-0000-0000-0000000008cd",'It_Is_Defined',"ba5eda7a-def5-0000-0000-000000000001",1,'',"00000000-0000-0000-0000-0000000008ce",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000008d1","00000000-0000-0000-0000-0000000008d0",'Iteration',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000008d2","00000000-0000-0000-0000-0000000008d0",'Test',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-0000000008d1",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000008d4","00000000-0000-0000-0000-0000000008d3",'Iteration',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000008d5","00000000-0000-0000-0000-0000000008d3",'Test',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-0000000008d4",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000008d7","00000000-0000-0000-0000-0000000008d6",'Test',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-000000000952","00000000-0000-0000-0000-000000000951",'Test',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-000000000954","00000000-0000-0000-0000-000000000953",'Iteration',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-000000000955","00000000-0000-0000-0000-000000000953",'Test',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000954",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-000000000957","00000000-0000-0000-0000-000000000956",'Test',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000009b0","00000000-0000-0000-0000-0000000009af",'Test',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000009b2","00000000-0000-0000-0000-0000000009b1",'Iteration',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000009b3","00000000-0000-0000-0000-0000000009b1",'Test',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-0000000009b2",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000009b5","00000000-0000-0000-0000-0000000009b4",'Test',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-000000000a6b","00000000-0000-0000-0000-000000000a6a",'Test',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-000000000006","ba5eda7a-def5-0000-0000-000000000004",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-000000000009","00000000-0000-0000-0000-000000000006",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-00000000000c","00000000-0000-0000-0000-000000000006",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-00000000000f","ba5eda7a-def5-0000-0000-000000000002",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-000000000012","ba5eda7a-def5-0000-0000-000000000004",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-000000000015","ba5eda7a-def5-0000-0000-000000000002",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-000000000018","ba5eda7a-def5-0000-0000-000000000002",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-00000000001b","ba5eda7a-def5-0000-0000-000000000002",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-00000000001e","ba5eda7a-def5-0000-0000-000000000002",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-000000000263","00000000-0000-0000-0000-000000000006",0,'real' );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000002","00000000-0000-0000-0000-000000000002",'types','',0 );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-000000000021","00000000-0000-0000-0000-000000000002","00000000-0000-0000-0000-000000000002",'Relationships','masl_domain',0 );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000002",'Relationships','',0 );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-000000000027","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000002",'Shared','',0 );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-00000000025a","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000002",'types','',0 );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-000000000266","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000002",'functions','',0 );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-0000000002c8","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000002",'scenarios','',0 );
INSERT INTO S_EDT VALUES ( "00000000-0000-0000-0000-00000000025c" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-00000000025f",'Red','',"00000000-0000-0000-0000-00000000025c","00000000-0000-0000-0000-000000000000" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-000000000260",'Green','',"00000000-0000-0000-0000-00000000025c","00000000-0000-0000-0000-00000000025f" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-000000000261",'Black','',"00000000-0000-0000-0000-00000000025c","00000000-0000-0000-0000-000000000260" );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000268","00000000-0000-0000-0000-000000000000",'Create_Report_Data','','# Find out of there already is one of these.
# It is not inconceivable that a report object still exists from a previous run.
# Report objects are not deleted at the end of a run, as certain events may
# still be en-queued.

old_report = find-one Report_Data

if old_report != UNDEFINED then
   delete old_report
endif

My_Report = create unique Report_Data with Reported_Domain_Number = 0

[] = RPT6:Domain_Test_Start["Relationships"]
',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,1 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000271","00000000-0000-0000-0000-000000000000",'Delete_Report_Data','','[] = RPT7:Domain_Test_Finished["Relationships"]

# Do not delete the Report_Data object, as there may be still events in
# the queue.

',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,2 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000275","00000000-0000-0000-0000-000000000000",'Memory_Leak_Test_One_To_Many','','{Set_Of_Middle} = find-all Middle

for Individual_Middle in {Set_Of_Middle} do

   {Set_Of_Right} = Individual_Middle ->R7.Many_Right

   for Individual_Right in {Set_Of_Right} do

      #Go from a right instance back through the middle to the left instance
      Single_Left = Individual_Right -> R7.Middle -> R6.Far_Left

      # Return back up the trail, from the left instance to the set of right
      {Some_Right} = Single_Left ->R6.Middle ->R7.Many_Right

      Right_Updater = countof {Some_Right}

      Individual_Right.Right_Data = Right_Updater

      Updater = Single_Left.Left_Data

      Updater = Updater + 1

      Single_Left.Left_Data = Updater

   endfor

endfor
',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,3 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000279","00000000-0000-0000-0000-000000000000",'Memory_Leak_Test_Many_To_Many','','{Set_Of_Far_Right} = find-all Many_Far_Right

for Individual_Far_Right in {Set_Of_Far_Right} do

   {Set_Of_Right} = Individual_Far_Right ->R8.Many_Right

   for Individual_Right in {Set_Of_Right} do

      # Go back over the link to the far right side
      {Other_Side} = Individual_Right -> R8.Many_Far_Right

      temp_value = countof {Other_Side}

      # Update the right data with how many of the far right it is linked to
      Individual_Right.Right_Data = temp_value

   endfor

   # Update the far right data with how many right it is linked to
   temp_value = countof {Set_Of_Right}
   Individual_Far_Right.MFR_Data = temp_value


   # Navigate to assocative object for this far right object

   {Set_Of_Assoc} = Individual_Far_Right -> R8.Many_Right_Assoc

   for The_Assoc in {Set_Of_Assoc} do

      # Navigate from the associated object through to the far left.
      A_Left = The_Assoc -> R8.Many_Right -> R7.Middle -> R6.Far_Left
      temp_value = A_Left.Left_Data
      temp_value = temp_value + 1
      A_Left.Left_Data = temp_value

   endfor

endfor
',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,4 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-00000000027d","00000000-0000-0000-0000-000000000000",'Get_Instance_State',' Returns a message if the instance state is not as expected
','the_instance_value = Input_Instance_Value
expected_value = Input_Expected_Value
instance_name = Free_Text

if the_instance_value != expected_value then

   $INLINE
   fprintf(stderr, " \n");
   fprintf(stderr, "UNEXPECTED INSTANCE VALUE FOR INSTANCE %s\n",instance_name);
   fprintf(stderr, "Expected Value  %d  Actual Value  %d\n", expected_value, the_instance_value);
   fprintf(stderr, " \n");
   $ENDINLINE

   #$ADA_INLINE
   # with Ada.Text_IO;
   #
   # Ada.Text_IO.New_Line(1);
   # Ada.Text_IO.Put_Line("UNEXPECTED VALUE FOR INSTANCE " & instance_name);
   # Ada.Text_IO.Put_Line("Expected " & integer''image(integer(expected_value)) & "Actual " & integer''image(integer(the_instance_value)));   
   # Ada.Text_IO.New_Line(1);
   #
   #$END_ADAINLINE
endif',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,5 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000002ca","00000000-0000-0000-0000-000000000000",'Start_Relationhip_Tests',' Start_Relationhip_Tests
','[] = Relationships1::Create_Report_Data[]
new_test = create Test_Data with The_Test_Number = 1',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,2 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000002cc","00000000-0000-0000-0000-000000000000",'Finish_Relationship_Tests',' Finish_Relationship_Tests
','
[] = Relationships2::Delete_Report_Data[]

my_test = find-one Test_Data

if my_test != UNDEFINED then
   delete my_test
endif
',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,3 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000002ce","00000000-0000-0000-0000-000000000000",'Perform_Nav_to_Set',' Perform Nav to Set
','#-------------------------------------------------------------------#
#
# Perform navigation from a single instance to a set of instances via 
# another single set.
# 
# The architecture shall support the creation of new object instances
# at application start and during execution
# 1241-0000-01-0101
#
# The mapping shall be provided for the ASL create statment, 
# including the extension which allows some or all atributes to be 
# specified
# 1241-0000-01-0102
#
# The architecture shall support the specification of initial 
# relationship instance populations in scenario files
# 1241-0000-01-0620
#
#-------------------------------------------------------------------#

   my_test = find-one Test_Data
   Test = my_test.The_Test_Number

   Has_Failed = FALSE

#-------------------------------------------------------------------#

   One_Left    = create Far_Left with Left_Identifier = 1 &\ 
                                      Left_Data       = 0

   One_Middle  = create Middle with Middle_Identifier = 1 &\
                                    Middle_Data       = 0

   One_Right   = create Many_Right with Right_Identifier = 1 &\
                                        Right_Data       = 0

   Two_Right   = create Many_Right with Right_Identifier  = 2 &\
                                        Right_Data        = 0

   Three_Right = create Many_Right with Right_Identifier  = 3 &\
                                        Right_Data        = 0

   One_MRA  = create Many_Right_Assoc with MRA_Identifier = 1 &\
                                           MRA_Data       = 0

   Two_MRA  = create Many_Right_Assoc with MRA_Identifier = 2 &\
                                           MRA_Data = 0

   One_MFR = create Many_Far_Right with MFR_Identifier = 1 &\
                                        MFR_Data       = 0

   Two_MFR = create Many_Far_Right with MFR_Identifier = 2 &\
                                        MFR_Data       = 0

#-------------------------------------------------------------------#
# Test that the object instances have been correctly created
#-------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1241-0000-01-0101", "Relationships", "Middle", "Object Instance Creation"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0102"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0620"]

   {SetL}   = find-all Far_Left
   {SetM}   = find-all Middle
   {SetR}   = find-all Many_Right
   {SetMRA} = find-all Many_Right_Assoc
   {SetMFR} = find-all Many_Far_Right

   if countof {SetL} = 1 then

      if countof {SetM} = 1 then

         if countof {SetR} = 3 then

            if countof {SetMRA} = 2 then

               if countof {SetMFR} != 2 then
                  Has_Failed   = TRUE
                  Failure_Code = countof {SetMRA}
               endif

            else
               Has_Failed   = TRUE
               Failure_Code = -20
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = -30
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -40
      endif

   else
      Has_Failed   = TRUE
      Failure_Code = -50
   endif

   if Has_Failed = FALSE then
      [] = RPT2:Test_Passed["Middle", Test, 0]
   else
      [] = RPT3:Test_Failed["Middle", Test, Failure_Code]
   endif

   Test = Test + 1

#-------------------------------------------------------------------#
# Create the relationships
#-------------------------------------------------------------------#

   [] = M1:Create_Relationships[Test]
   Test=Test + 1

#-------------------------------------------------------------------#
# Perform the navigation tests
#-------------------------------------------------------------------#
   
   Count = 1
  
   loop
      [] = M2:Middle_Navigation[Count, Test]
      Test = Test + 1 
      Count = Count + 1
      breakif Count = 15
   endloop

#-------------------------------------------------------------------#
# Delete the relationships
#-------------------------------------------------------------------#

   [] = M3:Delete_Relationships[Test]
   Test = Test + 1

#-------------------------------------------------------------------#

   my_test.The_Test_Number = Test',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,5 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000002d0","00000000-0000-0000-0000-000000000000",'Middle_Object_Relationship_Tests',' Middle Object Relationship Tests
','#-------------------------------------------------------------------#
#
# Perform tests via scenario for the Middle_Object relationships
# 
# The architecture shall support the creation of new object instances
# at application start and during execution
# 1241-0000-01-0101
#
# The mapping shall be provided for the ASL create statment, 
# including the extension which allows some or all atributes to be 
# specified
# 1241-0000-01-0102
#
# The architecture shall support the specification of initial 
# relationship instance populations in scenario files
# 1241-0000-01-0620
#
#-------------------------------------------------------------------#

   my_test = find-one Test_Data
   Test    = my_test.The_Test_Number

   Has_Failed = FALSE

#-------------------------------------------------------------------#
# Create the instances
#-------------------------------------------------------------------#

   # Create Left_Object Instances
   newLeft = create Left_Object with idLO = 1
   newLeft = create Left_Object with idLO = 2
   newLeft = create Left_Object with idLO = 3

   # Create Middle_Object Instances
   newMiddle = create Middle_Object with idMO    = 1 &\
                                         ResultA = 0

   newMiddle = create Middle_Object with idMO    = 3 &\
                                         ResultA = 0 

   newMiddle = create Middle_Object with idMO    = 4 &\
                                         ResultA = 0 

   newMiddle = create Middle_Object with idMO    = 5 &\
                                         ResultA = 0 

   # Create Right_Object Instances
   newRight = create Right_Object with idRO = 2
   newRight = create Right_Object with idRO = 4
   newRight = create Right_Object with idRO = 5


   # MR_Assoc
   newMR = create MR_Assoc with idMR = 1
   newMR = create MR_Assoc with idMR = 2
   newMR = create MR_Assoc with idMR = 3
   newMR = create MR_Assoc with idMR = 5

#-------------------------------------------------------------------#
# Test that the object instances have been correctly created
#-------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1241-0000-01-0101", "Relationships", "MO", "Object Instance Creation"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0102"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0620"]

   {SetL}   = find-all Left_Object
   {SetM}   = find-all Middle_Object
   {SetR}   = find-all Right_Object
   {SetMRA} = find-all MR_Assoc

   if countof {SetL} = 3 then

      if countof {SetM} = 4 then

         if countof {SetR} = 3 then

            if countof {SetMRA} != 4 then
               Has_Failed   = TRUE
               Failure_Code = -10
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = -20
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -30
      endif

   else
      Has_Failed   = TRUE
      Failure_Code = -40
   endif

   if Has_Failed = FALSE then
      [] = RPT2:Test_Passed["MO", Test, 0]
   else
      [] = RPT3:Test_Failed["MO", Test, Failure_Code]
   endif

   Test = Test + 1

#-------------------------------------------------------------------#
# Create the relationships
#-------------------------------------------------------------------#

 # Initiate the test
 [] = MO1:Create_Relationships[Test]
 Test = Test + 1

#-------------------------------------------------------------------#
# Perform the navigation tests
#-------------------------------------------------------------------#

   Count  = 1

   loop

      # Initiate the test
      [] = MO2:Middle_Object_Navigation[Count, Test]

      Test  = Test  + 1
      Count = Count + 1
      breakif Count = 19

   endloop

#-------------------------------------------------------------------#
# Delete the relationships
#-------------------------------------------------------------------#

   # Initiate the test
   [] = MO3:Delete_Relationships[Test]
   Test = Test + 1

#-------------------------------------------------------------------#

my_test.The_Test_Number = Test',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,4 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000002d2","00000000-0000-0000-0000-000000000000",'Test_Relationships_For_Left_Many',' Test Relationships For Left Many
','#-------------------------------------------------------------------#
#
# Perform tests via scenario for the Left_Many relationships
# 
# The architecture shall support the creation of new object instances
# at application start and during execution
# 1241-0000-01-0101
#
# The mapping shall be provided for the ASL create statment, 
# including the extension which allows some or all atributes to be 
# specified
# 1241-0000-01-0102
#
# The architecture shall support the specification of initial 
# relationship instance populations in scenario files
# 1241-0000-01-0620
#
#-------------------------------------------------------------------#

   my_test = find-one Test_Data
   Test    = my_test.The_Test_Number

   Has_Failed = FALSE

#-------------------------------------------------------------------#
# Create the instances
#-------------------------------------------------------------------#

   # Create Left_Many Instances
   newLeftMany = create Left_Many with idLM    = 1 &\  
                                       ResultA = 0 

   newLeftMany = create Left_Many with idLM    = 2 &\ 
                                       ResultA = 0 

   newLeftMany = create Left_Many with idLM    = 3 &\
                                       ResultA = 0

   newLeftMany = create Left_Many with idLM    = 10 &\  
                                       ResultA = 0 

   newLeftMany = create Left_Many with idLM    = 11 &\ 
                                       ResultA = 0 

   newLeftMany = create Left_Many with idLM    = 12 &\
                                       ResultA = 0

   # Create Right_Many Instances
   newRightMany = create Right_Many with idRM = 1
   newRightMany = create Right_Many with idRM = 2
   newRightMany = create Right_Many with idRM = 3
   newRightMany = create Right_Many with idRM = 10
   newRightMany = create Right_Many with idRM = 11
   newRightMany = create Right_Many with idRM = 12

   # Create Associative Instances
   newLMRM = create LMRM_Assoc with idLMRM = 2
   newLMRM = create LMRM_Assoc with idLMRM = 3
   newLMRM = create LMRM_Assoc with idLMRM = 4
   newLMRM = create LMRM_Assoc with idLMRM = 5
   newLMRM = create LMRM_Assoc with idLMRM = 8
   newLMRM = create LMRM_Assoc with idLMRM = 9
   newLMRM = create LMRM_Assoc with idLMRM = 10
   newLMRM = create LMRM_Assoc with idLMRM = 11
   newLMRM = create LMRM_Assoc with idLMRM = 12


   # Create Bottom_Many Instance
   newBottomMany = create Bottom_Many with idBM = 1
   newBottomMany = create Bottom_Many with idBM = 3
   newBottomMany = create Bottom_Many with idBM = 4
   newBottomMany = create Bottom_Many with idBM = 5
   newBottomMany = create Bottom_Many with idBM = 10

#-------------------------------------------------------------------#
# Test that the instances have been correctly created
#-------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1241-0000-01-0101", "Relationships", "objLM", "Object Instance Creation"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0102"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0620"]

   {SetLM}   = find-all Left_Many
   {SetRM}   = find-all Right_Many
   {SetLMRM} = find-all LMRM_Assoc
   {SetBM}   = find-all Bottom_Many

   if countof {SetLM} = 6 then

      if countof {SetRM} = 6 then

         if countof {SetLMRM} = 9 then

            if countof {SetBM} != 5 then
               Has_Failed   = TRUE
               Failure_Code = -10
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = -20
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -30
      endif

   else
      Has_Failed   = TRUE
      Failure_Code = -40
   endif

   if Has_Failed = FALSE then
      [] = RPT2:Test_Passed["objLM", Test, 0]
   else
      [] = RPT3:Test_Failed["objLM", Test, Failure_Code]
   endif

   Test = Test + 1

#-------------------------------------------------------------------#
# Create the relationships
#-------------------------------------------------------------------#

   # Initiate the test
   [] = objLM1:Create_Relationships[Test]
   Test = Test + 1

#-------------------------------------------------------------------#
# Perform the navigation tests
#-------------------------------------------------------------------#

   Count = 1

   loop

      # Initiate the test
      [] = objLM2:Left_Many_Navigation[Count, Test]
  
      Test  = Test  + 1 
      Count = Count + 1
      breakif Count = 11

   endloop

#-------------------------------------------------------------------#
# Delete the relationships
#-------------------------------------------------------------------#

   # Initiate the test
   [] = objLM3:Delete_Relationships[Test]
   Test = Test + 1

#-------------------------------------------------------------------#

my_test.The_Test_Number = Test',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,6 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000002d4","00000000-0000-0000-0000-000000000000",'One_to_One_Tests',' One to One Tests
','#-------------------------------------------------------------------#
#
# Perform relationships tests for 1c:1c navigation
# 
# The architecture shall support the creation of new object instances
# at application start and during execution
# 1241-0000-01-0101
#
# The mapping shall be provided for the ASL create statment, 
# including the extension which allows some or all atributes to be 
# specified
# 1241-0000-01-0102
#
# The architecture shall support the specification of initial 
# relationship instance populations in scenario files
# 1241-0000-01-0620
#
#-------------------------------------------------------------------#

   my_test = find-one Test_Data
   Test = my_test.The_Test_Number

   Has_Failed = FALSE

#-------------------------------------------------------------------#
# Create a few instances of Objects A, B and M
#-------------------------------------------------------------------#

   Count = 5

   loop

      # Object_A
      newA  = create Object_A  with idA = Count

      # Object_B
      newB  = create Object_B  with idB     = Count &\
                                    ResultA = 0

      # Object_M
      newM  = create Object_M  with idM = Count

      Count = Count - 1
      breakif Count = 0

   endloop

#-------------------------------------------------------------------#
# Test that the objects have been correctly created
#-------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1241-0000-01-0101", "Relationships", "objB", "Object Instance Creation"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0102"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0620"]

   {SetA} = find-all Object_A
   {SetB} = find-all Object_B
   {SetM} = find-all Object_M

   if countof {SetA} = 5 then

      if countof {SetB} = 5 then

         if countof {SetM} != 5 then
            Has_Failed   = TRUE
            Failure_Code = -10
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -20
      endif

   else
      Has_Failed   = TRUE
      Failure_Code = -30
   endif

   if Has_Failed = FALSE then
      [] = RPT2:Test_Passed["objB", Test, 0]
   else
      [] = RPT3:Test_Failed["objB", Test, Failure_Code]
   endif

   Test = Test + 1

#-------------------------------------------------------------------#
# Create the relationships
#-------------------------------------------------------------------#

   # Initiate the test
   [] = objB1:Create_Relationships[Test]
   Test = Test + 1

#-------------------------------------------------------------------#
# Perform the navigation tests
#-------------------------------------------------------------------#

   Count = 1

   loop

      # Initiate the test
      [] = objB2:ObjB_Navigation[Count, Test]

      Count = Count + 1
      Test  = Test  + 1

      breakif Count = 15

   endloop

#-------------------------------------------------------------------#
# Delete the relationship tests
#-------------------------------------------------------------------#

   # Initiate the test
   [] = objB3:Delete_Relationships[Test]
   Test = Test + 1

#-------------------------------------------------------------------#

my_test.The_Test_Number = Test',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,8 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000002d6","00000000-0000-0000-0000-000000000000",'One_to_Many_Assoc_Tests',' One to Many Assoc Tests
','#-------------------------------------------------------------------#
#
# Perform relationships tests for 1c:Mc navigation
# 
# The architecture shall support the creation of new object instances
# at application start and during execution
# 1241-0000-01-0101
#
# The mapping shall be provided for the ASL create statment, 
# including the extension which allows some or all atributes to be 
# specified
# 1241-0000-01-0102
#
# The architecture shall support the specification of initial 
# relationship instance populations in scenario files
# 1241-0000-01-0620
#
#-------------------------------------------------------------------#

   my_test = find-one Test_Data
   Test = my_test.The_Test_Number

   Has_Failed = FALSE

#-------------------------------------------------------------------#
# Create a few instances of Objects C, D, DO and O
#-------------------------------------------------------------------#

   Count = 5

   loop

      # Object_C
      newC  = create Object_C  with idC = Count

      # Object_D
      newD  = create Object_D  with idD         = Count &\
                                    ResultA     = 0     &\
                                    Colour_Of_D = ''Red''

      # Object_O
      newO  = create Object_O  with idO = Count

      # Object_DO
      newDO = create Object_DO with idDO = Count

      Count = Count - 1
 
      breakif Count = 0

   endloop

#-------------------------------------------------------------------#
# Create an object or two that already exist.
#-------------------------------------------------------------------#

   newD  = create Object_D  with idD         = 5       &\
                                 ResultA     = 0       &\
                                 Colour_Of_D = ''Black''

   newD  = create Object_D  with idD         = 5     &\
                                 ResultA     = 0     &\
                                 Colour_Of_D = ''Red''

#-------------------------------------------------------------------#
# Test that all the objects have be correctly created
#-------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1241-0000-01-0101", "Relationships", "objD", "Object Instance Creation"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0102"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0620"]

   {SetC}  = find-all Object_C
   {SetD}  = find-all Object_D
   {SetDO} = find-all Object_DO
   {SetO}  = find-all Object_O

   if countof {SetC} = 5 then

      if countof {SetD} = 7 then

         if countof {SetDO} = 5 then

            if countof {SetO} != 5 then
               Has_Failed   = TRUE
               Failure_Code = -10
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = -20
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -30
      endif

   else
      Has_Failed   = TRUE
      Failure_Code = -40
   endif

   if Has_Failed = FALSE then
      [] = RPT2:Test_Passed["objD", Test, 0]
   else
      [] = RPT3:Test_Failed["objD", Test, Failure_Code]
   endif

   Test = Test + 1

#-------------------------------------------------------------------#
# Create the relationships
#-------------------------------------------------------------------#

   # Initiate the test
   [] = objD1:Create_Relationships[Test]
   Test = Test + 1

#-------------------------------------------------------------------#
# Perform the navigation tests
#-------------------------------------------------------------------#

   Count  = 1

   loop

      # Initiate the test
      [] = objD2:ObjD_Navigation[Count, Test]

      Test   = Test   + 1
      Count  = Count  + 1
      breakif Count = 30

   endloop

#-------------------------------------------------------------------#
# Delete the relationships
#-------------------------------------------------------------------#

   # Initiate the test
   [] = objD3:Delete_Relationships[Test]
   Test = Test + 1

#-------------------------------------------------------------------#
# Delete the unlinked instances
#-------------------------------------------------------------------#

   # Initiate the test
   [] = objD4:Delete_Instances[Test]
   Test = Test + 1


#-------------------------------------------------------------------#

my_test.The_Test_Number = Test',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,9 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000002d8","00000000-0000-0000-0000-000000000000",'Many_to_Many_Assoc_Tests',' Many to Many Assoc Tests
','#-------------------------------------------------------------------#
#
# Perform relationships tests for Mc:Mc navigation
# 
# The architecture shall support the creation of new object instances
# at application start and during execution
# 1241-0000-01-0101
#
# The mapping shall be provided for the ASL create statment, 
# including the extension which allows some or all atributes to be 
# specified
# 1241-0000-01-0102
#
# The architecture shall support the specification of initial 
# relationship instance populations in scenario files
# 1241-0000-01-0620
#
#-------------------------------------------------------------------#

   my_test = find-one Test_Data
   Test = my_test.The_Test_Number

   Has_Failed = FALSE

#-------------------------------------------------------------------#
# Create a few instance of Objects E, F and EF
#-------------------------------------------------------------------#

   Count = 5

   loop
      # Object_E
      newE  = create Object_E  with idE      = Count &\
                                    ResultA  = 0

      # Object_F
      newF  = create Object_F  with idF = Count

      # Object_EF
      newEF = create Object_EF with idEF = Count

      Count = Count - 1

      breakif Count = 0

   endloop

#-------------------------------------------------------------------#
# Test that all the objects have be correctly created
#-------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1241-0000-01-0101", "Relationships", "objE", "Object Instance Creation"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0102"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0620"]

   {SetE}  = find-all Object_E
   {SetF}  = find-all Object_F
   {SetEF} = find-all Object_EF

   if countof {SetE} = 5 then

      if countof {SetF} = 5 then

         if countof {SetEF} != 5 then
            Has_Failed   = TRUE
            Failure_Code = -10
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -20
      endif

   else
      Has_Failed   = TRUE
      Failure_Code = -30
   endif

   if Has_Failed = FALSE then
      [] = RPT2:Test_Passed["objE", Test, 0]
   else
      [] = RPT3:Test_Failed["objE", Test, Failure_Code]
   endif

   Test = Test + 1

#-------------------------------------------------------------------#
# Create the relationships
#-------------------------------------------------------------------#

   # Initiate the test
   [] = objE1:Create_Relationships[Test]
   Test = Test + 1

#-------------------------------------------------------------------#
# Perform the navigation tests
#-------------------------------------------------------------------#

   Count  = 1

   loop

      # Initiate the test
      [] = objE2:ObjE_Navigation[Count,Test]

      Test   = Test   + 1
      Count  = Count  + 1
      breakif Count = 23

   endloop

#-------------------------------------------------------------------#
# Delete the relationships
#-------------------------------------------------------------------#

   # Initiate the test
   [] = objE3:Delete_Relationships[Test]
   Test   = Test   + 1

#-------------------------------------------------------------------#

my_test.The_Test_Number = Test


',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,10 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000002da","00000000-0000-0000-0000-000000000000",'Super_Sub_Tests',' Super Sub Tests
','#-------------------------------------------------------------------#
#
# Perform relationship tests via scenario for Super/sub type 
# relationships
# 
# The architecture shall support the creation of new object instances
# at application start and during execution
# 1241-0000-01-0101
#
# The mapping shall be provided for the ASL create statment, 
# including the extension which allows some or all atributes to be 
# specified
# 1241-0000-01-0102
#
# The architecture shall support the specification of initial 
# relationship instance populations in scenario files
# 1241-0000-01-0620
#
#-------------------------------------------------------------------#

   my_test      = find-one Test_Data
   Test         = my_test.The_Test_Number
   Has_Failed   = FALSE
   Failure_Code = 0
#-------------------------------------------------------------------#
# Create instances of objects
#-------------------------------------------------------------------#

   Count = 5

   loop

      # Object_H
      newH  = create Object_H  with idH      = Count &\
                                    ResultA  = 0

      # Object_L
      newL  = create Object_L  with idL = Count

      # Object_I
      newI  = create Object_I with IDI = Count

      # Object_K
      newK  = create Object_K with idK = Count

      # Sub_L1
      newSL1 = create Sub_L1 with idSL1 = Count

      # Sub_L2
      newSL2 = create Sub_L2 with idSL2 = Count

      # Sub_L3
      newSL4 = create Sub_L3 with idSL3 = Count

      # Sub_Sub_L1
      newSSL1 = create Sub_Sub_L1 with idSSL1 = Count

      # Sub_Sub_L2
      newSSL2 = create Sub_Sub_L2 with idSSL2 = Count

      # Sub_Sub_L3
      newSSL3 = create Sub_Sub_L3 with idSSL3 = Count

      # Sub_Sub_L4
      newSSL4 = create Sub_Sub_L4 with idSSL4 = Count

      # Sub_Sub_L5
      newSSL5 = create Sub_Sub_L5 with idSSL5 = Count

      # Sub_Sub_L6
      newSSL6 = create Sub_Sub_L6 with idSSL6 = Count

      # Sub_Sub_L7
      newSSL7 = create Sub_Sub_L7 with idSSL7 = Count

      # Sub_Sub_L8
      newSSL8 = create Sub_Sub_L8 with idSSL8 = Count

      # Sub_Sub_L9
      newSSL9 = create Sub_Sub_L9 with idSSL9 = Count

      # Sub_Sub_L10
      newSSL10 = create Sub_Sub_L10 with idSSL10 = Count

      # Sub_Sub_L11
      newSSL11 = create Sub_Sub_L11 with idSSL11 = Count

      # Sub_Sub_Sub_L1
      newSSSL1 = create Sub_Sub_Sub_L1 with idSSSL1 = Count

      # Sub_Sub_Sub_L2
      newSSSL2 = create Sub_Sub_Sub_L2 with idSSSL2 = Count

      Count = Count - 1
      breakif Count = 0

   endloop

#-------------------------------------------------------------------#
# Test that the object instances have been correctly created
# Because there are so many objects test just a few
#-------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1241-0000-01-0101", "Relationships", "objH", "Object Instance Creation"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0102"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0620"]

   {SetH} = find-all Object_H
   {SetL} = find-all Object_L
   {SetI} = find-all Object_I
   {SetK} = find-all Object_K

   if countof {SetH} = 5 then

      if countof {SetL} = 5 then

         if countof {SetI} = 5 then

            if countof {SetK} != 5 then
               Has_Failed   = TRUE
               Failure_Code = -10
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = -20
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -30
      endif

   else
      Has_Failed   = TRUE
      Failure_Code = -40
   endif

   if Has_Failed = FALSE then
      [] = RPT2:Test_Passed["objH", Test, 0]
   else
      [] = RPT3:Test_Failed["objH", Test, Failure_Code]
   endif

   Test = Test + 1


#-------------------------------------------------------------------#
# Perform the Super/Sub type relationships
#-------------------------------------------------------------------#

   Count = 1

   loop

      [] = objH1:Super_Sub_Relationships[Count, Test]

      Count  = Count + 1
      Test   = Test  + 1
      breakif Count = 14

   endloop

#-------------------------------------------------------------------#

my_test.The_Test_Number = Test

',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,11 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000002dc","00000000-0000-0000-0000-000000000000",'Reflexive_Tests',' Reflexive Tests
','#-------------------------------------------------------------------#
#
# Perform Reflexive 1c:1c and Reflexive 1c:Mc tests
# 
# The architecture shall support the creation of new object instances
# at application start and during execution
# 1241-0000-01-0101
#
# The mapping shall be provided for the ASL create statment, 
# including the extension which allows some or all atributes to be 
# specified
# 1241-0000-01-0102
#
# The architecture shall support the specification of initial 
# relationship instance populations in scenario files
# 1241-0000-01-0620
#
#-------------------------------------------------------------------#

   my_test = find-one Test_Data
   Test = my_test.The_Test_Number

#-------------------------------------------------------------------#
# Create the object instances
#-------------------------------------------------------------------#

   Count = 10

   loop

      # Object_G
      newG  = create Object_G  with idG     = Count &\
                                    ResultA = 0

      Count = Count - 1
      breakif Count = 0

   endloop

#-------------------------------------------------------------------#
# Test that all the objects have be correctly created
#-------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1241-0000-01-0101", "Relationships", "objG", "Object Instance Creation"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0102"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0620"]

   {SetG}  = find-all Object_G

   if countof {SetG} = 10 then
      [] = RPT2:Test_Passed["objG", Test, 0]
   else
      [] = RPT3:Test_Failed["objG", Test, -10]
   endif

   Test = Test + 1

#-------------------------------------------------------------------#
# Reflexive 1c:1c tests
#-------------------------------------------------------------------#

   Count  = 1

   loop

      # Initiate the test
      [] = objG2:One_To_One_Reflexive[Count, Test]

      Count = Count + 1
      Test  = Test  + 1
      breakif Count = 23 

   endloop

#-------------------------------------------------------------------#
# Reflexive 1c:Mc tests
#-------------------------------------------------------------------#

   Count  = 1

   loop
  
      # Initiate the test
      [] = objG3:One_To_Many_Reflexive[Count, Test]

      Count = Count + 1 
      Test  = Test  + 1

      breakif Count = 16

   endloop

#-------------------------------------------------------------------#
# Mc:Mc reflexive navigation
#
# Not currently supported by the WACA
#-------------------------------------------------------------------#

   # Initiate the test
   [] = objG4:Many_To_Many_Reflexive[Test]
   Test = Test + 1

#-------------------------------------------------------------------#

my_test.The_Test_Number = Test',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,12 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000002de","00000000-0000-0000-0000-000000000000",'Composed_Relationships_Tests',' Composed Relationships Tests
','#-------------------------------------------------------------------#
#
# Composed relationships tests
# 
# The architecture shall support the creation of new object instances
# at application start and during execution
# 1241-0000-01-0101
#
# The mapping shall be provided for the ASL create statment, 
# including the extension which allows some or all atributes to be 
# specified
# 1241-0000-01-0102
#
# The architecture shall support the specification of initial 
# relationship instance populations in scenario files
# 1241-0000-01-0620
#
#-------------------------------------------------------------------#

   my_test = find-one Test_Data
   Test    = my_test.The_Test_Number

   Has_Failed = FALSE

#-------------------------------------------------------------------#
# Create the object instances for Objects P, Q and R
#-------------------------------------------------------------------#

   Count = 0

   loop

      Count = Count + 1

      #Object_P
      newP  = create Object_P  with idP     = Count &\
                                    ResultA = 0 

      #Object_Q
      newQ  = create Object_Q  with idQ = Count

      #Object_R
      newR  = create Object_R  with idR = Count

      breakif Count = 5

   endloop

#-------------------------------------------------------------------#
# Test that the objects have been correctly created
#-------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1241-0000-01-0620", "Relationships", "objP", "Object Instance Creation"]

   {SetP} = find-all Object_P
   {SetQ} = find-all Object_Q
   {SetR} = find-all Object_R

   if countof {SetP} = 5 then

      if countof {SetQ} = 5 then

         if countof {SetR} != 5 then
            Has_Failed   = TRUE
            Failure_Code = -10
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -20
      endif

   else
      Has_Failed   = TRUE
      Failure_Code = -30
   endif

   if Has_Failed = FALSE then
      [] = RPT2:Test_Passed["objP", Test, 0]
   else
      [] = RPT3:Test_Failed["objP", Test, Failure_Code]
   endif

   Test = Test + 1

#-------------------------------------------------------------------#   
# Perform the navigations
#-------------------------------------------------------------------#

   Count = 1

   loop

      [] = objP1:ObjP_Navigation[Test]
      Count = Count + 1
      Test = Test + 1

      breakif Count = 3

   endloop

#-------------------------------------------------------------------#

my_test.The_Test_Number = Test',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,1 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000002e0","00000000-0000-0000-0000-000000000000",'Nav_From_Sets',' Nav From Sets
','   my_test = find-one Test_Data
   Test = my_test.The_Test_Number

   Has_Failed = FALSE

#-------------------------------------------------------------------#
# Create a few instances
#-------------------------------------------------------------------#

   firstL  = create Far_Left with Left_Identifier = 1 & Left_Data = 1
   secondL = create Far_Left with Left_Identifier = 2 & Left_Data = 2
   thirdL  = create Far_Left with Left_Identifier = 3 & Left_Data = 3
   fourthL = create Far_Left with Left_Identifier = 4 & Left_Data = 4
   fifthL  = create Far_Left with Left_Identifier = 5 & Left_Data = 5

   firstM  = create Middle with Middle_Identifier = 1 & Middle_Data = 1
   secondM = create Middle with Middle_Identifier = 2 & Middle_Data = 2
   thirdM  = create Middle with Middle_Identifier = 3 & Middle_Data = 3
   fourthM = create Middle with Middle_Identifier = 4 & Middle_Data = 4
   fifthM  = create Middle with Middle_Identifier = 5 & Middle_Data = 5

   firstMR  = create Many_Right with Right_Identifier = 1 & Right_Data = 1
   secondMR = create Many_Right with Right_Identifier = 2 & Right_Data = 2
   thirdMR  = create Many_Right with Right_Identifier = 3 & Right_Data = 3
   fourthMR = create Many_Right with Right_Identifier = 4 & Right_Data = 4
   fifthMR  = create Many_Right with Right_Identifier = 5 & Right_Data = 5

   firstMA  = create Many_Above with Above_Data = 1
   secondMA = create Many_Above with Above_Data = 2
   thirdMA  = create Many_Above with Above_Data = 3
   fourthMA = create Many_Above with Above_Data = 4
   fifthMA  = create Many_Above with Above_Data = 5

   firstMFR  = create Many_Far_Right with MFR_Identifier = 1 and MFR_Data = 1
   secondMFR = create Many_Far_Right with MFR_Identifier = 2 and MFR_Data = 2
   thirdMFR  = create Many_Far_Right with MFR_Identifier = 3 and MFR_Data = 3
   fourthMFR = create Many_Far_Right with MFR_Identifier = 4 and MFR_Data = 4
   fifthMFR  = create Many_Far_Right with MFR_Identifier = 5 and MFR_Data = 5

   firstMRA  = create Many_Right_Assoc with MRA_Data = 1 and MRA_Identifier = 1
   secondMRA = create Many_Right_Assoc with MRA_Data = 2 and MRA_Identifier = 2
   thirdMRA  = create Many_Right_Assoc with MRA_Data = 3 and MRA_Identifier = 3
   fourthMRA = create Many_Right_Assoc with MRA_Data = 4 and MRA_Identifier = 4
   fifthMRA  = create Many_Right_Assoc with MRA_Data = 5 and MRA_Identifier = 5

#-------------------------------------------------------------------#
# Link
#-------------------------------------------------------------------#

   link firstL  R6 firstM
   link secondL R6 thirdM

   link firstM  R7 firstMR
   link firstM  R7 thirdMR
   link thirdM  R7 fourthMR 

   link firstMR  R8 firstMFR using firstMRA
   link thirdMR  R8 firstMFR using secondMRA
   link thirdMR  R8 thirdMFR using thirdMRA
   link fourthMR R8 fourthMFR using fourthMRA

   link firstMR R10 firstMA
   link thirdMR R10 fourthMA
   link thirdMR R10 fifthMA
   link fourthMR R10 secondMA
#-------------------------------------------------------------------#
# Perform the navigation tests
#-------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1241-0000-01-0101", "Relationships", "objE", "Chained nav from set"]

   temp = 0
   Total = 0

   {SetMFR} = find-all Many_Far_Right

   {SetMR} = {SetMFR} -> R8.Many_Right

   {SetM} = {SetMFR} -> R8.Many_Right -> R7.Middle

   if countof {SetMR} = 4 then

      if countof {SetM} = 4 then

         for InstM in {SetM} do
            temp = InstM.Middle_Identifier
            Total = Total + temp 
         endfor

         if Total = 6 then
            [] = RPT2:Test_Passed["Chained nav from set", Test, 0]
         else
            [] = RPT3:Test_Failed["Chained nav from set", Test, Total]
         endif

      else
            [] = RPT3:Test_Failed["Chained nav from set", Test, -20]
      endif

   else
      [] = RPT3:Test_Failed["Chained nav from set", Test, -30]
   endif

   Test = Test + 1

#-------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1241-0000-01-0101", "Relationships", "objE", "Chained nav from set"]

   temp = 0
   Total = 0

   {SetMR} = firstM -> R7.Many_Right

   {SetMFR} = firstM -> R7.Many_Right -> R8.Many_Far_Right

   if countof {SetMR} = 2 then

      if countof {SetMFR} = 3 then

         for InstMFR in {SetMFR} do
            temp = InstMFR.MFR_Identifier
            Total = Total + temp 
         endfor

         if Total = 5 then
            [] = RPT2:Test_Passed["Chained nav from set", Test, 0]
         else
            [] = RPT3:Test_Failed["Chained nav from set", Test, Total]
         endif

      else
            [] = RPT3:Test_Failed["Chained nav from set", Test, -20]
      endif

   else
      [] = RPT3:Test_Failed["Chained nav from set", Test, -30]
   endif

   Test = Test + 1

#-------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1241-0000-01-0101", "Relationships", "objE", "Chained nav from set"]

   temp = 0
   Total = 0

   {SetMR} = firstM -> R7.Many_Right

   {SetMA} = firstM -> R7.Many_Right -> R10.Many_Above

   if countof {SetMR} = 2 then

      if countof {SetMA} = 3 then

         for InstMA in {SetMA} do
            temp = InstMA.Above_Data
            Total = Total + temp
         endfor

         if Total = 10 then
            [] = RPT2:Test_Passed["Chained nav from set", Test, 0]
         else
            [] = RPT3:Test_Failed["Chained nav from set", Test, Total]
         endif

      else
         [] = RPT3:Test_Failed["Chained nav from set", Test, -20]
      endif

   else
      [] = RPT3:Test_Failed["Chained nav from set", Test, -30]
   endif

   Test = Test + 1

#-------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1241-0000-01-0101", "Relationships", "objE", "Chained nav from set"]

   temp = 0
   Total = 0

   {SetM} = find Middle where Middle_Identifier = 1 or Middle_Identifier = 3

   {SetMR} = {SetM} -> R7.Many_Right

   {SetMA} = {SetM} -> R7.Many_Right -> R10.Many_Above

   if countof {SetMR} = 3 then

      if countof {SetMA} = 4 then

         for InstMA in {SetMA} do
            temp = InstMA.Above_Data
            Total = Total + temp
         endfor

         if Total = 12 then
            [] = RPT2:Test_Passed["Chained nav from set", Test, 0]
         else
            [] = RPT3:Test_Failed["Chained nav from set", Test, Total]
         endif

      else
         [] = RPT3:Test_Failed["Chained nav from set", Test, -20]
      endif

   else
      [] = RPT3:Test_Failed["Chained nav from set", Test, -30]
   endif

   Test = Test + 1

#-------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1241-0000-01-0101", "Relationships", "objE", "Chained nav from set"]

   temp = 0
   Total = 0

   {SetMA} = find-all Many_Above
  
   {SetMR} = {SetMA} -> R10.Many_Right

   {SetM} = {SetMA} -> R10.Many_Right -> R7.Middle

   if countof {SetMR} = 4 then

      if countof {SetM} = 4 then

         for InstM in {SetM} do
            temp = InstM.Middle_Identifier
            Total = Total + temp
         endfor

         if Total = 6 then
            [] = RPT2:Test_Passed["Chained nav from set", Test, 0]
         else
            [] = RPT3:Test_Failed["Chained nav from set", Test, Total]
         endif

      else
         [] = RPT3:Test_Failed["Chained nav from set", Test, -20]
      endif

   else
      [] = RPT3:Test_Failed["Chained nav from set", Test, -30]
   endif

   Test = Test + 1

   unassociate firstMR  R8 firstMFR  from firstMRA
   unassociate thirdMR  R8 firstMFR  from secondMRA
   unassociate thirdMR  R8 thirdMFR  from thirdMRA
   unassociate fourthMR R8 fourthMFR from fourthMRA

   unlink firstL  R6 firstM
   unlink secondL R6 thirdM

   unlink firstM  R7 firstMR
   unlink firstM  R7 thirdMR
   unlink thirdM  R7 fourthMR

   unlink firstMR  R8 firstMFR
   unlink thirdMR  R8 firstMFR
   unlink thirdMR  R8 thirdMFR
   unlink fourthMR R8 fourthMFR

   unlink firstMR  R10 firstMA
   unlink thirdMR  R10 fourthMA
   unlink thirdMR  R10 fifthMA
   unlink fourthMR R10 secondMA

   delete firstL 
   delete secondL
   delete thirdL 
   delete fourthL
   delete fifthL 

   delete firstM 
   delete secondM
   delete thirdM 
   delete fourthM
   delete fifthM 

   delete firstMR  
   delete secondMR 
   delete thirdMR  
   delete fourthMR 
   delete fifthMR  

   delete firstMA  
   delete secondMA 
   delete thirdMA  
   delete fourthMA 
   delete fifthMA  

   delete firstMFR  
   delete secondMFR 
   delete thirdMFR  
   delete fourthMFR 
   delete fifthMFR  

my_test.The_Test_Number = Test
',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,7 );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000280","00000000-0000-0000-0000-00000000027d",'Input_Instance_Value',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000282","00000000-0000-0000-0000-00000000027d",'Input_Expected_Value',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000280",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000284","00000000-0000-0000-0000-00000000027d",'Free_Text',"ba5eda7a-def5-0000-0000-000000000004",0,'',"00000000-0000-0000-0000-000000000282",'' );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-0000000002e2",1,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-0000000002f7",3,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-00000000030c",5,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-000000000331",11,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-000000000346",13,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-00000000035b",18,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-000000000370",19,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-000000000395",20,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-0000000003aa",21,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-0000000003bf",22,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-0000000003d4",2,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-0000000003e9",4,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-0000000003fe",6,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-000000000413",7,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-000000000428",8,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-00000000044d",10,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-000000000462",12,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-000000000477",14,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-00000000049c",15,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-0000000004c1",16,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-0000000004d6",17,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-0000000004eb",23,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-000000000500",32,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-000000000515",9,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-000000000533",26,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-00000000055a",27,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-00000000058a",29,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-0000000005b1",30,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-0000000005cf",31,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-0000000005ed",28,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000029","00000000-0000-0000-0000-0000000002e2","00000000-0000-0000-0000-0000000002e6","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000034","00000000-0000-0000-0000-0000000002e2","00000000-0000-0000-0000-0000000002ef","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-0000000002f7","00000000-0000-0000-0000-0000000002fb","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-0000000002f7","00000000-0000-0000-0000-000000000304","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-00000000006b","00000000-0000-0000-0000-00000000030c","00000000-0000-0000-0000-000000000310","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000060","00000000-0000-0000-0000-00000000030c","00000000-0000-0000-0000-000000000319","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000076","00000000-0000-0000-0000-00000000030c","00000000-0000-0000-0000-00000000032c","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-000000000331","00000000-0000-0000-0000-000000000335","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-000000000331","00000000-0000-0000-0000-00000000033e","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-000000000346","00000000-0000-0000-0000-00000000034a","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-000000000346","00000000-0000-0000-0000-000000000353","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000034","00000000-0000-0000-0000-00000000035b","00000000-0000-0000-0000-00000000035f","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000131","00000000-0000-0000-0000-00000000035b","00000000-0000-0000-0000-000000000368","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-000000000370","00000000-0000-0000-0000-000000000374","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000147","00000000-0000-0000-0000-000000000370","00000000-0000-0000-0000-00000000037d","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000152","00000000-0000-0000-0000-000000000370","00000000-0000-0000-0000-000000000390","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-00000000015d","00000000-0000-0000-0000-000000000395","00000000-0000-0000-0000-000000000399","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000168","00000000-0000-0000-0000-000000000395","00000000-0000-0000-0000-0000000003a2","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000168","00000000-0000-0000-0000-0000000003aa","00000000-0000-0000-0000-0000000003ae","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000173","00000000-0000-0000-0000-0000000003aa","00000000-0000-0000-0000-0000000003b7","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-00000000015d","00000000-0000-0000-0000-0000000003bf","00000000-0000-0000-0000-0000000003c3","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000173","00000000-0000-0000-0000-0000000003bf","00000000-0000-0000-0000-0000000003cc","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-0000000003d4","00000000-0000-0000-0000-0000000003d8","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-0000000003d4","00000000-0000-0000-0000-0000000003e1","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-0000000003e9","00000000-0000-0000-0000-0000000003ed","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-0000000003e9","00000000-0000-0000-0000-0000000003f6","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000081","00000000-0000-0000-0000-0000000003fe","00000000-0000-0000-0000-000000000402","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-00000000008c","00000000-0000-0000-0000-0000000003fe","00000000-0000-0000-0000-00000000040b","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-00000000008c","00000000-0000-0000-0000-000000000413","00000000-0000-0000-0000-000000000417","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-0000000000ad","00000000-0000-0000-0000-000000000413","00000000-0000-0000-0000-000000000420","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-0000000000ad","00000000-0000-0000-0000-000000000428","00000000-0000-0000-0000-00000000042c","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-0000000000c3","00000000-0000-0000-0000-000000000428","00000000-0000-0000-0000-000000000435","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-0000000000ce","00000000-0000-0000-0000-000000000428","00000000-0000-0000-0000-000000000448","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-0000000000ad","00000000-0000-0000-0000-00000000044d","00000000-0000-0000-0000-000000000451","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-0000000000e4","00000000-0000-0000-0000-00000000044d","00000000-0000-0000-0000-00000000045a","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-0000000000ef","00000000-0000-0000-0000-000000000462","00000000-0000-0000-0000-000000000466","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000105","00000000-0000-0000-0000-000000000462","00000000-0000-0000-0000-00000000046f","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000105","00000000-0000-0000-0000-000000000477","00000000-0000-0000-0000-00000000047b","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-0000000000fa","00000000-0000-0000-0000-000000000477","00000000-0000-0000-0000-000000000484","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000110","00000000-0000-0000-0000-000000000477","00000000-0000-0000-0000-000000000497","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-00000000011b","00000000-0000-0000-0000-00000000049c","00000000-0000-0000-0000-0000000004a0","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-00000000013c","00000000-0000-0000-0000-00000000049c","00000000-0000-0000-0000-0000000004a9","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-00000000017e","00000000-0000-0000-0000-00000000049c","00000000-0000-0000-0000-0000000004bc","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-00000000017e","00000000-0000-0000-0000-0000000004c1","00000000-0000-0000-0000-0000000004c5","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000189","00000000-0000-0000-0000-0000000004c1","00000000-0000-0000-0000-0000000004ce","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000194","00000000-0000-0000-0000-0000000004d6","00000000-0000-0000-0000-0000000004da","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000194","00000000-0000-0000-0000-0000000004d6","00000000-0000-0000-0000-0000000004e3","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000194","00000000-0000-0000-0000-0000000004eb","00000000-0000-0000-0000-0000000004ef","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000194","00000000-0000-0000-0000-0000000004eb","00000000-0000-0000-0000-0000000004f8","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-00000000024f","00000000-0000-0000-0000-000000000500","00000000-0000-0000-0000-000000000504","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-00000000020d","00000000-0000-0000-0000-000000000500","00000000-0000-0000-0000-00000000050d","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000515","00000000-0000-0000-0000-000000000519","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000126","00000000-0000-0000-0000-000000000515","00000000-0000-0000-0000-000000000522","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-0000000000a2","00000000-0000-0000-0000-000000000515","00000000-0000-0000-0000-00000000052b","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000126","00000000-0000-0000-0000-000000000533","00000000-0000-0000-0000-000000000537","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-00000000019f","00000000-0000-0000-0000-000000000533","00000000-0000-0000-0000-000000000540","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-0000000001aa","00000000-0000-0000-0000-000000000533","00000000-0000-0000-0000-000000000549","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-0000000001b5","00000000-0000-0000-0000-000000000533","00000000-0000-0000-0000-000000000552","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-0000000001b5","00000000-0000-0000-0000-00000000055a","00000000-0000-0000-0000-00000000055e","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-0000000001cb","00000000-0000-0000-0000-00000000055a","00000000-0000-0000-0000-000000000567","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-0000000001d6","00000000-0000-0000-0000-00000000055a","00000000-0000-0000-0000-000000000570","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-0000000001c0","00000000-0000-0000-0000-00000000055a","00000000-0000-0000-0000-000000000579","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-0000000001e1","00000000-0000-0000-0000-00000000055a","00000000-0000-0000-0000-000000000582","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-0000000001b5","00000000-0000-0000-0000-00000000058a","00000000-0000-0000-0000-00000000058e","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-00000000020d","00000000-0000-0000-0000-00000000058a","00000000-0000-0000-0000-000000000597","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000218","00000000-0000-0000-0000-00000000058a","00000000-0000-0000-0000-0000000005a0","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000202","00000000-0000-0000-0000-00000000058a","00000000-0000-0000-0000-0000000005a9","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-0000000001b5","00000000-0000-0000-0000-0000000005b1","00000000-0000-0000-0000-0000000005b5","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-00000000022e","00000000-0000-0000-0000-0000000005b1","00000000-0000-0000-0000-0000000005be","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000223","00000000-0000-0000-0000-0000000005b1","00000000-0000-0000-0000-0000000005c7","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-0000000001b5","00000000-0000-0000-0000-0000000005cf","00000000-0000-0000-0000-0000000005d3","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000239","00000000-0000-0000-0000-0000000005cf","00000000-0000-0000-0000-0000000005dc","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000244","00000000-0000-0000-0000-0000000005cf","00000000-0000-0000-0000-0000000005e5","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-0000000001cb","00000000-0000-0000-0000-0000000005ed","00000000-0000-0000-0000-0000000005f1","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-0000000001ec","00000000-0000-0000-0000-0000000005ed","00000000-0000-0000-0000-0000000005fa","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-0000000001f7","00000000-0000-0000-0000-0000000005ed","00000000-0000-0000-0000-000000000603","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-000000000029","00000000-0000-0000-0000-0000000002e2","00000000-0000-0000-0000-0000000002e6",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-0000000002f7","00000000-0000-0000-0000-000000000304",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-00000000006b","00000000-0000-0000-0000-00000000030c","00000000-0000-0000-0000-000000000310",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-000000000060","00000000-0000-0000-0000-00000000030c","00000000-0000-0000-0000-000000000319",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-000000000331","00000000-0000-0000-0000-00000000033e",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-000000000346","00000000-0000-0000-0000-00000000034a",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-000000000131","00000000-0000-0000-0000-00000000035b","00000000-0000-0000-0000-000000000368",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-000000000370","00000000-0000-0000-0000-000000000374",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-000000000147","00000000-0000-0000-0000-000000000370","00000000-0000-0000-0000-00000000037d",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-00000000015d","00000000-0000-0000-0000-000000000395","00000000-0000-0000-0000-000000000399",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-000000000173","00000000-0000-0000-0000-0000000003aa","00000000-0000-0000-0000-0000000003b7",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-00000000015d","00000000-0000-0000-0000-0000000003bf","00000000-0000-0000-0000-0000000003c3",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-000000000173","00000000-0000-0000-0000-0000000003bf","00000000-0000-0000-0000-0000000003cc",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-0000000003d4","00000000-0000-0000-0000-0000000003e1",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-0000000003e9","00000000-0000-0000-0000-0000000003f6",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-00000000008c","00000000-0000-0000-0000-0000000003fe","00000000-0000-0000-0000-00000000040b",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-00000000008c","00000000-0000-0000-0000-000000000413","00000000-0000-0000-0000-000000000417",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-0000000000ad","00000000-0000-0000-0000-000000000428","00000000-0000-0000-0000-00000000042c",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-0000000000c3","00000000-0000-0000-0000-000000000428","00000000-0000-0000-0000-000000000435",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-0000000000ad","00000000-0000-0000-0000-00000000044d","00000000-0000-0000-0000-000000000451",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-0000000000ef","00000000-0000-0000-0000-000000000462","00000000-0000-0000-0000-000000000466",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-000000000105","00000000-0000-0000-0000-000000000477","00000000-0000-0000-0000-00000000047b",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-0000000000fa","00000000-0000-0000-0000-000000000477","00000000-0000-0000-0000-000000000484",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-00000000011b","00000000-0000-0000-0000-00000000049c","00000000-0000-0000-0000-0000000004a0",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-00000000013c","00000000-0000-0000-0000-00000000049c","00000000-0000-0000-0000-0000000004a9",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-00000000017e","00000000-0000-0000-0000-0000000004c1","00000000-0000-0000-0000-0000000004c5",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-000000000194","00000000-0000-0000-0000-0000000004d6","00000000-0000-0000-0000-0000000004da",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-000000000194","00000000-0000-0000-0000-0000000004eb","00000000-0000-0000-0000-0000000004ef",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-00000000020d","00000000-0000-0000-0000-000000000500","00000000-0000-0000-0000-00000000050d",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000515","00000000-0000-0000-0000-000000000519",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-000000000126","00000000-0000-0000-0000-000000000533","00000000-0000-0000-0000-000000000537",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-0000000001b5","00000000-0000-0000-0000-00000000055a","00000000-0000-0000-0000-00000000055e",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-0000000001b5","00000000-0000-0000-0000-00000000058a","00000000-0000-0000-0000-00000000058e",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-0000000001b5","00000000-0000-0000-0000-0000000005b1","00000000-0000-0000-0000-0000000005b5",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-0000000001b5","00000000-0000-0000-0000-0000000005cf","00000000-0000-0000-0000-0000000005d3",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-0000000001cb","00000000-0000-0000-0000-0000000005ed","00000000-0000-0000-0000-0000000005f1",0 );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-000000000076","00000000-0000-0000-0000-00000000030c","00000000-0000-0000-0000-00000000032c" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-000000000152","00000000-0000-0000-0000-000000000370","00000000-0000-0000-0000-000000000390" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-0000000000ce","00000000-0000-0000-0000-000000000428","00000000-0000-0000-0000-000000000448" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-000000000110","00000000-0000-0000-0000-000000000477","00000000-0000-0000-0000-000000000497" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-00000000017e","00000000-0000-0000-0000-00000000049c","00000000-0000-0000-0000-0000000004bc" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-000000000126","00000000-0000-0000-0000-000000000515","00000000-0000-0000-0000-000000000522" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-0000000000a2","00000000-0000-0000-0000-000000000515","00000000-0000-0000-0000-00000000052b" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-00000000019f","00000000-0000-0000-0000-000000000533","00000000-0000-0000-0000-000000000540" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-0000000001aa","00000000-0000-0000-0000-000000000533","00000000-0000-0000-0000-000000000549" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-0000000001b5","00000000-0000-0000-0000-000000000533","00000000-0000-0000-0000-000000000552" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-0000000001cb","00000000-0000-0000-0000-00000000055a","00000000-0000-0000-0000-000000000567" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-0000000001d6","00000000-0000-0000-0000-00000000055a","00000000-0000-0000-0000-000000000570" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-0000000001c0","00000000-0000-0000-0000-00000000055a","00000000-0000-0000-0000-000000000579" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-0000000001e1","00000000-0000-0000-0000-00000000055a","00000000-0000-0000-0000-000000000582" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-00000000020d","00000000-0000-0000-0000-00000000058a","00000000-0000-0000-0000-000000000597" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-000000000218","00000000-0000-0000-0000-00000000058a","00000000-0000-0000-0000-0000000005a0" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-000000000202","00000000-0000-0000-0000-00000000058a","00000000-0000-0000-0000-0000000005a9" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-00000000022e","00000000-0000-0000-0000-0000000005b1","00000000-0000-0000-0000-0000000005be" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-000000000223","00000000-0000-0000-0000-0000000005b1","00000000-0000-0000-0000-0000000005c7" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-000000000239","00000000-0000-0000-0000-0000000005cf","00000000-0000-0000-0000-0000000005dc" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-000000000244","00000000-0000-0000-0000-0000000005cf","00000000-0000-0000-0000-0000000005e5" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-0000000001ec","00000000-0000-0000-0000-0000000005ed","00000000-0000-0000-0000-0000000005fa" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-0000000001f7","00000000-0000-0000-0000-0000000005ed","00000000-0000-0000-0000-000000000603" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-000000000194","00000000-0000-0000-0000-0000000004eb","00000000-0000-0000-0000-0000000004f8" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-000000000194","00000000-0000-0000-0000-0000000004d6","00000000-0000-0000-0000-0000000004e3" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-000000000168","00000000-0000-0000-0000-0000000003aa","00000000-0000-0000-0000-0000000003ae" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-000000000168","00000000-0000-0000-0000-000000000395","00000000-0000-0000-0000-0000000003a2" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-000000000105","00000000-0000-0000-0000-000000000462","00000000-0000-0000-0000-00000000046f" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-0000000000e4","00000000-0000-0000-0000-00000000044d","00000000-0000-0000-0000-00000000045a" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-000000000331","00000000-0000-0000-0000-000000000335" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-000000000346","00000000-0000-0000-0000-000000000353" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-0000000003d4","00000000-0000-0000-0000-0000000003d8" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-0000000003e9","00000000-0000-0000-0000-0000000003ed" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-0000000000ad","00000000-0000-0000-0000-000000000413","00000000-0000-0000-0000-000000000420" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-000000000081","00000000-0000-0000-0000-0000000003fe","00000000-0000-0000-0000-000000000402" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-0000000002f7","00000000-0000-0000-0000-0000000002fb" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-000000000034","00000000-0000-0000-0000-00000000035b","00000000-0000-0000-0000-00000000035f" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-000000000034","00000000-0000-0000-0000-0000000002e2","00000000-0000-0000-0000-0000000002ef" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-00000000024f","00000000-0000-0000-0000-000000000500","00000000-0000-0000-0000-000000000504" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-000000000189","00000000-0000-0000-0000-0000000004c1","00000000-0000-0000-0000-0000000004ce" );
INSERT INTO R_SIMP VALUES ( "00000000-0000-0000-0000-0000000002e2" );
INSERT INTO R_SIMP VALUES ( "00000000-0000-0000-0000-0000000002f7" );
INSERT INTO R_SIMP VALUES ( "00000000-0000-0000-0000-000000000331" );
INSERT INTO R_SIMP VALUES ( "00000000-0000-0000-0000-000000000346" );
INSERT INTO R_SIMP VALUES ( "00000000-0000-0000-0000-00000000035b" );
INSERT INTO R_SIMP VALUES ( "00000000-0000-0000-0000-000000000395" );
INSERT INTO R_SIMP VALUES ( "00000000-0000-0000-0000-0000000003aa" );
INSERT INTO R_SIMP VALUES ( "00000000-0000-0000-0000-0000000003bf" );
INSERT INTO R_SIMP VALUES ( "00000000-0000-0000-0000-0000000003d4" );
INSERT INTO R_SIMP VALUES ( "00000000-0000-0000-0000-0000000003e9" );
INSERT INTO R_SIMP VALUES ( "00000000-0000-0000-0000-0000000003fe" );
INSERT INTO R_SIMP VALUES ( "00000000-0000-0000-0000-000000000413" );
INSERT INTO R_SIMP VALUES ( "00000000-0000-0000-0000-00000000044d" );
INSERT INTO R_SIMP VALUES ( "00000000-0000-0000-0000-000000000462" );
INSERT INTO R_SIMP VALUES ( "00000000-0000-0000-0000-0000000004c1" );
INSERT INTO R_SIMP VALUES ( "00000000-0000-0000-0000-0000000004d6" );
INSERT INTO R_SIMP VALUES ( "00000000-0000-0000-0000-0000000004eb" );
INSERT INTO R_SIMP VALUES ( "00000000-0000-0000-0000-000000000500" );
INSERT INTO R_PART VALUES ( "00000000-0000-0000-0000-000000000029","00000000-0000-0000-0000-0000000002e2","00000000-0000-0000-0000-0000000002e6",0,1,'May_have_a' );
INSERT INTO R_PART VALUES ( "00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-0000000002f7","00000000-0000-0000-0000-000000000304",0,1,'Has_a' );
INSERT INTO R_PART VALUES ( "00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-000000000331","00000000-0000-0000-0000-00000000033e",0,1,'Has_a' );
INSERT INTO R_PART VALUES ( "00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-000000000346","00000000-0000-0000-0000-00000000034a",0,1,'Has_a' );
INSERT INTO R_PART VALUES ( "00000000-0000-0000-0000-000000000131","00000000-0000-0000-0000-00000000035b","00000000-0000-0000-0000-000000000368",0,1,'Has_a' );
INSERT INTO R_PART VALUES ( "00000000-0000-0000-0000-00000000015d","00000000-0000-0000-0000-000000000395","00000000-0000-0000-0000-000000000399",0,1,'Has_a' );
INSERT INTO R_PART VALUES ( "00000000-0000-0000-0000-000000000173","00000000-0000-0000-0000-0000000003aa","00000000-0000-0000-0000-0000000003b7",0,1,'Has_a' );
INSERT INTO R_PART VALUES ( "00000000-0000-0000-0000-00000000015d","00000000-0000-0000-0000-0000000003bf","00000000-0000-0000-0000-0000000003c3",0,1,'Has_a' );
INSERT INTO R_PART VALUES ( "00000000-0000-0000-0000-000000000173","00000000-0000-0000-0000-0000000003bf","00000000-0000-0000-0000-0000000003cc",1,1,'Has_many' );
INSERT INTO R_PART VALUES ( "00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-0000000003d4","00000000-0000-0000-0000-0000000003e1",0,1,'A_Large_relationship_role' );
INSERT INTO R_PART VALUES ( "00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-0000000003e9","00000000-0000-0000-0000-0000000003f6",0,1,'Has_a' );
INSERT INTO R_PART VALUES ( "00000000-0000-0000-0000-00000000008c","00000000-0000-0000-0000-0000000003fe","00000000-0000-0000-0000-00000000040b",0,0,'has' );
INSERT INTO R_PART VALUES ( "00000000-0000-0000-0000-00000000008c","00000000-0000-0000-0000-000000000413","00000000-0000-0000-0000-000000000417",0,0,'has' );
INSERT INTO R_PART VALUES ( "00000000-0000-0000-0000-0000000000ad","00000000-0000-0000-0000-00000000044d","00000000-0000-0000-0000-000000000451",0,0,'has' );
INSERT INTO R_PART VALUES ( "00000000-0000-0000-0000-0000000000ef","00000000-0000-0000-0000-000000000462","00000000-0000-0000-0000-000000000466",0,0,'has' );
INSERT INTO R_PART VALUES ( "00000000-0000-0000-0000-00000000017e","00000000-0000-0000-0000-0000000004c1","00000000-0000-0000-0000-0000000004c5",0,0,'has' );
INSERT INTO R_PART VALUES ( "00000000-0000-0000-0000-000000000194","00000000-0000-0000-0000-0000000004d6","00000000-0000-0000-0000-0000000004da",0,0,'has' );
INSERT INTO R_PART VALUES ( "00000000-0000-0000-0000-000000000194","00000000-0000-0000-0000-0000000004eb","00000000-0000-0000-0000-0000000004ef",0,0,'has' );
INSERT INTO R_PART VALUES ( "00000000-0000-0000-0000-00000000020d","00000000-0000-0000-0000-000000000500","00000000-0000-0000-0000-00000000050d",0,0,'has' );
INSERT INTO R_FORM VALUES ( "00000000-0000-0000-0000-000000000194","00000000-0000-0000-0000-0000000004eb","00000000-0000-0000-0000-0000000004f8",0,0,'has' );
INSERT INTO R_FORM VALUES ( "00000000-0000-0000-0000-000000000194","00000000-0000-0000-0000-0000000004d6","00000000-0000-0000-0000-0000000004e3",0,0,'has' );
INSERT INTO R_FORM VALUES ( "00000000-0000-0000-0000-000000000168","00000000-0000-0000-0000-0000000003aa","00000000-0000-0000-0000-0000000003ae",1,1,'Has_many' );
INSERT INTO R_FORM VALUES ( "00000000-0000-0000-0000-000000000168","00000000-0000-0000-0000-000000000395","00000000-0000-0000-0000-0000000003a2",1,1,'Has_many' );
INSERT INTO R_FORM VALUES ( "00000000-0000-0000-0000-000000000105","00000000-0000-0000-0000-000000000462","00000000-0000-0000-0000-00000000046f",1,0,'has' );
INSERT INTO R_FORM VALUES ( "00000000-0000-0000-0000-0000000000e4","00000000-0000-0000-0000-00000000044d","00000000-0000-0000-0000-00000000045a",1,0,'has' );
INSERT INTO R_FORM VALUES ( "00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-000000000331","00000000-0000-0000-0000-000000000335",0,1,'May_have' );
INSERT INTO R_FORM VALUES ( "00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-000000000346","00000000-0000-0000-0000-000000000353",1,1,'Has_many' );
INSERT INTO R_FORM VALUES ( "00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-0000000003d4","00000000-0000-0000-0000-0000000003d8",0,1,'qwertyuiopasdfghjklzxcvbnmqwerty' );
INSERT INTO R_FORM VALUES ( "00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-0000000003e9","00000000-0000-0000-0000-0000000003ed",1,1,'Has_many' );
INSERT INTO R_FORM VALUES ( "00000000-0000-0000-0000-0000000000ad","00000000-0000-0000-0000-000000000413","00000000-0000-0000-0000-000000000420",1,0,'has' );
INSERT INTO R_FORM VALUES ( "00000000-0000-0000-0000-000000000081","00000000-0000-0000-0000-0000000003fe","00000000-0000-0000-0000-000000000402",0,0,'has' );
INSERT INTO R_FORM VALUES ( "00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-0000000002f7","00000000-0000-0000-0000-0000000002fb",1,1,'Has_many' );
INSERT INTO R_FORM VALUES ( "00000000-0000-0000-0000-000000000034","00000000-0000-0000-0000-00000000035b","00000000-0000-0000-0000-00000000035f",0,1,'Has_one' );
INSERT INTO R_FORM VALUES ( "00000000-0000-0000-0000-000000000034","00000000-0000-0000-0000-0000000002e2","00000000-0000-0000-0000-0000000002ef",0,1,'Has_a' );
INSERT INTO R_FORM VALUES ( "00000000-0000-0000-0000-00000000024f","00000000-0000-0000-0000-000000000500","00000000-0000-0000-0000-000000000504",1,0,'has' );
INSERT INTO R_FORM VALUES ( "00000000-0000-0000-0000-000000000189","00000000-0000-0000-0000-0000000004c1","00000000-0000-0000-0000-0000000004ce",1,0,'has' );
INSERT INTO R_ASSOC VALUES ( "00000000-0000-0000-0000-00000000030c" );
INSERT INTO R_ASSOC VALUES ( "00000000-0000-0000-0000-000000000370" );
INSERT INTO R_ASSOC VALUES ( "00000000-0000-0000-0000-000000000428" );
INSERT INTO R_ASSOC VALUES ( "00000000-0000-0000-0000-000000000477" );
INSERT INTO R_ASSOC VALUES ( "00000000-0000-0000-0000-00000000049c" );
INSERT INTO R_AONE VALUES ( "00000000-0000-0000-0000-00000000006b","00000000-0000-0000-0000-00000000030c","00000000-0000-0000-0000-000000000310",1,1,'Has_many' );
INSERT INTO R_AONE VALUES ( "00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-000000000370","00000000-0000-0000-0000-000000000374",0,1,'Has_a' );
INSERT INTO R_AONE VALUES ( "00000000-0000-0000-0000-0000000000ad","00000000-0000-0000-0000-000000000428","00000000-0000-0000-0000-00000000042c",1,0,'has' );
INSERT INTO R_AONE VALUES ( "00000000-0000-0000-0000-000000000105","00000000-0000-0000-0000-000000000477","00000000-0000-0000-0000-00000000047b",1,0,'has' );
INSERT INTO R_AONE VALUES ( "00000000-0000-0000-0000-00000000011b","00000000-0000-0000-0000-00000000049c","00000000-0000-0000-0000-0000000004a0",1,0,'has' );
INSERT INTO R_AOTH VALUES ( "00000000-0000-0000-0000-000000000060","00000000-0000-0000-0000-00000000030c","00000000-0000-0000-0000-000000000319",1,1,'Has_lots' );
INSERT INTO R_AOTH VALUES ( "00000000-0000-0000-0000-000000000147","00000000-0000-0000-0000-000000000370","00000000-0000-0000-0000-00000000037d",1,1,'Has_Many' );
INSERT INTO R_AOTH VALUES ( "00000000-0000-0000-0000-0000000000c3","00000000-0000-0000-0000-000000000428","00000000-0000-0000-0000-000000000435",1,0,'has' );
INSERT INTO R_AOTH VALUES ( "00000000-0000-0000-0000-0000000000fa","00000000-0000-0000-0000-000000000477","00000000-0000-0000-0000-000000000484",0,0,'has' );
INSERT INTO R_AOTH VALUES ( "00000000-0000-0000-0000-00000000013c","00000000-0000-0000-0000-00000000049c","00000000-0000-0000-0000-0000000004a9",1,0,'has' );
INSERT INTO R_ASSR VALUES ( "00000000-0000-0000-0000-000000000076","00000000-0000-0000-0000-00000000030c","00000000-0000-0000-0000-00000000032c",0 );
INSERT INTO R_ASSR VALUES ( "00000000-0000-0000-0000-000000000152","00000000-0000-0000-0000-000000000370","00000000-0000-0000-0000-000000000390",0 );
INSERT INTO R_ASSR VALUES ( "00000000-0000-0000-0000-0000000000ce","00000000-0000-0000-0000-000000000428","00000000-0000-0000-0000-000000000448",0 );
INSERT INTO R_ASSR VALUES ( "00000000-0000-0000-0000-000000000110","00000000-0000-0000-0000-000000000477","00000000-0000-0000-0000-000000000497",0 );
INSERT INTO R_ASSR VALUES ( "00000000-0000-0000-0000-00000000017e","00000000-0000-0000-0000-00000000049c","00000000-0000-0000-0000-0000000004bc",0 );
INSERT INTO R_SUBSUP VALUES ( "00000000-0000-0000-0000-000000000515" );
INSERT INTO R_SUBSUP VALUES ( "00000000-0000-0000-0000-000000000533" );
INSERT INTO R_SUBSUP VALUES ( "00000000-0000-0000-0000-00000000055a" );
INSERT INTO R_SUBSUP VALUES ( "00000000-0000-0000-0000-00000000058a" );
INSERT INTO R_SUBSUP VALUES ( "00000000-0000-0000-0000-0000000005b1" );
INSERT INTO R_SUBSUP VALUES ( "00000000-0000-0000-0000-0000000005cf" );
INSERT INTO R_SUBSUP VALUES ( "00000000-0000-0000-0000-0000000005ed" );
INSERT INTO R_SUPER VALUES ( "00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000515","00000000-0000-0000-0000-000000000519" );
INSERT INTO R_SUPER VALUES ( "00000000-0000-0000-0000-000000000126","00000000-0000-0000-0000-000000000533","00000000-0000-0000-0000-000000000537" );
INSERT INTO R_SUPER VALUES ( "00000000-0000-0000-0000-0000000001b5","00000000-0000-0000-0000-00000000055a","00000000-0000-0000-0000-00000000055e" );
INSERT INTO R_SUPER VALUES ( "00000000-0000-0000-0000-0000000001b5","00000000-0000-0000-0000-00000000058a","00000000-0000-0000-0000-00000000058e" );
INSERT INTO R_SUPER VALUES ( "00000000-0000-0000-0000-0000000001b5","00000000-0000-0000-0000-0000000005b1","00000000-0000-0000-0000-0000000005b5" );
INSERT INTO R_SUPER VALUES ( "00000000-0000-0000-0000-0000000001b5","00000000-0000-0000-0000-0000000005cf","00000000-0000-0000-0000-0000000005d3" );
INSERT INTO R_SUPER VALUES ( "00000000-0000-0000-0000-0000000001cb","00000000-0000-0000-0000-0000000005ed","00000000-0000-0000-0000-0000000005f1" );
INSERT INTO R_SUB VALUES ( "00000000-0000-0000-0000-000000000126","00000000-0000-0000-0000-000000000515","00000000-0000-0000-0000-000000000522" );
INSERT INTO R_SUB VALUES ( "00000000-0000-0000-0000-0000000000a2","00000000-0000-0000-0000-000000000515","00000000-0000-0000-0000-00000000052b" );
INSERT INTO R_SUB VALUES ( "00000000-0000-0000-0000-00000000019f","00000000-0000-0000-0000-000000000533","00000000-0000-0000-0000-000000000540" );
INSERT INTO R_SUB VALUES ( "00000000-0000-0000-0000-0000000001aa","00000000-0000-0000-0000-000000000533","00000000-0000-0000-0000-000000000549" );
INSERT INTO R_SUB VALUES ( "00000000-0000-0000-0000-0000000001b5","00000000-0000-0000-0000-000000000533","00000000-0000-0000-0000-000000000552" );
INSERT INTO R_SUB VALUES ( "00000000-0000-0000-0000-0000000001cb","00000000-0000-0000-0000-00000000055a","00000000-0000-0000-0000-000000000567" );
INSERT INTO R_SUB VALUES ( "00000000-0000-0000-0000-0000000001d6","00000000-0000-0000-0000-00000000055a","00000000-0000-0000-0000-000000000570" );
INSERT INTO R_SUB VALUES ( "00000000-0000-0000-0000-0000000001c0","00000000-0000-0000-0000-00000000055a","00000000-0000-0000-0000-000000000579" );
INSERT INTO R_SUB VALUES ( "00000000-0000-0000-0000-0000000001e1","00000000-0000-0000-0000-00000000055a","00000000-0000-0000-0000-000000000582" );
INSERT INTO R_SUB VALUES ( "00000000-0000-0000-0000-00000000020d","00000000-0000-0000-0000-00000000058a","00000000-0000-0000-0000-000000000597" );
INSERT INTO R_SUB VALUES ( "00000000-0000-0000-0000-000000000218","00000000-0000-0000-0000-00000000058a","00000000-0000-0000-0000-0000000005a0" );
INSERT INTO R_SUB VALUES ( "00000000-0000-0000-0000-000000000202","00000000-0000-0000-0000-00000000058a","00000000-0000-0000-0000-0000000005a9" );
INSERT INTO R_SUB VALUES ( "00000000-0000-0000-0000-00000000022e","00000000-0000-0000-0000-0000000005b1","00000000-0000-0000-0000-0000000005be" );
INSERT INTO R_SUB VALUES ( "00000000-0000-0000-0000-000000000223","00000000-0000-0000-0000-0000000005b1","00000000-0000-0000-0000-0000000005c7" );
INSERT INTO R_SUB VALUES ( "00000000-0000-0000-0000-000000000239","00000000-0000-0000-0000-0000000005cf","00000000-0000-0000-0000-0000000005dc" );
INSERT INTO R_SUB VALUES ( "00000000-0000-0000-0000-000000000244","00000000-0000-0000-0000-0000000005cf","00000000-0000-0000-0000-0000000005e5" );
INSERT INTO R_SUB VALUES ( "00000000-0000-0000-0000-0000000001ec","00000000-0000-0000-0000-0000000005ed","00000000-0000-0000-0000-0000000005fa" );
INSERT INTO R_SUB VALUES ( "00000000-0000-0000-0000-0000000001f7","00000000-0000-0000-0000-0000000005ed","00000000-0000-0000-0000-000000000603" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000002d",0,"00000000-0000-0000-0000-000000000029" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000030",1,"00000000-0000-0000-0000-000000000029" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000038",0,"00000000-0000-0000-0000-000000000034" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000003b",1,"00000000-0000-0000-0000-000000000034" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000043",0,"00000000-0000-0000-0000-00000000003f" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000046",1,"00000000-0000-0000-0000-00000000003f" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000004e",0,"00000000-0000-0000-0000-00000000004a" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000051",1,"00000000-0000-0000-0000-00000000004a" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000059",0,"00000000-0000-0000-0000-000000000055" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000005c",1,"00000000-0000-0000-0000-000000000055" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000064",0,"00000000-0000-0000-0000-000000000060" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000067",1,"00000000-0000-0000-0000-000000000060" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000006f",0,"00000000-0000-0000-0000-00000000006b" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000072",1,"00000000-0000-0000-0000-00000000006b" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000007a",0,"00000000-0000-0000-0000-000000000076" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000007d",1,"00000000-0000-0000-0000-000000000076" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000085",0,"00000000-0000-0000-0000-000000000081" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000088",1,"00000000-0000-0000-0000-000000000081" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000090",0,"00000000-0000-0000-0000-00000000008c" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000093",1,"00000000-0000-0000-0000-00000000008c" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000009b",0,"00000000-0000-0000-0000-000000000097" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000009e",1,"00000000-0000-0000-0000-000000000097" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000000a6",0,"00000000-0000-0000-0000-0000000000a2" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000000a9",1,"00000000-0000-0000-0000-0000000000a2" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000000b1",0,"00000000-0000-0000-0000-0000000000ad" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000000b4",1,"00000000-0000-0000-0000-0000000000ad" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000000bc",0,"00000000-0000-0000-0000-0000000000b8" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000000bf",1,"00000000-0000-0000-0000-0000000000b8" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000000c7",0,"00000000-0000-0000-0000-0000000000c3" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000000ca",1,"00000000-0000-0000-0000-0000000000c3" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000000d2",0,"00000000-0000-0000-0000-0000000000ce" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000000d5",1,"00000000-0000-0000-0000-0000000000ce" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000000dd",0,"00000000-0000-0000-0000-0000000000d9" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000000e0",1,"00000000-0000-0000-0000-0000000000d9" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000000e8",0,"00000000-0000-0000-0000-0000000000e4" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000000eb",1,"00000000-0000-0000-0000-0000000000e4" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000000f3",0,"00000000-0000-0000-0000-0000000000ef" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000000f6",1,"00000000-0000-0000-0000-0000000000ef" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000000fe",0,"00000000-0000-0000-0000-0000000000fa" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000101",1,"00000000-0000-0000-0000-0000000000fa" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000109",0,"00000000-0000-0000-0000-000000000105" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000010c",1,"00000000-0000-0000-0000-000000000105" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000114",0,"00000000-0000-0000-0000-000000000110" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000117",1,"00000000-0000-0000-0000-000000000110" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000011f",0,"00000000-0000-0000-0000-00000000011b" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000122",1,"00000000-0000-0000-0000-00000000011b" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000012a",0,"00000000-0000-0000-0000-000000000126" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000012d",1,"00000000-0000-0000-0000-000000000126" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000135",0,"00000000-0000-0000-0000-000000000131" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000138",1,"00000000-0000-0000-0000-000000000131" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000140",0,"00000000-0000-0000-0000-00000000013c" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000143",1,"00000000-0000-0000-0000-00000000013c" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000014b",0,"00000000-0000-0000-0000-000000000147" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000014e",1,"00000000-0000-0000-0000-000000000147" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000156",0,"00000000-0000-0000-0000-000000000152" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000159",1,"00000000-0000-0000-0000-000000000152" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000161",0,"00000000-0000-0000-0000-00000000015d" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000164",1,"00000000-0000-0000-0000-00000000015d" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000016c",0,"00000000-0000-0000-0000-000000000168" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000016f",1,"00000000-0000-0000-0000-000000000168" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000177",0,"00000000-0000-0000-0000-000000000173" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000017a",1,"00000000-0000-0000-0000-000000000173" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000182",0,"00000000-0000-0000-0000-00000000017e" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000185",1,"00000000-0000-0000-0000-00000000017e" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000018d",0,"00000000-0000-0000-0000-000000000189" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000190",1,"00000000-0000-0000-0000-000000000189" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000198",0,"00000000-0000-0000-0000-000000000194" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000019b",1,"00000000-0000-0000-0000-000000000194" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000001a3",0,"00000000-0000-0000-0000-00000000019f" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000001a6",1,"00000000-0000-0000-0000-00000000019f" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000001ae",0,"00000000-0000-0000-0000-0000000001aa" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000001b1",1,"00000000-0000-0000-0000-0000000001aa" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000001b9",0,"00000000-0000-0000-0000-0000000001b5" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000001bc",1,"00000000-0000-0000-0000-0000000001b5" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000001c4",0,"00000000-0000-0000-0000-0000000001c0" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000001c7",1,"00000000-0000-0000-0000-0000000001c0" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000001cf",0,"00000000-0000-0000-0000-0000000001cb" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000001d2",1,"00000000-0000-0000-0000-0000000001cb" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000001da",0,"00000000-0000-0000-0000-0000000001d6" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000001dd",1,"00000000-0000-0000-0000-0000000001d6" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000001e5",0,"00000000-0000-0000-0000-0000000001e1" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000001e8",1,"00000000-0000-0000-0000-0000000001e1" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000001f0",0,"00000000-0000-0000-0000-0000000001ec" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000001f3",1,"00000000-0000-0000-0000-0000000001ec" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000001fb",0,"00000000-0000-0000-0000-0000000001f7" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000001fe",1,"00000000-0000-0000-0000-0000000001f7" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000206",0,"00000000-0000-0000-0000-000000000202" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000209",1,"00000000-0000-0000-0000-000000000202" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000211",0,"00000000-0000-0000-0000-00000000020d" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000214",1,"00000000-0000-0000-0000-00000000020d" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000021c",0,"00000000-0000-0000-0000-000000000218" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000021f",1,"00000000-0000-0000-0000-000000000218" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000227",0,"00000000-0000-0000-0000-000000000223" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000022a",1,"00000000-0000-0000-0000-000000000223" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000232",0,"00000000-0000-0000-0000-00000000022e" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000235",1,"00000000-0000-0000-0000-00000000022e" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000023d",0,"00000000-0000-0000-0000-000000000239" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000240",1,"00000000-0000-0000-0000-000000000239" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000248",0,"00000000-0000-0000-0000-000000000244" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000024b",1,"00000000-0000-0000-0000-000000000244" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000253",0,"00000000-0000-0000-0000-00000000024f" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000256",1,"00000000-0000-0000-0000-00000000024f" );
INSERT INTO C_C VALUES ( "00000000-0000-0000-0000-000000000023","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000000",'Relationships',' Tests Relationship manipulations.
',0,"00000000-0000-0000-0000-000000000000",0,'','Relationships' );
INSERT INTO C_I VALUES ( "00000000-0000-0000-0000-00000000026a","00000000-0000-0000-0000-000000000000",'Relationships','' );
INSERT INTO C_I VALUES ( "00000000-0000-0000-0000-000000000287","00000000-0000-0000-0000-000000000000",'RelationshipsReport','' );
INSERT INTO C_I VALUES ( "00000000-0000-0000-0000-0000000002be","00000000-0000-0000-0000-000000000000",'RelationshipsWhere_Are_We','' );
INSERT INTO C_P VALUES ( "00000000-0000-0000-0000-00000000026c",'','Unnamed_Interface','','' );
INSERT INTO C_R VALUES ( "00000000-0000-0000-0000-000000000289",'','','Unnamed_Interface','' );
INSERT INTO C_R VALUES ( "00000000-0000-0000-0000-0000000002c0",'','','Unnamed_Interface','' );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-00000000026e","00000000-0000-0000-0000-00000000026a",0,'Create_Report_Data','',1 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000272","00000000-0000-0000-0000-00000000026a",0,'Delete_Report_Data','',2 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000276","00000000-0000-0000-0000-00000000026a",0,'Memory_Leak_Test_One_To_Many','',3 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-00000000027a","00000000-0000-0000-0000-00000000026a",0,'Memory_Leak_Test_Many_To_Many','',4 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-00000000027e","00000000-0000-0000-0000-00000000026a",0,'Get_Instance_State','',5 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-00000000028b","00000000-0000-0000-0000-000000000287",0,'Start_Test','',1 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000292","00000000-0000-0000-0000-000000000287",0,'Test_Passed','',2 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000297","00000000-0000-0000-0000-000000000287",0,'Test_Failed','',3 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-00000000029c","00000000-0000-0000-0000-000000000287",0,'Test_Unsupported','',4 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-00000000029f","00000000-0000-0000-0000-000000000287",0,'Test_Text','',5 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-0000000002a3","00000000-0000-0000-0000-000000000287",0,'Domain_Test_Start','',6 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-0000000002a6","00000000-0000-0000-0000-000000000287",0,'Domain_Test_Finished','',7 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-0000000002a9","00000000-0000-0000-0000-000000000287",0,'Specify_Requid','',8 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-0000000002c2","00000000-0000-0000-0000-0000000002be",0,'What_Env','',1 );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-00000000026e","ba5eda7a-def5-0000-0000-000000000000",'Create_Report_Data','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000272","ba5eda7a-def5-0000-0000-000000000000",'Delete_Report_Data','',0,'',"00000000-0000-0000-0000-00000000026e" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000276","ba5eda7a-def5-0000-0000-000000000000",'Memory_Leak_Test_One_To_Many','',0,'',"00000000-0000-0000-0000-000000000272" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-00000000027a","ba5eda7a-def5-0000-0000-000000000000",'Memory_Leak_Test_Many_To_Many','',0,'',"00000000-0000-0000-0000-000000000276" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-00000000027e","ba5eda7a-def5-0000-0000-000000000000",'Get_Instance_State','',0,'',"00000000-0000-0000-0000-00000000027a" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-00000000028b","ba5eda7a-def5-0000-0000-000000000000",'Start_Test','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000292","ba5eda7a-def5-0000-0000-000000000000",'Test_Passed','',0,'',"00000000-0000-0000-0000-00000000028b" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000297","ba5eda7a-def5-0000-0000-000000000000",'Test_Failed','',0,'',"00000000-0000-0000-0000-000000000292" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-00000000029c","ba5eda7a-def5-0000-0000-000000000000",'Test_Unsupported','',0,'',"00000000-0000-0000-0000-000000000297" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-00000000029f","ba5eda7a-def5-0000-0000-000000000000",'Test_Text','',0,'',"00000000-0000-0000-0000-00000000029c" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-0000000002a3","ba5eda7a-def5-0000-0000-000000000000",'Domain_Test_Start','',0,'',"00000000-0000-0000-0000-00000000029f" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-0000000002a6","ba5eda7a-def5-0000-0000-000000000000",'Domain_Test_Finished','',0,'',"00000000-0000-0000-0000-0000000002a3" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-0000000002a9","ba5eda7a-def5-0000-0000-000000000000",'Specify_Requid','',0,'',"00000000-0000-0000-0000-0000000002a6" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-0000000002c2","ba5eda7a-def5-0000-0000-000000000000",'What_Env','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000281","00000000-0000-0000-0000-00000000027e","ba5eda7a-def5-0000-0000-000000000002",'Input_Instance_Value','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000283","00000000-0000-0000-0000-00000000027e","ba5eda7a-def5-0000-0000-000000000002",'Input_Expected_Value','',0,'',"00000000-0000-0000-0000-000000000281" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000285","00000000-0000-0000-0000-00000000027e","ba5eda7a-def5-0000-0000-000000000004",'Free_Text','',0,'',"00000000-0000-0000-0000-000000000283" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000028d","00000000-0000-0000-0000-00000000028b","ba5eda7a-def5-0000-0000-000000000002",'Test_Number','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000028e","00000000-0000-0000-0000-00000000028b","ba5eda7a-def5-0000-0000-000000000004",'Requid','',0,'',"00000000-0000-0000-0000-00000000028d" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000028f","00000000-0000-0000-0000-00000000028b","ba5eda7a-def5-0000-0000-000000000004",'Invoking_Domain','',0,'',"00000000-0000-0000-0000-00000000028e" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000290","00000000-0000-0000-0000-00000000028b","ba5eda7a-def5-0000-0000-000000000004",'Invoking_Object','',0,'',"00000000-0000-0000-0000-00000000028f" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000291","00000000-0000-0000-0000-00000000028b","ba5eda7a-def5-0000-0000-000000000004",'Purpose','',0,'',"00000000-0000-0000-0000-000000000290" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000294","00000000-0000-0000-0000-000000000292","ba5eda7a-def5-0000-0000-000000000004",'Test_Object_Domain','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000295","00000000-0000-0000-0000-000000000292","ba5eda7a-def5-0000-0000-000000000002",'Test_Number','',0,'',"00000000-0000-0000-0000-000000000294" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000296","00000000-0000-0000-0000-000000000292","ba5eda7a-def5-0000-0000-000000000002",'Test_Value','',0,'',"00000000-0000-0000-0000-000000000295" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000299","00000000-0000-0000-0000-000000000297","ba5eda7a-def5-0000-0000-000000000004",'Failed_Domain_Object','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000029a","00000000-0000-0000-0000-000000000297","ba5eda7a-def5-0000-0000-000000000002",'Failed_Test_Number','',0,'',"00000000-0000-0000-0000-000000000299" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000029b","00000000-0000-0000-0000-000000000297","ba5eda7a-def5-0000-0000-000000000002",'Failed_Test_Value','',0,'',"00000000-0000-0000-0000-00000000029a" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000029e","00000000-0000-0000-0000-00000000029c","ba5eda7a-def5-0000-0000-000000000002",'Unsupported_Test_Number','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000002a1","00000000-0000-0000-0000-00000000029f","ba5eda7a-def5-0000-0000-000000000002",'Test_Number','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000002a2","00000000-0000-0000-0000-00000000029f","ba5eda7a-def5-0000-0000-000000000004",'Free_Text','',0,'',"00000000-0000-0000-0000-0000000002a1" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000002a5","00000000-0000-0000-0000-0000000002a3","ba5eda7a-def5-0000-0000-000000000004",'This_Domain_Name','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000002a8","00000000-0000-0000-0000-0000000002a6","ba5eda7a-def5-0000-0000-000000000004",'This_Domain_Name','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000002ab","00000000-0000-0000-0000-0000000002a9","ba5eda7a-def5-0000-0000-000000000002",'Requid_Test_Number','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000002ac","00000000-0000-0000-0000-0000000002a9","ba5eda7a-def5-0000-0000-000000000004",'The_Requid_Itself','',0,'',"00000000-0000-0000-0000-0000000002ab" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000002c4","00000000-0000-0000-0000-0000000002c2","ba5eda7a-def5-0000-0000-000000000004",'Env_Text','',1,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_IR VALUES ( "00000000-0000-0000-0000-00000000026c","00000000-0000-0000-0000-00000000026a","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-00000000026d" );
INSERT INTO C_IR VALUES ( "00000000-0000-0000-0000-000000000289","00000000-0000-0000-0000-000000000287","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-00000000028a" );
INSERT INTO C_IR VALUES ( "00000000-0000-0000-0000-0000000002c0","00000000-0000-0000-0000-0000000002be","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-0000000002c1" );
INSERT INTO C_PO VALUES ( "00000000-0000-0000-0000-00000000026d","00000000-0000-0000-0000-000000000023",'Relationships',0,0,'' );
INSERT INTO C_PO VALUES ( "00000000-0000-0000-0000-00000000028a","00000000-0000-0000-0000-000000000023",'Report',0,0,'RPT' );
INSERT INTO C_PO VALUES ( "00000000-0000-0000-0000-0000000002c1","00000000-0000-0000-0000-000000000023",'Where_Are_We',0,0,'WAW' );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-0000000002ad","00000000-0000-0000-0000-00000000028b","00000000-0000-0000-0000-000000000289" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-0000000002af","00000000-0000-0000-0000-000000000292","00000000-0000-0000-0000-000000000289" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-0000000002b1","00000000-0000-0000-0000-000000000297","00000000-0000-0000-0000-000000000289" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-0000000002b3","00000000-0000-0000-0000-00000000029c","00000000-0000-0000-0000-000000000289" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-0000000002b5","00000000-0000-0000-0000-00000000029f","00000000-0000-0000-0000-000000000289" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-0000000002b7","00000000-0000-0000-0000-0000000002a3","00000000-0000-0000-0000-000000000289" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-0000000002b9","00000000-0000-0000-0000-0000000002a6","00000000-0000-0000-0000-000000000289" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-0000000002bb","00000000-0000-0000-0000-0000000002a9","00000000-0000-0000-0000-000000000289" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-0000000002c5","00000000-0000-0000-0000-0000000002c2","00000000-0000-0000-0000-0000000002c0" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-000000000bcf","00000000-0000-0000-0000-00000000026e","00000000-0000-0000-0000-00000000026c" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-000000000bd1","00000000-0000-0000-0000-000000000272","00000000-0000-0000-0000-00000000026c" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-000000000bd3","00000000-0000-0000-0000-000000000276","00000000-0000-0000-0000-00000000026c" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-000000000bd5","00000000-0000-0000-0000-00000000027a","00000000-0000-0000-0000-00000000026c" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-000000000bd7","00000000-0000-0000-0000-00000000027e","00000000-0000-0000-0000-00000000026c" );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-0000000002ad",'','','',3,2,1 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-0000000002af",'','','',3,2,2 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-0000000002b1",'','','',3,2,3 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-0000000002b3",'','','',3,2,4 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-0000000002b5",'','','',3,2,5 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-0000000002b7",'','','',3,2,6 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-0000000002b9",'','','',3,2,7 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-0000000002bb",'','','',3,2,8 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-0000000002c5",'','','',3,2,1 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-000000000bcf",'','','',3,6,0 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-000000000bd1",'','','',3,6,0 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-000000000bd3",'','','',3,6,0 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-000000000bd5",'','','',3,6,0 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-000000000bd7",'','','',3,6,0 );
INSERT INTO SM_SM VALUES ( "00000000-0000-0000-0000-000000000634",'',0 );
INSERT INTO SM_SM VALUES ( "00000000-0000-0000-0000-0000000006bc",'',0 );
INSERT INTO SM_SM VALUES ( "00000000-0000-0000-0000-000000000720",'',0 );
INSERT INTO SM_SM VALUES ( "00000000-0000-0000-0000-000000000777",'',0 );
INSERT INTO SM_SM VALUES ( "00000000-0000-0000-0000-0000000007f4",'',0 );
INSERT INTO SM_SM VALUES ( "00000000-0000-0000-0000-000000000831",'',0 );
INSERT INTO SM_SM VALUES ( "00000000-0000-0000-0000-0000000008d9",'',0 );
INSERT INTO SM_SM VALUES ( "00000000-0000-0000-0000-000000000959",'',0 );
INSERT INTO SM_SM VALUES ( "00000000-0000-0000-0000-0000000009b7",'',0 );
INSERT INTO SM_SM VALUES ( "00000000-0000-0000-0000-0000000009f4",'',0 );
INSERT INTO SM_SM VALUES ( "00000000-0000-0000-0000-000000000a6d",'',0 );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-00000000063c","00000000-0000-0000-0000-000000000634","00000000-0000-0000-0000-000000000000",1,'Finished',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000642","00000000-0000-0000-0000-000000000634","00000000-0000-0000-0000-000000000000",2,'StartA',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-00000000064a","00000000-0000-0000-0000-000000000634","00000000-0000-0000-0000-000000000000",9,'Fault',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000650","00000000-0000-0000-0000-000000000634","00000000-0000-0000-0000-000000000000",10,'StartB',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000658","00000000-0000-0000-0000-000000000634","00000000-0000-0000-0000-000000000000",11,'StartC',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000662","00000000-0000-0000-0000-000000000634","00000000-0000-0000-0000-000000000000",12,'StartD',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-00000000066a","00000000-0000-0000-0000-000000000634","00000000-0000-0000-0000-000000000000",13,'StartE',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000672","00000000-0000-0000-0000-000000000634","00000000-0000-0000-0000-000000000000",14,'StartF',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-00000000067a","00000000-0000-0000-0000-000000000634","00000000-0000-0000-0000-000000000000",15,'StartG',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-0000000006c4","00000000-0000-0000-0000-0000000006bc","00000000-0000-0000-0000-000000000000",9,'Fault',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-0000000006ca","00000000-0000-0000-0000-0000000006bc","00000000-0000-0000-0000-000000000000",10,'Finished',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-0000000006d0","00000000-0000-0000-0000-0000000006bc","00000000-0000-0000-0000-000000000000",11,'StartA',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-0000000006d8","00000000-0000-0000-0000-0000000006bc","00000000-0000-0000-0000-000000000000",12,'StartB',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-0000000006e0","00000000-0000-0000-0000-0000000006bc","00000000-0000-0000-0000-000000000000",13,'StartC',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-0000000006ea","00000000-0000-0000-0000-0000000006bc","00000000-0000-0000-0000-000000000000",14,'StartD',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-0000000006f2","00000000-0000-0000-0000-0000000006bc","00000000-0000-0000-0000-000000000000",15,'StartE',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-0000000006fa","00000000-0000-0000-0000-0000000006bc","00000000-0000-0000-0000-000000000000",16,'StartF',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000702","00000000-0000-0000-0000-0000000006bc","00000000-0000-0000-0000-000000000000",17,'StartG',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000728","00000000-0000-0000-0000-000000000720","00000000-0000-0000-0000-000000000000",1,'Fault',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-00000000072e","00000000-0000-0000-0000-000000000720","00000000-0000-0000-0000-000000000000",2,'Finished',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000734","00000000-0000-0000-0000-000000000720","00000000-0000-0000-0000-000000000000",3,'StartA',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-00000000073c","00000000-0000-0000-0000-000000000720","00000000-0000-0000-0000-000000000000",4,'StartB',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000744","00000000-0000-0000-0000-000000000720","00000000-0000-0000-0000-000000000000",5,'StartC',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-00000000074e","00000000-0000-0000-0000-000000000720","00000000-0000-0000-0000-000000000000",6,'StartD',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000756","00000000-0000-0000-0000-000000000720","00000000-0000-0000-0000-000000000000",7,'StartE',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-00000000075e","00000000-0000-0000-0000-000000000720","00000000-0000-0000-0000-000000000000",8,'StartF',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000766","00000000-0000-0000-0000-000000000720","00000000-0000-0000-0000-000000000000",9,'StartG',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-00000000077f","00000000-0000-0000-0000-000000000777","00000000-0000-0000-0000-000000000000",1,'One2One',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000785","00000000-0000-0000-0000-000000000777","00000000-0000-0000-0000-000000000000",2,'Finished',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-00000000078b","00000000-0000-0000-0000-000000000777","00000000-0000-0000-0000-000000000000",3,'ERROR',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000791","00000000-0000-0000-0000-000000000777","00000000-0000-0000-0000-000000000000",4,'Many2Many',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000797","00000000-0000-0000-0000-000000000777","00000000-0000-0000-0000-000000000000",5,'One2Many',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-0000000007fc","00000000-0000-0000-0000-0000000007f4","00000000-0000-0000-0000-000000000000",1,'Fault',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000802","00000000-0000-0000-0000-0000000007f4","00000000-0000-0000-0000-000000000000",2,'Finished',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000808","00000000-0000-0000-0000-0000000007f4","00000000-0000-0000-0000-000000000000",3,'StartA',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000812","00000000-0000-0000-0000-0000000007f4","00000000-0000-0000-0000-000000000000",4,'StartB',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000839","00000000-0000-0000-0000-0000000007f4","00000000-0000-0000-0000-000000000000",1,'Fault',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000843","00000000-0000-0000-0000-000000000831","00000000-0000-0000-0000-000000000000",1,'Fault',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000845","00000000-0000-0000-0000-0000000007f4","00000000-0000-0000-0000-000000000000",2,'Finished',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-00000000084f","00000000-0000-0000-0000-000000000831","00000000-0000-0000-0000-000000000000",2,'Finished',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000851","00000000-0000-0000-0000-0000000007f4","00000000-0000-0000-0000-000000000000",3,'StartA',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-00000000085b","00000000-0000-0000-0000-000000000831","00000000-0000-0000-0000-000000000000",3,'StartA',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-00000000085d","00000000-0000-0000-0000-0000000007f4","00000000-0000-0000-0000-000000000000",4,'StartB',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000867","00000000-0000-0000-0000-000000000831","00000000-0000-0000-0000-000000000000",4,'StartB',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000869","00000000-0000-0000-0000-000000000831","00000000-0000-0000-0000-000000000000",1,'Fault',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-00000000086f","00000000-0000-0000-0000-000000000831","00000000-0000-0000-0000-000000000000",2,'Finished',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-0000000008e1","00000000-0000-0000-0000-0000000008d9","00000000-0000-0000-0000-000000000000",1,'Fault',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-0000000008e7","00000000-0000-0000-0000-0000000008d9","00000000-0000-0000-0000-000000000000",2,'Finished',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-0000000008ed","00000000-0000-0000-0000-0000000008d9","00000000-0000-0000-0000-000000000000",3,'StartA',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-0000000008f7","00000000-0000-0000-0000-0000000008d9","00000000-0000-0000-0000-000000000000",4,'StartB',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000901","00000000-0000-0000-0000-0000000008d9","00000000-0000-0000-0000-000000000000",5,'StartC',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000909","00000000-0000-0000-0000-0000000008d9","00000000-0000-0000-0000-000000000000",6,'StartD',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000911","00000000-0000-0000-0000-0000000008d9","00000000-0000-0000-0000-000000000000",7,'StartE',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000919","00000000-0000-0000-0000-0000000008d9","00000000-0000-0000-0000-000000000000",8,'StartF',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000961","00000000-0000-0000-0000-000000000959","00000000-0000-0000-0000-000000000000",1,'Fail',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000967","00000000-0000-0000-0000-000000000959","00000000-0000-0000-0000-000000000000",2,'Start_A',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-00000000096f","00000000-0000-0000-0000-000000000959","00000000-0000-0000-0000-000000000000",3,'Finished',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000975","00000000-0000-0000-0000-000000000959","00000000-0000-0000-0000-000000000000",4,'Start_B',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-00000000097f","00000000-0000-0000-0000-000000000959","00000000-0000-0000-0000-000000000000",5,'Start_C',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000987","00000000-0000-0000-0000-000000000959","00000000-0000-0000-0000-000000000000",6,'Invocation',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-0000000009bf","00000000-0000-0000-0000-0000000009b7","00000000-0000-0000-0000-000000000000",1,'Start_Create',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-0000000009c7","00000000-0000-0000-0000-0000000009b7","00000000-0000-0000-0000-000000000000",2,'Finished',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-0000000009cd","00000000-0000-0000-0000-0000000009b7","00000000-0000-0000-0000-000000000000",3,'Start_Navigation',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-0000000009d7","00000000-0000-0000-0000-0000000009b7","00000000-0000-0000-0000-000000000000",4,'Start_Delete',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000a00","00000000-0000-0000-0000-0000000009f4","00000000-0000-0000-0000-000000000000",1,'Fault',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000a06","00000000-0000-0000-0000-0000000009f4","00000000-0000-0000-0000-000000000000",2,'Finished',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000a0c","00000000-0000-0000-0000-0000000009f4","00000000-0000-0000-0000-000000000000",3,'StartA',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000a12","00000000-0000-0000-0000-0000000009f4","00000000-0000-0000-0000-000000000000",4,'StartB',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000a14","00000000-0000-0000-0000-0000000009f4","00000000-0000-0000-0000-000000000000",1,'Fault',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000a1a","00000000-0000-0000-0000-0000000009f4","00000000-0000-0000-0000-000000000000",2,'Finished',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000a20","00000000-0000-0000-0000-0000000009f4","00000000-0000-0000-0000-000000000000",3,'StartA',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000a28","00000000-0000-0000-0000-0000000009f4","00000000-0000-0000-0000-000000000000",4,'StartB',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000a75","00000000-0000-0000-0000-000000000a6d","00000000-0000-0000-0000-000000000000",1,'Fault',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000a7b","00000000-0000-0000-0000-000000000a6d","00000000-0000-0000-0000-000000000000",2,'Finished',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000a81","00000000-0000-0000-0000-000000000a6d","00000000-0000-0000-0000-000000000000",3,'StartA',0,'','','' );
INSERT INTO SM_MOORE VALUES ( "00000000-0000-0000-0000-000000000634" );
INSERT INTO SM_MOORE VALUES ( "00000000-0000-0000-0000-0000000006bc" );
INSERT INTO SM_MOORE VALUES ( "00000000-0000-0000-0000-000000000720" );
INSERT INTO SM_MOORE VALUES ( "00000000-0000-0000-0000-000000000777" );
INSERT INTO SM_MOORE VALUES ( "00000000-0000-0000-0000-0000000007f4" );
INSERT INTO SM_MOORE VALUES ( "00000000-0000-0000-0000-000000000831" );
INSERT INTO SM_MOORE VALUES ( "00000000-0000-0000-0000-0000000008d9" );
INSERT INTO SM_MOORE VALUES ( "00000000-0000-0000-0000-000000000959" );
INSERT INTO SM_MOORE VALUES ( "00000000-0000-0000-0000-0000000009b7" );
INSERT INTO SM_MOORE VALUES ( "00000000-0000-0000-0000-0000000009f4" );
INSERT INTO SM_MOORE VALUES ( "00000000-0000-0000-0000-000000000a6d" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-000000000648","00000000-0000-0000-0000-000000000634",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-000000000642","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-000000000656","00000000-0000-0000-0000-000000000634",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-000000000650","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-00000000065e","00000000-0000-0000-0000-000000000634",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-000000000658","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-000000000660","00000000-0000-0000-0000-000000000634",'Iteration','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-000000000658","00000000-0000-0000-0000-00000000065e" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-000000000668","00000000-0000-0000-0000-000000000634",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-000000000662","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-000000000670","00000000-0000-0000-0000-000000000634",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-00000000066a","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-000000000678","00000000-0000-0000-0000-000000000634",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-000000000672","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-000000000680","00000000-0000-0000-0000-000000000634",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-00000000067a","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-0000000006d6","00000000-0000-0000-0000-0000000006bc",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-0000000006d0","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-0000000006de","00000000-0000-0000-0000-0000000006bc",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-0000000006d8","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-0000000006e6","00000000-0000-0000-0000-0000000006bc",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-0000000006e0","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-0000000006e8","00000000-0000-0000-0000-0000000006bc",'Iteration','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-0000000006e0","00000000-0000-0000-0000-0000000006e6" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-0000000006f0","00000000-0000-0000-0000-0000000006bc",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-0000000006ea","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-0000000006f8","00000000-0000-0000-0000-0000000006bc",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-0000000006f2","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-000000000700","00000000-0000-0000-0000-0000000006bc",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-0000000006fa","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-000000000708","00000000-0000-0000-0000-0000000006bc",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-000000000702","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-00000000073a","00000000-0000-0000-0000-000000000720",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-000000000734","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-000000000742","00000000-0000-0000-0000-000000000720",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-00000000073c","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-00000000074a","00000000-0000-0000-0000-000000000720",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-000000000744","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-00000000074c","00000000-0000-0000-0000-000000000720",'Iteration','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-000000000744","00000000-0000-0000-0000-00000000074a" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-000000000754","00000000-0000-0000-0000-000000000720",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-00000000074e","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-00000000075c","00000000-0000-0000-0000-000000000720",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-000000000756","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-000000000764","00000000-0000-0000-0000-000000000720",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-00000000075e","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-00000000076c","00000000-0000-0000-0000-000000000720",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-000000000766","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-00000000080e","00000000-0000-0000-0000-0000000007f4",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-000000000851","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-000000000810","00000000-0000-0000-0000-0000000007f4",'Iteration','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-000000000851","00000000-0000-0000-0000-00000000080e" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-000000000818","00000000-0000-0000-0000-0000000007f4",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-00000000085d","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-00000000081a","00000000-0000-0000-0000-0000000007f4",'Iteration','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-00000000085d","00000000-0000-0000-0000-000000000818" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-0000000008f3","00000000-0000-0000-0000-0000000008d9",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-0000000008ed","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-0000000008f5","00000000-0000-0000-0000-0000000008d9",'Iteration','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-0000000008ed","00000000-0000-0000-0000-0000000008f3" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-0000000008fd","00000000-0000-0000-0000-0000000008d9",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-0000000008f7","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-0000000008ff","00000000-0000-0000-0000-0000000008d9",'Iteration','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-0000000008f7","00000000-0000-0000-0000-0000000008fd" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-000000000907","00000000-0000-0000-0000-0000000008d9",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-000000000901","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-00000000090f","00000000-0000-0000-0000-0000000008d9",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-000000000909","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-000000000917","00000000-0000-0000-0000-0000000008d9",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-000000000911","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-00000000091f","00000000-0000-0000-0000-0000000008d9",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-000000000919","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-00000000096d","00000000-0000-0000-0000-000000000959",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-000000000967","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-00000000097b","00000000-0000-0000-0000-000000000959",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-000000000975","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-00000000097d","00000000-0000-0000-0000-000000000959",'Iteration','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-000000000975","00000000-0000-0000-0000-00000000097b" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-000000000985","00000000-0000-0000-0000-000000000959",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-00000000097f","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-0000000009c5","00000000-0000-0000-0000-0000000009b7",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-0000000009bf","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-0000000009d3","00000000-0000-0000-0000-0000000009b7",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-0000000009cd","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-0000000009d5","00000000-0000-0000-0000-0000000009b7",'Iteration','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-0000000009cd","00000000-0000-0000-0000-0000000009d3" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-0000000009dd","00000000-0000-0000-0000-0000000009b7",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-0000000009d7","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-000000000a26","00000000-0000-0000-0000-0000000009f4",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-000000000a20","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-000000000a2e","00000000-0000-0000-0000-0000000009f4",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-000000000a28","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-000000000a87","00000000-0000-0000-0000-000000000a6d",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-000000000a81","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_ISM VALUES ( "00000000-0000-0000-0000-000000000634","00000000-0000-0000-0000-000000000034" );
INSERT INTO SM_ISM VALUES ( "00000000-0000-0000-0000-0000000006bc","00000000-0000-0000-0000-000000000055" );
INSERT INTO SM_ISM VALUES ( "00000000-0000-0000-0000-000000000720","00000000-0000-0000-0000-000000000060" );
INSERT INTO SM_ISM VALUES ( "00000000-0000-0000-0000-000000000777","00000000-0000-0000-0000-00000000006b" );
INSERT INTO SM_ISM VALUES ( "00000000-0000-0000-0000-0000000007f4","00000000-0000-0000-0000-000000000097" );
INSERT INTO SM_ISM VALUES ( "00000000-0000-0000-0000-000000000831","00000000-0000-0000-0000-0000000000a2" );
INSERT INTO SM_ISM VALUES ( "00000000-0000-0000-0000-0000000008d9","00000000-0000-0000-0000-0000000000d9" );
INSERT INTO SM_ISM VALUES ( "00000000-0000-0000-0000-000000000959","00000000-0000-0000-0000-000000000105" );
INSERT INTO SM_ISM VALUES ( "00000000-0000-0000-0000-0000000009b7","00000000-0000-0000-0000-00000000011b" );
INSERT INTO SM_ISM VALUES ( "00000000-0000-0000-0000-0000000009f4","00000000-0000-0000-0000-000000000126" );
INSERT INTO SM_ISM VALUES ( "00000000-0000-0000-0000-000000000a6d","00000000-0000-0000-0000-00000000015d" );
INSERT INTO SM_PEVT VALUES ( "00000000-0000-0000-0000-000000000839","00000000-0000-0000-0000-0000000007f4","00000000-0000-0000-0000-000000000000",'','','' );
INSERT INTO SM_PEVT VALUES ( "00000000-0000-0000-0000-000000000845","00000000-0000-0000-0000-0000000007f4","00000000-0000-0000-0000-000000000000",'','','' );
INSERT INTO SM_PEVT VALUES ( "00000000-0000-0000-0000-000000000851","00000000-0000-0000-0000-0000000007f4","00000000-0000-0000-0000-000000000000",'','','' );
INSERT INTO SM_PEVT VALUES ( "00000000-0000-0000-0000-00000000085d","00000000-0000-0000-0000-0000000007f4","00000000-0000-0000-0000-000000000000",'','','' );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-00000000063c","00000000-0000-0000-0000-000000000634","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000642","00000000-0000-0000-0000-000000000634","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-00000000064a","00000000-0000-0000-0000-000000000634","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000650","00000000-0000-0000-0000-000000000634","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000658","00000000-0000-0000-0000-000000000634","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000662","00000000-0000-0000-0000-000000000634","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-00000000066a","00000000-0000-0000-0000-000000000634","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000672","00000000-0000-0000-0000-000000000634","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-00000000067a","00000000-0000-0000-0000-000000000634","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-0000000006c4","00000000-0000-0000-0000-0000000006bc","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-0000000006ca","00000000-0000-0000-0000-0000000006bc","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-0000000006d0","00000000-0000-0000-0000-0000000006bc","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-0000000006d8","00000000-0000-0000-0000-0000000006bc","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-0000000006e0","00000000-0000-0000-0000-0000000006bc","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-0000000006ea","00000000-0000-0000-0000-0000000006bc","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-0000000006f2","00000000-0000-0000-0000-0000000006bc","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-0000000006fa","00000000-0000-0000-0000-0000000006bc","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000702","00000000-0000-0000-0000-0000000006bc","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000728","00000000-0000-0000-0000-000000000720","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-00000000072e","00000000-0000-0000-0000-000000000720","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000734","00000000-0000-0000-0000-000000000720","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-00000000073c","00000000-0000-0000-0000-000000000720","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000744","00000000-0000-0000-0000-000000000720","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-00000000074e","00000000-0000-0000-0000-000000000720","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000756","00000000-0000-0000-0000-000000000720","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-00000000075e","00000000-0000-0000-0000-000000000720","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000766","00000000-0000-0000-0000-000000000720","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-00000000077f","00000000-0000-0000-0000-000000000777","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000785","00000000-0000-0000-0000-000000000777","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-00000000078b","00000000-0000-0000-0000-000000000777","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000791","00000000-0000-0000-0000-000000000777","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000797","00000000-0000-0000-0000-000000000777","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-0000000007fc","00000000-0000-0000-0000-0000000007f4","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000802","00000000-0000-0000-0000-0000000007f4","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000808","00000000-0000-0000-0000-0000000007f4","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000812","00000000-0000-0000-0000-0000000007f4","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000843","00000000-0000-0000-0000-000000000831","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-00000000084f","00000000-0000-0000-0000-000000000831","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-00000000085b","00000000-0000-0000-0000-000000000831","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000867","00000000-0000-0000-0000-000000000831","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000869","00000000-0000-0000-0000-000000000831","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-00000000086f","00000000-0000-0000-0000-000000000831","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-0000000008e1","00000000-0000-0000-0000-0000000008d9","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-0000000008e7","00000000-0000-0000-0000-0000000008d9","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-0000000008ed","00000000-0000-0000-0000-0000000008d9","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-0000000008f7","00000000-0000-0000-0000-0000000008d9","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000901","00000000-0000-0000-0000-0000000008d9","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000909","00000000-0000-0000-0000-0000000008d9","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000911","00000000-0000-0000-0000-0000000008d9","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000919","00000000-0000-0000-0000-0000000008d9","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000961","00000000-0000-0000-0000-000000000959","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000967","00000000-0000-0000-0000-000000000959","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-00000000096f","00000000-0000-0000-0000-000000000959","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000975","00000000-0000-0000-0000-000000000959","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-00000000097f","00000000-0000-0000-0000-000000000959","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000987","00000000-0000-0000-0000-000000000959","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-0000000009bf","00000000-0000-0000-0000-0000000009b7","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-0000000009c7","00000000-0000-0000-0000-0000000009b7","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-0000000009cd","00000000-0000-0000-0000-0000000009b7","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-0000000009d7","00000000-0000-0000-0000-0000000009b7","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000a00","00000000-0000-0000-0000-0000000009f4","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000a06","00000000-0000-0000-0000-0000000009f4","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000a0c","00000000-0000-0000-0000-0000000009f4","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000a12","00000000-0000-0000-0000-0000000009f4","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000a14","00000000-0000-0000-0000-0000000009f4","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000a1a","00000000-0000-0000-0000-0000000009f4","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000a20","00000000-0000-0000-0000-0000000009f4","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000a28","00000000-0000-0000-0000-0000000009f4","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000a75","00000000-0000-0000-0000-000000000a6d","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000a7b","00000000-0000-0000-0000-000000000a6d","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000a81","00000000-0000-0000-0000-000000000a6d","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_NLEVT VALUES ( "00000000-0000-0000-0000-0000000007fc","00000000-0000-0000-0000-0000000007f4","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000839","00000000-0000-0000-0000-0000000007f4","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_NLEVT VALUES ( "00000000-0000-0000-0000-000000000843","00000000-0000-0000-0000-000000000831","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000839","00000000-0000-0000-0000-0000000007f4","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_NLEVT VALUES ( "00000000-0000-0000-0000-000000000802","00000000-0000-0000-0000-0000000007f4","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000845","00000000-0000-0000-0000-0000000007f4","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_NLEVT VALUES ( "00000000-0000-0000-0000-00000000084f","00000000-0000-0000-0000-000000000831","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000845","00000000-0000-0000-0000-0000000007f4","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_NLEVT VALUES ( "00000000-0000-0000-0000-000000000808","00000000-0000-0000-0000-0000000007f4","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000851","00000000-0000-0000-0000-0000000007f4","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_NLEVT VALUES ( "00000000-0000-0000-0000-00000000085b","00000000-0000-0000-0000-000000000831","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000851","00000000-0000-0000-0000-0000000007f4","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_NLEVT VALUES ( "00000000-0000-0000-0000-000000000812","00000000-0000-0000-0000-0000000007f4","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-00000000085d","00000000-0000-0000-0000-0000000007f4","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_NLEVT VALUES ( "00000000-0000-0000-0000-000000000867","00000000-0000-0000-0000-000000000831","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-00000000085d","00000000-0000-0000-0000-0000000007f4","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_NLEVT VALUES ( "00000000-0000-0000-0000-000000000a00","00000000-0000-0000-0000-0000000009f4","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000839","00000000-0000-0000-0000-0000000007f4","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_NLEVT VALUES ( "00000000-0000-0000-0000-000000000a06","00000000-0000-0000-0000-0000000009f4","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000845","00000000-0000-0000-0000-0000000007f4","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_NLEVT VALUES ( "00000000-0000-0000-0000-000000000a0c","00000000-0000-0000-0000-0000000009f4","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000851","00000000-0000-0000-0000-0000000007f4","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_NLEVT VALUES ( "00000000-0000-0000-0000-000000000a12","00000000-0000-0000-0000-0000000009f4","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-00000000085d","00000000-0000-0000-0000-0000000007f4","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-00000000063c","00000000-0000-0000-0000-000000000634","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000642","00000000-0000-0000-0000-000000000634","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-00000000064a","00000000-0000-0000-0000-000000000634","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000650","00000000-0000-0000-0000-000000000634","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000658","00000000-0000-0000-0000-000000000634","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000662","00000000-0000-0000-0000-000000000634","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-00000000066a","00000000-0000-0000-0000-000000000634","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000672","00000000-0000-0000-0000-000000000634","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-00000000067a","00000000-0000-0000-0000-000000000634","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-0000000006c4","00000000-0000-0000-0000-0000000006bc","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-0000000006ca","00000000-0000-0000-0000-0000000006bc","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-0000000006d0","00000000-0000-0000-0000-0000000006bc","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-0000000006d8","00000000-0000-0000-0000-0000000006bc","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-0000000006e0","00000000-0000-0000-0000-0000000006bc","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-0000000006ea","00000000-0000-0000-0000-0000000006bc","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-0000000006f2","00000000-0000-0000-0000-0000000006bc","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-0000000006fa","00000000-0000-0000-0000-0000000006bc","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000702","00000000-0000-0000-0000-0000000006bc","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000728","00000000-0000-0000-0000-000000000720","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-00000000072e","00000000-0000-0000-0000-000000000720","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000734","00000000-0000-0000-0000-000000000720","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-00000000073c","00000000-0000-0000-0000-000000000720","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000744","00000000-0000-0000-0000-000000000720","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-00000000074e","00000000-0000-0000-0000-000000000720","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000756","00000000-0000-0000-0000-000000000720","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-00000000075e","00000000-0000-0000-0000-000000000720","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000766","00000000-0000-0000-0000-000000000720","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-00000000077f","00000000-0000-0000-0000-000000000777","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000785","00000000-0000-0000-0000-000000000777","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-00000000078b","00000000-0000-0000-0000-000000000777","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000791","00000000-0000-0000-0000-000000000777","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000797","00000000-0000-0000-0000-000000000777","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000869","00000000-0000-0000-0000-000000000831","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-00000000086f","00000000-0000-0000-0000-000000000831","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-0000000008e1","00000000-0000-0000-0000-0000000008d9","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-0000000008e7","00000000-0000-0000-0000-0000000008d9","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-0000000008ed","00000000-0000-0000-0000-0000000008d9","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-0000000008f7","00000000-0000-0000-0000-0000000008d9","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000901","00000000-0000-0000-0000-0000000008d9","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000909","00000000-0000-0000-0000-0000000008d9","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000911","00000000-0000-0000-0000-0000000008d9","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000919","00000000-0000-0000-0000-0000000008d9","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000961","00000000-0000-0000-0000-000000000959","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000967","00000000-0000-0000-0000-000000000959","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-00000000096f","00000000-0000-0000-0000-000000000959","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000975","00000000-0000-0000-0000-000000000959","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-00000000097f","00000000-0000-0000-0000-000000000959","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000987","00000000-0000-0000-0000-000000000959","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-0000000009bf","00000000-0000-0000-0000-0000000009b7","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-0000000009c7","00000000-0000-0000-0000-0000000009b7","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-0000000009cd","00000000-0000-0000-0000-0000000009b7","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-0000000009d7","00000000-0000-0000-0000-0000000009b7","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000a14","00000000-0000-0000-0000-0000000009f4","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000a1a","00000000-0000-0000-0000-0000000009f4","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000a20","00000000-0000-0000-0000-0000000009f4","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000a28","00000000-0000-0000-0000-0000000009f4","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000a75","00000000-0000-0000-0000-000000000a6d","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000a7b","00000000-0000-0000-0000-000000000a6d","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000a81","00000000-0000-0000-0000-000000000a6d","00000000-0000-0000-0000-000000000000" );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000004",1,"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000000",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000006",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000009",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000000c",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000000f",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000012",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000015",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000018",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000001b",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000001e",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000021",1,"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000000",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000023",1,"00000000-0000-0000-0000-000000000021","00000000-0000-0000-0000-000000000000",2 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000025",1,"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000023",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000027",1,"00000000-0000-0000-0000-000000000021","00000000-0000-0000-0000-000000000000",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000029",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000002d",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000030",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000034",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000038",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000003b",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000003f",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000043",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000046",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000004a",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000004e",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000051",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000055",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000059",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000005c",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000060",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000064",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000067",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000006b",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000006f",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000072",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000076",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000007a",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000007d",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000081",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000085",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000088",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000008c",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000090",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000093",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000097",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000009b",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000009e",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000a2",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000a6",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000a9",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000ad",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000b1",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000b4",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000b8",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000bc",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000bf",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000c3",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000c7",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000ca",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000ce",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000d2",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000d5",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000d9",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000dd",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000e0",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000e4",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000e8",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000eb",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000ef",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000f3",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000f6",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000fa",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000fe",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000101",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000105",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000109",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000010c",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000110",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000114",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000117",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000011b",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000011f",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000122",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000126",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000012a",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000012d",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000131",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000135",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000138",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000013c",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000140",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000143",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000147",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000014b",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000014e",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000152",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000156",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000159",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000015d",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000161",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000164",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000168",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000016c",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000016f",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000173",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000177",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000017a",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000017e",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000182",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000185",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000189",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000018d",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000190",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000194",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000198",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000019b",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000019f",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001a3",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001a6",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001aa",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001ae",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001b1",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001b5",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001b9",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001bc",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001c0",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001c4",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001c7",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001cb",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001cf",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001d2",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001d6",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001da",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001dd",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001e1",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001e5",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001e8",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001ec",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001f0",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001f3",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001f7",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001fb",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001fe",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000202",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000206",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000209",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000020d",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000211",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000214",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000218",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000021c",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000021f",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000223",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000227",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000022a",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000022e",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000232",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000235",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000239",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000023d",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000240",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000244",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000248",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000024b",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000024f",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000253",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000256",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000025a",1,"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000023",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000025c",1,"00000000-0000-0000-0000-00000000025a","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000263",1,"00000000-0000-0000-0000-00000000025a","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000266",1,"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000023",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000268",1,"00000000-0000-0000-0000-000000000266","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000026a",1,"00000000-0000-0000-0000-000000000027","00000000-0000-0000-0000-000000000000",6 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000271",1,"00000000-0000-0000-0000-000000000266","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000275",1,"00000000-0000-0000-0000-000000000266","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000279",1,"00000000-0000-0000-0000-000000000266","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000027d",1,"00000000-0000-0000-0000-000000000266","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000287",1,"00000000-0000-0000-0000-000000000027","00000000-0000-0000-0000-000000000000",6 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000002be",1,"00000000-0000-0000-0000-000000000027","00000000-0000-0000-0000-000000000000",6 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000002c8",1,"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000023",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000002ca",1,"00000000-0000-0000-0000-0000000002c8","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000002cc",1,"00000000-0000-0000-0000-0000000002c8","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000002ce",1,"00000000-0000-0000-0000-0000000002c8","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000002d0",1,"00000000-0000-0000-0000-0000000002c8","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000002d2",1,"00000000-0000-0000-0000-0000000002c8","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000002d4",1,"00000000-0000-0000-0000-0000000002c8","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000002d6",1,"00000000-0000-0000-0000-0000000002c8","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000002d8",1,"00000000-0000-0000-0000-0000000002c8","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000002da",1,"00000000-0000-0000-0000-0000000002c8","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000002dc",1,"00000000-0000-0000-0000-0000000002c8","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000002de",1,"00000000-0000-0000-0000-0000000002c8","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000002e0",1,"00000000-0000-0000-0000-0000000002c8","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000002e2",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000002f7",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000030c",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000331",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000346",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000035b",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000370",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000395",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000003aa",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000003bf",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000003d4",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000003e9",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000003fe",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000413",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000428",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000044d",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000462",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000477",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000049c",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000004c1",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000004d6",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000004eb",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000500",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000515",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000533",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000055a",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000058a",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000005b1",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000005cf",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000005ed",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO model VALUES ( 'maslin' );
INSERT INTO option VALUES ( 'maslin','actiondialect','WASL' );
INSERT INTO option VALUES ( 'maslin','projectroot','./convertdir/Relationships/' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000006","00000000-0000-0000-0000-000000000000",'MASLtype','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000009","00000000-0000-0000-0000-000000000000",'MASLunique','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000000c","00000000-0000-0000-0000-000000000000",'device','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000000f","00000000-0000-0000-0000-000000000000",'duration','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000012","00000000-0000-0000-0000-000000000000",'wstring','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000015","00000000-0000-0000-0000-000000000000",'long_integer','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000018","00000000-0000-0000-0000-000000000000",'byte','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000001b","00000000-0000-0000-0000-000000000000",'wcharacter','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000001e","00000000-0000-0000-0000-000000000000",'character','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000002d","00000000-0000-0000-0000-000000000000",'inst_ref<Object_A>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000030","00000000-0000-0000-0000-000000000000",'inst_ref_set<Object_A>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000038","00000000-0000-0000-0000-000000000000",'inst_ref<Object_B>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000003b","00000000-0000-0000-0000-000000000000",'inst_ref_set<Object_B>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000043","00000000-0000-0000-0000-000000000000",'inst_ref<Report_Data>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000046","00000000-0000-0000-0000-000000000000",'inst_ref_set<Report_Data>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000004e","00000000-0000-0000-0000-000000000000",'inst_ref<Object_C>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000051","00000000-0000-0000-0000-000000000000",'inst_ref_set<Object_C>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000059","00000000-0000-0000-0000-000000000000",'inst_ref<Object_D>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000005c","00000000-0000-0000-0000-000000000000",'inst_ref_set<Object_D>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000064","00000000-0000-0000-0000-000000000000",'inst_ref<Object_E>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000067","00000000-0000-0000-0000-000000000000",'inst_ref_set<Object_E>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000006f","00000000-0000-0000-0000-000000000000",'inst_ref<Object_F>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000072","00000000-0000-0000-0000-000000000000",'inst_ref_set<Object_F>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000007a","00000000-0000-0000-0000-000000000000",'inst_ref<Object_EF>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000007d","00000000-0000-0000-0000-000000000000",'inst_ref_set<Object_EF>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000085","00000000-0000-0000-0000-000000000000",'inst_ref<Far_Left>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000088","00000000-0000-0000-0000-000000000000",'inst_ref_set<Far_Left>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000090","00000000-0000-0000-0000-000000000000",'inst_ref<Middle>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000093","00000000-0000-0000-0000-000000000000",'inst_ref_set<Middle>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000009b","00000000-0000-0000-0000-000000000000",'inst_ref<Object_H>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000009e","00000000-0000-0000-0000-000000000000",'inst_ref_set<Object_H>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000a6","00000000-0000-0000-0000-000000000000",'inst_ref<Object_I>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000a9","00000000-0000-0000-0000-000000000000",'inst_ref_set<Object_I>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000b1","00000000-0000-0000-0000-000000000000",'inst_ref<Many_Right>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000b4","00000000-0000-0000-0000-000000000000",'inst_ref_set<Many_Right>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000bc","00000000-0000-0000-0000-000000000000",'inst_ref<Test_Data>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000bf","00000000-0000-0000-0000-000000000000",'inst_ref_set<Test_Data>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000c7","00000000-0000-0000-0000-000000000000",'inst_ref<Many_Far_Right>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000ca","00000000-0000-0000-0000-000000000000",'inst_ref_set<Many_Far_Right>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000d2","00000000-0000-0000-0000-000000000000",'inst_ref<Many_Right_Assoc>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000d5","00000000-0000-0000-0000-000000000000",'inst_ref_set<Many_Right_Assoc>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000dd","00000000-0000-0000-0000-000000000000",'inst_ref<Object_G>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000e0","00000000-0000-0000-0000-000000000000",'inst_ref_set<Object_G>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000e8","00000000-0000-0000-0000-000000000000",'inst_ref<Many_Above>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000eb","00000000-0000-0000-0000-000000000000",'inst_ref_set<Many_Above>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000f3","00000000-0000-0000-0000-000000000000",'inst_ref<Left_Object>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000f6","00000000-0000-0000-0000-000000000000",'inst_ref_set<Left_Object>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000fe","00000000-0000-0000-0000-000000000000",'inst_ref<Right_Object>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000101","00000000-0000-0000-0000-000000000000",'inst_ref_set<Right_Object>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000109","00000000-0000-0000-0000-000000000000",'inst_ref<Middle_Object>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000010c","00000000-0000-0000-0000-000000000000",'inst_ref_set<Middle_Object>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000114","00000000-0000-0000-0000-000000000000",'inst_ref<MR_Assoc>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000117","00000000-0000-0000-0000-000000000000",'inst_ref_set<MR_Assoc>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000011f","00000000-0000-0000-0000-000000000000",'inst_ref<Left_Many>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000122","00000000-0000-0000-0000-000000000000",'inst_ref_set<Left_Many>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000012a","00000000-0000-0000-0000-000000000000",'inst_ref<Object_L>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000012d","00000000-0000-0000-0000-000000000000",'inst_ref_set<Object_L>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000135","00000000-0000-0000-0000-000000000000",'inst_ref<Object_M>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000138","00000000-0000-0000-0000-000000000000",'inst_ref_set<Object_M>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000140","00000000-0000-0000-0000-000000000000",'inst_ref<Right_Many>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000143","00000000-0000-0000-0000-000000000000",'inst_ref_set<Right_Many>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000014b","00000000-0000-0000-0000-000000000000",'inst_ref<Object_O>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000014e","00000000-0000-0000-0000-000000000000",'inst_ref_set<Object_O>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000156","00000000-0000-0000-0000-000000000000",'inst_ref<Object_DO>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000159","00000000-0000-0000-0000-000000000000",'inst_ref_set<Object_DO>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000161","00000000-0000-0000-0000-000000000000",'inst_ref<Object_P>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000164","00000000-0000-0000-0000-000000000000",'inst_ref_set<Object_P>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000016c","00000000-0000-0000-0000-000000000000",'inst_ref<Object_Q>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000016f","00000000-0000-0000-0000-000000000000",'inst_ref_set<Object_Q>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000177","00000000-0000-0000-0000-000000000000",'inst_ref<Object_R>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000017a","00000000-0000-0000-0000-000000000000",'inst_ref_set<Object_R>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000182","00000000-0000-0000-0000-000000000000",'inst_ref<LMRM_Assoc>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000185","00000000-0000-0000-0000-000000000000",'inst_ref_set<LMRM_Assoc>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000018d","00000000-0000-0000-0000-000000000000",'inst_ref<Bottom_Many>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000190","00000000-0000-0000-0000-000000000000",'inst_ref_set<Bottom_Many>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000198","00000000-0000-0000-0000-000000000000",'inst_ref<Ref_Att_ObjA>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000019b","00000000-0000-0000-0000-000000000000",'inst_ref_set<Ref_Att_ObjA>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000001a3","00000000-0000-0000-0000-000000000000",'inst_ref<Sub_L1>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000001a6","00000000-0000-0000-0000-000000000000",'inst_ref_set<Sub_L1>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000001ae","00000000-0000-0000-0000-000000000000",'inst_ref<Sub_L2>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000001b1","00000000-0000-0000-0000-000000000000",'inst_ref_set<Sub_L2>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000001b9","00000000-0000-0000-0000-000000000000",'inst_ref<Sub_L3>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000001bc","00000000-0000-0000-0000-000000000000",'inst_ref_set<Sub_L3>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000001c4","00000000-0000-0000-0000-000000000000",'inst_ref<Sub_Sub_L1>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000001c7","00000000-0000-0000-0000-000000000000",'inst_ref_set<Sub_Sub_L1>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000001cf","00000000-0000-0000-0000-000000000000",'inst_ref<Sub_Sub_L2>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000001d2","00000000-0000-0000-0000-000000000000",'inst_ref_set<Sub_Sub_L2>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000001da","00000000-0000-0000-0000-000000000000",'inst_ref<Sub_Sub_L3>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000001dd","00000000-0000-0000-0000-000000000000",'inst_ref_set<Sub_Sub_L3>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000001e5","00000000-0000-0000-0000-000000000000",'inst_ref<Sub_Sub_L4>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000001e8","00000000-0000-0000-0000-000000000000",'inst_ref_set<Sub_Sub_L4>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000001f0","00000000-0000-0000-0000-000000000000",'inst_ref<Sub_Sub_Sub_L1>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000001f3","00000000-0000-0000-0000-000000000000",'inst_ref_set<Sub_Sub_Sub_L1>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000001fb","00000000-0000-0000-0000-000000000000",'inst_ref<Sub_Sub_Sub_L2>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000001fe","00000000-0000-0000-0000-000000000000",'inst_ref_set<Sub_Sub_Sub_L2>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000206","00000000-0000-0000-0000-000000000000",'inst_ref<Sub_Sub_L5>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000209","00000000-0000-0000-0000-000000000000",'inst_ref_set<Sub_Sub_L5>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000211","00000000-0000-0000-0000-000000000000",'inst_ref<Sub_Sub_L6>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000214","00000000-0000-0000-0000-000000000000",'inst_ref_set<Sub_Sub_L6>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000021c","00000000-0000-0000-0000-000000000000",'inst_ref<Sub_Sub_L7>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000021f","00000000-0000-0000-0000-000000000000",'inst_ref_set<Sub_Sub_L7>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000227","00000000-0000-0000-0000-000000000000",'inst_ref<Sub_Sub_L8>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000022a","00000000-0000-0000-0000-000000000000",'inst_ref_set<Sub_Sub_L8>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000232","00000000-0000-0000-0000-000000000000",'inst_ref<Sub_Sub_L9>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000235","00000000-0000-0000-0000-000000000000",'inst_ref_set<Sub_Sub_L9>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000023d","00000000-0000-0000-0000-000000000000",'inst_ref<Sub_Sub_L10>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000240","00000000-0000-0000-0000-000000000000",'inst_ref_set<Sub_Sub_L10>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000248","00000000-0000-0000-0000-000000000000",'inst_ref<Sub_Sub_L11>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000024b","00000000-0000-0000-0000-000000000000",'inst_ref_set<Sub_Sub_L11>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000253","00000000-0000-0000-0000-000000000000",'inst_ref<Object_K>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000256","00000000-0000-0000-0000-000000000000",'inst_ref_set<Object_K>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000025c","00000000-0000-0000-0000-000000000000",'Colour',' Colour is a user defined type, for the purpose of verifing enumeration.
','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000263","00000000-0000-0000-0000-000000000000",'fred','','' );
