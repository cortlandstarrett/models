-- root-types-contained: Package_c
-- BP 7.1 content: StreamData syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000029",'Object_A',2,'objA',' Object_A is manipulated by object ''Instance_Creation''.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000034",'Object_B',3,'objB',' Object_B is manipulated by object ''Instance Creation''.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-00000000003f",'Object_C',4,'objC',' Object_C is manipulated by object ''Instance_Creation''.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-00000000004a",'Coloured_Object',5,'coloured','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000055",'Object_D',6,'objD',' Object_D is manipulated by object ''Instance_Deletion''.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000060",'Flavoured_Object',7,'flavoured','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-00000000006b",'Creation_State',8,'objCS',' This object verifies the creation of object instances.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000076",'Flavour_and_Colour',9,'fandc','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000081",'Doctor',10,'dr','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-00000000008c",'Termination_State',11,'objTS',' This object verifies the deletion of object instances.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000097",'Enemy',12,'enemy','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-0000000000a2",'Doctors_Enemy',13,'drenemy','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-0000000000ad",'Report_Data',14,'RD',' This object shall be replicated in all domains existing within the Software Architecture Test Suite that use the Reporter Domain.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000192","00000000-0000-0000-0000-000000000029","00000000-0000-0000-0000-000000000000",'',' Preferred identifier.
','','ReferenceA',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000019a","00000000-0000-0000-0000-000000000029","00000000-0000-0000-0000-000000000192",'',' An integer
','','IntegerA',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000001a0","00000000-0000-0000-0000-000000000029","00000000-0000-0000-0000-00000000019a",'',' Some text.
','','TextA',0,"ba5eda7a-def5-0000-0000-000000000004",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000001a6","00000000-0000-0000-0000-000000000029","00000000-0000-0000-0000-0000000001a0",'',' Boolean
','','BooleanA',0,"ba5eda7a-def5-0000-0000-000000000001",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000001ac","00000000-0000-0000-0000-000000000029","00000000-0000-0000-0000-0000000001a6",'',' User defined type
','','ColourA',0,"00000000-0000-0000-0000-0000000000c1",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000001b5","00000000-0000-0000-0000-000000000034","00000000-0000-0000-0000-000000000000",'',' Preferred identifier.
','','ReferenceB',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000001bd","00000000-0000-0000-0000-000000000034","00000000-0000-0000-0000-0000000001b5",'',' An integer.
','','IntegerA',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000001c6","00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-000000000000",'',' Preferred identifier.
','','Reference1C',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000001ce","00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-0000000001c6",'',' Referential attribute.
','','Reference2C',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000001d9","00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-000000000000",'','','','Coloured',0,"00000000-0000-0000-0000-0000000000c9",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000001e1","00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-0000000001d9",'','','','Intensity',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000001ed","00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-000000000000",'',' Preferred identifier.
','','ReferenceD',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000001f5","00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-0000000001ed",'',' An integer.
','','IntegerA',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000201","00000000-0000-0000-0000-000000000060","00000000-0000-0000-0000-000000000000",'','','','Flavoured',0,"00000000-0000-0000-0000-0000000000d0",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000209","00000000-0000-0000-0000-000000000060","00000000-0000-0000-0000-000000000201",'','','','How_Spicy',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000020f","00000000-0000-0000-0000-00000000006b","00000000-0000-0000-0000-000000000000",'',' Preferred identifier.
','','ReferenceCS',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000217","00000000-0000-0000-0000-00000000006b","00000000-0000-0000-0000-00000000020f",'',' This attribute is manipulated to indicate that the required operation was successful.
','','ResultCS',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000220","00000000-0000-0000-0000-00000000006b","00000000-0000-0000-0000-000000000217",'','','','current_state',0,"ba5eda7a-def5-0000-0000-000000000006",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000331","00000000-0000-0000-0000-000000000076","00000000-0000-0000-0000-000000000454",'','','','Dish_Number',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000337","00000000-0000-0000-0000-000000000081","00000000-0000-0000-0000-000000000000",'','','','Actor',0,"00000000-0000-0000-0000-0000000000d7",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000033f","00000000-0000-0000-0000-000000000081","00000000-0000-0000-0000-000000000337",'','','','length_of_scarf',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000348","00000000-0000-0000-0000-00000000008c","00000000-0000-0000-0000-000000000000",'',' Preferred identifier.
','','ReferenceTS',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000355","00000000-0000-0000-0000-00000000008c","00000000-0000-0000-0000-000000000348",'','','','current_state',0,"ba5eda7a-def5-0000-0000-000000000006",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000038d","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000000",'','','','Humanoid',0,"ba5eda7a-def5-0000-0000-000000000001",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000395","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-00000000038d",'','','','can_climb_stairs',0,"ba5eda7a-def5-0000-0000-000000000001",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000003a9","00000000-0000-0000-0000-0000000000a2","00000000-0000-0000-0000-000000000419",'','','','battlefield_arena',0,"00000000-0000-0000-0000-0000000000de",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000003af","00000000-0000-0000-0000-0000000000ad","00000000-0000-0000-0000-000000000000",'','','','Report_Data_Unique_id',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000003b7","00000000-0000-0000-0000-0000000000ad","00000000-0000-0000-0000-0000000003af",'',' Unique identifer for this domain as foar as the Reporter domain is concerned.
','','Reported_Domain_Number',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000419","00000000-0000-0000-0000-0000000000a2","00000000-0000-0000-0000-00000000042c",'','','','Actor',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000042c","00000000-0000-0000-0000-0000000000a2","00000000-0000-0000-0000-000000000000",'','','','Humanoid',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000441","00000000-0000-0000-0000-000000000076","00000000-0000-0000-0000-000000000000",'','','','Coloured',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000454","00000000-0000-0000-0000-000000000076","00000000-0000-0000-0000-000000000441",'','','','Flavoured',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000029" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000029" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000029" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000034" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000034" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000034" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000055" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000055" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000055" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000060" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000060" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000060" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000076" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000076" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000076" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000081" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000081" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000081" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-00000000008c" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-00000000008c" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-00000000008c" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000097" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000097" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000097" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-0000000000a2" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-0000000000a2" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-0000000000a2" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-0000000000ad" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-0000000000ad" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-0000000000ad" );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000192","00000000-0000-0000-0000-000000000029",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-0000000001b5","00000000-0000-0000-0000-000000000034",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-0000000001c6","00000000-0000-0000-0000-00000000003f",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-0000000001ce","00000000-0000-0000-0000-00000000003f",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-0000000001d9","00000000-0000-0000-0000-00000000004a",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-0000000001ed","00000000-0000-0000-0000-000000000055",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000201","00000000-0000-0000-0000-000000000060",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-00000000020f","00000000-0000-0000-0000-00000000006b",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000337","00000000-0000-0000-0000-000000000081",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000348","00000000-0000-0000-0000-00000000008c",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-00000000038d","00000000-0000-0000-0000-000000000097",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-0000000003af","00000000-0000-0000-0000-0000000000ad",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-00000000042c","00000000-0000-0000-0000-0000000000a2",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000441","00000000-0000-0000-0000-000000000076",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000454","00000000-0000-0000-0000-000000000076",0,'' );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000192","00000000-0000-0000-0000-000000000029" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000019a","00000000-0000-0000-0000-000000000029" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000001a0","00000000-0000-0000-0000-000000000029" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000001a6","00000000-0000-0000-0000-000000000029" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000001ac","00000000-0000-0000-0000-000000000029" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000001b5","00000000-0000-0000-0000-000000000034" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000001bd","00000000-0000-0000-0000-000000000034" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000001c6","00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000001ce","00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000001d9","00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000001e1","00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000001ed","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000001f5","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000201","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000209","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000020f","00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000217","00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000220","00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000331","00000000-0000-0000-0000-000000000076" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000337","00000000-0000-0000-0000-000000000081" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000033f","00000000-0000-0000-0000-000000000081" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000348","00000000-0000-0000-0000-00000000008c" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000355","00000000-0000-0000-0000-00000000008c" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000038d","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000395","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000003a9","00000000-0000-0000-0000-0000000000a2" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000003af","00000000-0000-0000-0000-0000000000ad" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000003b7","00000000-0000-0000-0000-0000000000ad" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000192","00000000-0000-0000-0000-000000000029" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000019a","00000000-0000-0000-0000-000000000029" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000001a0","00000000-0000-0000-0000-000000000029" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000001a6","00000000-0000-0000-0000-000000000029" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000001ac","00000000-0000-0000-0000-000000000029" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000001b5","00000000-0000-0000-0000-000000000034" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000001bd","00000000-0000-0000-0000-000000000034" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000001c6","00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000001ce","00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000001d9","00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000001e1","00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000001ed","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000001f5","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000201","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000209","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000020f","00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000217","00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000220","00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000331","00000000-0000-0000-0000-000000000076" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000337","00000000-0000-0000-0000-000000000081" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000033f","00000000-0000-0000-0000-000000000081" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000348","00000000-0000-0000-0000-00000000008c" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000355","00000000-0000-0000-0000-00000000008c" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000038d","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000395","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000003a9","00000000-0000-0000-0000-0000000000a2" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000003af","00000000-0000-0000-0000-0000000000ad" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000003b7","00000000-0000-0000-0000-0000000000ad" );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000419","00000000-0000-0000-0000-0000000000a2","00000000-0000-0000-0000-000000000337","00000000-0000-0000-0000-000000000081",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-00000000042c","00000000-0000-0000-0000-0000000000a2","00000000-0000-0000-0000-00000000038d","00000000-0000-0000-0000-000000000097",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000441","00000000-0000-0000-0000-000000000076","00000000-0000-0000-0000-0000000001d9","00000000-0000-0000-0000-00000000004a",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000454","00000000-0000-0000-0000-000000000076","00000000-0000-0000-0000-000000000201","00000000-0000-0000-0000-000000000060",0,'' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-0000000000a2","00000000-0000-0000-0000-000000000081",0,"00000000-0000-0000-0000-000000000337","00000000-0000-0000-0000-00000000016e","00000000-0000-0000-0000-00000000018e","00000000-0000-0000-0000-000000000172","00000000-0000-0000-0000-000000000419","00000000-0000-0000-0000-00000000042b","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-0000000000a2","00000000-0000-0000-0000-000000000097",0,"00000000-0000-0000-0000-00000000038d","00000000-0000-0000-0000-00000000016e","00000000-0000-0000-0000-00000000018e","00000000-0000-0000-0000-00000000017b","00000000-0000-0000-0000-00000000042c","00000000-0000-0000-0000-00000000043e","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-000000000076","00000000-0000-0000-0000-00000000004a",0,"00000000-0000-0000-0000-0000000001d9","00000000-0000-0000-0000-000000000149","00000000-0000-0000-0000-000000000169","00000000-0000-0000-0000-00000000014d","00000000-0000-0000-0000-000000000441","00000000-0000-0000-0000-000000000453","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-000000000076","00000000-0000-0000-0000-000000000060",0,"00000000-0000-0000-0000-000000000201","00000000-0000-0000-0000-000000000149","00000000-0000-0000-0000-000000000169","00000000-0000-0000-0000-000000000156","00000000-0000-0000-0000-000000000454","00000000-0000-0000-0000-000000000466","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-000000000337","00000000-0000-0000-0000-000000000081",0,"00000000-0000-0000-0000-00000000016e","00000000-0000-0000-0000-000000000172" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-00000000038d","00000000-0000-0000-0000-000000000097",0,"00000000-0000-0000-0000-00000000016e","00000000-0000-0000-0000-00000000017b" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-0000000001d9","00000000-0000-0000-0000-00000000004a",0,"00000000-0000-0000-0000-000000000149","00000000-0000-0000-0000-00000000014d" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-000000000201","00000000-0000-0000-0000-000000000060",0,"00000000-0000-0000-0000-000000000149","00000000-0000-0000-0000-000000000156" );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-0000000001b2","00000000-0000-0000-0000-000000000029",'do_sync_create',' Perform object service to test synchronous create operation.
',"ba5eda7a-def5-0000-0000-000000000000",0,'#------------------------------------------------------------------------#
# Do Sync Create
#
# The ASL translator shall support the following base types for attributes
# of objects, parameters and local variables:
# Real, Integer, Boolean, Text, Instance Handles and set of instance 
# handles
# 1103-0000-01-0311
#
# The ASL <create ... with> statement to create an instance of an object
# with attributes shall be supported
# 1103-0000-01-0511
#
#------------------------------------------------------------------------#

   # Set the Has_Failed flag, TRUE if a fault has been identified
   Has_Failed = FALSE

#------------------------------------------------------------------------#
# Test 1 - Create, specifing all attributes
#------------------------------------------------------------------------#

   Test = Test_Number

   # Invoke terminator to call report domain
   [] = RPT1:Start_Test[Test, "1103-0000-01-0511", "Creation Deletion", "objA", "Do_sync_create specifying all attibutes"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0101"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0102"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0109"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0118"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0311"]

   # NB. Absolute time is not supported.
   #     Neither is date.

   # Perform creation
   new_instanceA = create Object_A with ReferenceA = Test     &\
                                        IntegerA   = 1        &\
                                        TextA      = "Verify" &\
                                        ColourA    = ''Red''

   # Check that the instance contains the correct data
   InstA = find-one Object_A where ReferenceA = Test

   if InstA != UNDEFINED then 

      if InstA.ReferenceA = Test then

         if InstA.TextA = "Verify" then

            if InstA.ColourA != ''Red'' then
               Has_Failed   = TRUE
               Failure_Code = -10
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = -20
         endif

      else
         Has_Failed   = TRUE  
         Failure_Code = -30
      endif

   else
      Has_Failed   = TRUE
      Failure_Code = -40
   endif


   if !Has_Failed then
      [] = RPT2:Test_Passed["objA", Test, 0]
   else
      [] = RPT3:Test_Failed["objA", Test, Failure_Code]
   endif

   Test = Test + 1

# End Test 1

#------------------------------------------------------------------------#
# Test 2 - Create, specifing all attributes
#------------------------------------------------------------------------#

   # Invoke terminator to call report domain
   [] = RPT1:Start_Test[Test, "Null Requid", "Creation Deletion", "objA", "Sync Create multi attribute write"]


   # Fault_Flag = FALSE

   # Perform creation
   #   new_instanceA = create Object_A with ReferenceA = Test  &\
   #                                        IntegerA = 1       &\
   #                                        TextA = "Verify"   &\
   #                                        ColourA = ''Red''

   # Check that the instance contains the correct data
   #   an_instanceA = find-one Object_A where ReferenceA = Test


   # Multiple attribute write
   #   xI = 2
   #   xR = Test
   #   xS = "Test 2 A"
   #   xC = ''Green''   

   #   an_instanceA.[ReferenceA, IntegerA, TextA, ColourA] = [xR, xI, xS, xC]
   #   an_instanceA.[ReferenceA, IntegerA, TextA, ColourA] = [xR, xI, xS, ''Green'']


   #   aID = an_instanceA.ReferenceA
   #   anI = an_instanceA.IntegerA
   #   aS  = an_instanceA.TextA
   #   aC  = an_instanceA.ColourA

   #   if aID = Test then
   #      if anI = 2 then
   #         if aS = "Test 2 A" then
   #            if aC != ''Green'' then
   #               Fault_Flag = TRUE
   #            endif
   #         else
   #            Fault_Flag = TRUE
   #         endif
   #      else
   #         Fault_Flag = TRUE
   #      endif
   #   else
   #      Fault_Flag = TRUE
   #   endif

   #if !Fault_Flag then
   #   [] = RPT2:Test_Passed["objA", Test, 0]
   #else
   #   [] = RPT3:Test_Failed["objA", Test, -20]
   #endif

   [] = RPT4:Test_Unsupported[Test]

   Test = Test + 1

# End Test 2

#------------------------------------------------------------------------#
# Test 3 - Create, Only specifing the preferred identifier
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0511", "Creation Deletion", "objA", "Sync create specifying only preferred id"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0101"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0102"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0109"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0118"]

   # Perform creation
   new_instanceA = create Object_A with ReferenceA = Test

   # Check that the instance contains the correct data
   InstA = find-one Object_A where ReferenceA = Test

   if InstA.ReferenceA != Test then
      [] = RPT3:Test_Failed["objA", Test, -10]
   else
      [] = RPT2:Test_Passed["objA", Test, 0]
   endif

# End Test 3

#------------------------------------------------------------------------#

Returned_Test_Number = Test

',3,'',"00000000-0000-0000-0000-000000000000",2,1 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-0000000001c3","00000000-0000-0000-0000-000000000034",'do_sync_create_unique','',"ba5eda7a-def5-0000-0000-000000000000",0,'#------------------------------------------------------------------------#
# Create unique, without specifing preferred identifier
#------------------------------------------------------------------------#

   Test = Test_Number

#------------------------------------------------------------------------#
# Test 1
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0511", "Creation Deletion", "objB", "Create unique no preferred id"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0311"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0101"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0102"]
   [] = RPT8:Specify_Requid[Test, "1101-0000-01-0118"]

   Has_Failed = FALSE

   Failure_Code = -1

   # create two initial instances
   count = 0
   
   loop
     count = count + 1
     new_B = create unique Object_B
     breakif count >= 2
   endloop

   # Create a set of instances to check for uniqueness of the new instance
   {beforeB} = find-all Object_B

   # Perform creation
   new_instanceB = create unique Object_B with IntegerA = Test 
 
   # this will be the third instance

   # Find the newly created instance
   an_instanceB = find-one Object_B where IntegerA = Test

   # Check that it was created and is unique
   if an_instanceB = UNDEFINED then
      Has_Failed   = TRUE
      Failure_Code = -10 
   else
      # Check that its was created with the correct data
      if an_instanceB.IntegerA != Test then
         Has_Failed   = TRUE
         Failure_Code = -20
      endif

      # Check that the identifier is unique
      for each_beforeB in {beforeB} do

         if each_beforeB.ReferenceB = new_instanceB.ReferenceB then
            Has_Failed   = TRUE
            Failure_Code = -30
         endif

      endfor

   endif

   if !Has_Failed then
      [] = RPT2:Test_Passed["objB", Test, 0]
   else
      [] = RPT3:Test_Failed["objB", Test, Failure_Code]
   endif

   Test = Test + 1

# End Test 1

#------------------------------------------------------------------------#
# Test 2 - Create unique, specifing the preferred identifier
#          THIS TEST SHOULD CAUSE A COMPILE TIME ERROR, SINCE THE 
#          PREFERRED IDENTIFIER HAS BEEN GIVEN IN THE ''CREATE UNIQUE''
#          STATEMENT
#------------------------------------------------------------------------#

   Failure_Code = -1
   Has_Failed   = FALSE

   [] = RPT1:Start_Test[Test, "1103-0000-01-0511", "Creation Deletion", "objB", "Create unique incorrectly specifying pref id"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0101"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0102"]
   [] = RPT8:Specify_Requid[Test, "1101-0000-01-0118"]

   #Create a set of instances to check for uniqueness of the new instance
   {beforeB} = find-all Object_B 

   # There should be 3 instances in this set check that this is the case.
   number_in_B = countof{beforeB}

   if number_in_B !=3 then
      Has_Failed   = TRUE
      Failure_Code = -10
   endif

   # There is a possibility that this will create an instance with a 
   # non-unique instance, so fix ReferenceB such that it shouldn''t
   # have the same identifier as any future test.

   # Obviously, we can''t guarantee this, but let''s have a damn good try.

   Reference_B = Test * Test

   # Perform creation
   new_instanceB = create unique Object_B with ReferenceB = Reference_B &\
                                               IntegerA   = Test

   # Find the newly created instance
   an_instanceB = find-one Object_B where IntegerA = Test

   # Check that it was created and is unique
   if an_instanceB = UNDEFINED then
        Has_Failed   = TRUE
        Failure_Code = -20
   else

      # Check that its was created with the correct data
      if an_instanceB.IntegerA != Test then
         Has_Failed   = TRUE
         Failure_Code = -30
      endif

      #Check that the identifier is unique
      for each_beforeB in {beforeB} do

         if each_beforeB.ReferenceB = new_instanceB.ReferenceB then
            Has_Failed   = TRUE
            Failure_Code = -40
         endif

      endfor

   endif

   if !Has_Failed then
      [] = RPT2:Test_Passed["objB", Test, 0]
   else
      [] = RPT3:Test_Failed["objB", Test, Failure_Code]
   endif

   Test = Test + 1

# End Test 2

#------------------------------------------------------------------------#
# Test 3 - Create two unique, check for unique id''s
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0511", "Creation Deletion", "objB", "Create two unique no attributes"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0101"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0102"]
   [] = RPT8:Specify_Requid[Test, "1101-0000-01-0118"]

   Has_Failed   = FALSE
   Failure_Code = -1

   # Create a set of instances to check for uniqueness of the new instance
   {beforeB} = find-all Object_B

   # Perform creation
   new_instanceB         = create unique Object_B
   another_new_instanceB = create unique Object_B

   # Check that it was created and is unique
   if new_instanceB = UNDEFINED  then
      Has_Failed   = TRUE
      Failure_Code = -10
   else

      if another_new_instanceB = UNDEFINED then
         Has_Failed   = TRUE
         Failure_Code = -20
      else

         # Check that the identifier is unique

         # Note that this isn''t always a failure of the I-OOA or
         # WACA. A previous test had tried to specify the preferred
         # identifier during a create unique. This is against the rule
         # of SM OOA, but can be done. So if this fails here, have a look
         # at the preferred identifier being the same in the earlier test.

         for each_beforeB in {beforeB} do

            if each_beforeB.ReferenceB = new_instanceB.ReferenceB then
               Has_Failed   = TRUE
               Failure_Code = -30
            endif

            if each_beforeB.ReferenceB = another_new_instanceB.ReferenceB then
               Has_Failed   = TRUE
               Failure_Code = -40
            endif

         endfor

         # But of it fails here, it definately IS a problem.

         if another_new_instanceB.ReferenceB = new_instanceB.ReferenceB then
            Has_Failed   = TRUE
            Failure_Code = -50
         endif  

      endif

   endif

   if !Has_Failed then
      [] = RPT2:Test_Passed["objB", Test, 0]
   else
      [] = RPT3:Test_Failed["objB", Test, Failure_Code]
   endif

# End Test 3

#------------------------------------------------------------------------#

Returned_Test_Number = Test',3,'',"00000000-0000-0000-0000-000000000000",2,1 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-0000000001d6","00000000-0000-0000-0000-00000000003f",'do_create_unique_mult','',"ba5eda7a-def5-0000-0000-000000000000",0,'#------------------------------------------------------------------------#
# Create unique state where the object has multiple preferred identifiers
#------------------------------------------------------------------------#

   Test = Test_Number

   [] = RPT1:Start_Test[Test, "Null Requid", "Creation Deletion", "objC", "Create unique using multiple ids"]

   [] = RPT4:Test_Unsupported[Test]

   Returned_Test_Number = Test

#------------------------------------------------------------------------#
',3,'',"00000000-0000-0000-0000-000000000000",2,1 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-0000000001e7","00000000-0000-0000-0000-00000000004a",'Colourize_It','',"ba5eda7a-def5-0000-0000-000000000000",0,'#------------------------------------------------------------------------#
# Colouize_It Object Sync Service
#------------------------------------------------------------------------#

   Test = Test_Number

#------------------------------------------------------------------------#
# Test 1 - Create MtoM assoc specify attributes
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0511", "Creation Deletion", "Coloured_Object", "Create MtoM assoc specify attributes"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0521"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0522"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0102"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0101"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0116"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0117"]
   [] = RPT8:Specify_Requid[Test, "1101-0000-01-0122"]

   a_chicken_flavour = create Flavoured_Object   with Flavoured   = ''chicken''
   a_red_colour      = create Coloured_Object    with Coloured    = ''red''
   a_red_chicken     = create Flavour_and_Colour with Dish_Number = 201

   # Set attribute using instance handle
   a_chicken_flavour.How_Spicy = 2

   # Set attribute using object specification
   # Unsupported.
   # Coloured_Object.Intensity = 2 where Coloured = red

   a_red_colour.Intensity = 2

   # Check that attributes have been set correctly
   Has_Failed = FALSE

   if a_red_chicken.Dish_Number = 201 then

      if a_chicken_flavour.How_Spicy = 2 then
 
         if a_red_colour.Intensity != 2 then
            Has_Failed   = TRUE  
            Failure_Code = -10
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -20
      endif

   else
      Has_Failed   = TRUE
      Failure_Code = -30
   endif

   if !Has_Failed then
      [] = RPT2:Test_Passed["Coloured", Test, 0]
   else
      [] = RPT3:Test_Failed["Coloured", Test, Failure_Code]
   endif

   delete a_chicken_flavour
   delete a_red_colour
   delete a_red_chicken

   Test = Test + 1

# End Test 1

#------------------------------------------------------------------------#
# Test 2 - 
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0511", "Creation Deletion", "Coloured_Object", "Setup and link m to m"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0521"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0522"]
   [] = RPT8:Specify_Requid[Test, "1101-0000-01-0122"]

   coffee_flavour  = create Flavoured_Object with Flavoured = ''coffee''
   fish_flavour    = create Flavoured_Object with Flavoured = ''fish''
   chicken_flavour = create Flavoured_Object with Flavoured = ''chicken'' & How_Spicy = 1 
   coffee_flavour  = create Flavoured_Object with Flavoured = ''coffee''  & How_Spicy = 2 
   fish_flavour    = create Flavoured_Object with Flavoured = ''fish''    & How_Spicy = 3 

   blue_colour  = create Coloured_Object with Coloured = ''blue''  & Intensity = 1
   red_colour   = create Coloured_Object with Coloured = ''red''   & Intensity = 2
   green_colour = create Coloured_Object with Coloured = ''green'' & Intensity = 3

   the_blue_chicken_dish = 101
   the_blue_coffee_dish  = 102
   the_blue_fish_dish    = 103

   the_red_chicken_dish = 201
   the_red_coffee_dish  = 202 
   the_red_fish_dish    = 203

   the_green_chicken_dish = 301
   the_green_coffee_dish  = 302
   the_green_fish_dish    = 303


   # Create associative objects to use when linking flavoured and coloured objects
   blue_chicken   = create Flavour_and_Colour with Dish_Number = the_blue_chicken_dish
   red_chicken    = create Flavour_and_Colour with Dish_Number = the_red_chicken_dish
   green_chicken  = create Flavour_and_Colour with Dish_Number = the_green_chicken_dish
   blue_coffee    = create Flavour_and_Colour with Dish_Number = the_blue_coffee_dish
   red_coffee     = create Flavour_and_Colour with Dish_Number = the_red_coffee_dish
   green_coffee   = create Flavour_and_Colour with Dish_Number = the_green_coffee_dish
   blue_fish      = create Flavour_and_Colour with Dish_Number = the_blue_fish_dish
   red_fish       = create Flavour_and_Colour with Dish_Number = the_red_fish_dish
   green_fish     = create Flavour_and_Colour with Dish_Number = the_green_fish_dish

   # many to many
   link chicken_flavour R1 blue_colour  using blue_chicken
   link chicken_flavour R1 red_colour   using red_chicken
   link chicken_flavour R1 green_colour using green_chicken

   link coffee_flavour R1 blue_colour  using blue_coffee
   link coffee_flavour R1 red_colour   using red_coffee
   link coffee_flavour R1 green_colour using green_coffee

   link fish_flavour R1 blue_colour  using blue_fish
   link fish_flavour R1 red_colour   using red_fish
   link fish_flavour R1 green_colour using green_fish
 
   {set_of_associated_instances} = find-all Flavour_and_Colour 
   {red_things}          = find Coloured_Object where Coloured = ''red''
   {blue_things}         = find Coloured_Object where Coloured = ''blue''
   {green_things}        = find Coloured_Object where Coloured = ''green''
   {coloured_things}     = find-all Coloured_Object

   {chicken_things}      = find Flavoured_Object where Flavoured = ''chicken''
   {coffee_things}       = find Flavoured_Object where Flavoured = ''coffee''
   {fish_things}         = find Flavoured_Object where Flavoured = ''fish''
   {flavoured_things}    = find-all Flavoured_Object

   # Coloured things in all their glory
   number_of_red_things      = countof {red_things}
   number_of_blue_things     = countof {blue_things}
   number_of_green_things    = countof {green_things}
   number_of_coloured_things = countof{coloured_things}

   # Flavoured things in their entirety.
   number_of_chicken_things = countof {chicken_things}
   number_of_fish_things = countof {fish_things}
   number_of_coffee_things = countof {coffee_things}
   number_of_flavoured_things = countof{flavoured_things}

   number_of_associated_instances = countof {set_of_associated_instances}

   The_Test_Has_Passed = FALSE

   if number_of_associated_instances = 9 then
      
      if number_of_flavoured_things = 5 then

         if number_of_coloured_things = 3 then
            # Test has passed
            The_Test_Has_Passed = TRUE
         endif

      endif
 
   endif

   if The_Test_Has_Passed = TRUE then
      [] = RPT2:Test_Passed["coloured", Test, number_of_associated_instances]
   else
      [] = RPT3:Test_Failed["coloured", Test, -10]
   endif

   Test = Test + 1

# End Test 2

#------------------------------------------------------------------------#
# Test 3 - Navigate from coloured object to associated object
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "Null Requid", "Creation Deletion", "Coloured_Object", "Navigate from coloured object to assoc"]

   Test_Passed_Counter = 0

   for coloured_thing in {coloured_things} do

      The_Test_Has_Passed = FALSE

      # Debug start
      my_colour = coloured_thing.Coloured

      if my_colour = ''red'' then
         colour_string = "Red"
      endif

      if my_colour = ''green'' then
         colour_string = "Green"
      endif

      if my_colour = ''blue'' then
         colour_string = "Blue"
      endif

      # debug end

      {associated_instances} = coloured_thing -> R1.Flavour_and_Colour
      number_of_assoc_instances = countof{associated_instances}

      The_Test_Has_Passed = FALSE

      for assoc_instance in {associated_instances} do
         the_dish = assoc_instance.Dish_Number

         # Use of referential attributes is not permitted.
         # the_assoc_flavour = assoc_instance.Flavoured
         this_flavoured_object = assoc_instance -> R1.Flavoured_Object
         the_assoc_flavour = this_flavoured_object.Flavoured

         the_colour = coloured_thing.Coloured
      
         switch the_colour

         case ''red''

            switch the_assoc_flavour

            case ''chicken''
               if the_dish = the_red_chicken_dish then
                  The_Test_Has_Passed = TRUE
               endif

            case ''fish''
               if the_dish = the_red_fish_dish then
                  The_Test_Has_Passed = TRUE
               endif

             case ''coffee''
                if the_dish = the_red_coffee_dish then
                   The_Test_Has_Passed = TRUE
                endif

             default
                The_Test_Has_Passed = FALSE
             endswitch
 
         case ''blue''

            switch the_assoc_flavour

            case ''chicken''
               if the_dish = the_blue_chicken_dish then
                  The_Test_Has_Passed = TRUE
               endif

            case ''fish''
               if the_dish = the_blue_fish_dish then
                  The_Test_Has_Passed = TRUE
               endif

             case ''coffee''
                if the_dish = the_blue_coffee_dish then
                   The_Test_Has_Passed = TRUE
                endif

             default
                The_Test_Has_Passed = FALSE
             endswitch
 

         case ''green''
            switch the_assoc_flavour

            case ''chicken''
               if the_dish = the_green_chicken_dish then
                  The_Test_Has_Passed = TRUE
               endif

            case ''fish''
               if the_dish = the_green_fish_dish then
                  The_Test_Has_Passed = TRUE
               endif

             case ''coffee''
                if the_dish = the_green_coffee_dish then
                   The_Test_Has_Passed = TRUE
                endif

             default
                The_Test_Has_Passed = FALSE
             endswitch
 

         default

            The_Test_Has_Passed = FALSE

         endswitch

         if The_Test_Has_Passed = TRUE then
            Test_Passed_Counter = Test_Passed_Counter + 1
         else
            Test_Passed_Counter = Test_Passed_Counter - 1
         endif

      endfor

   endfor

   if Test_Passed_Counter = 9 then
      [] = RPT2:Test_Passed["coloured", Test, Test_Passed_Counter]
   else
      [] = RPT3:Test_Failed["coloured", Test, Test_Passed_Counter]
   endif

   Test = Test + 1

# End Test 3

#------------------------------------------------------------------------#
# Test 4 - Navigate from flavoured object to associated object
#------------------------------------------------------------------------#
   
   [] = RPT1:Start_Test[Test, "Null Requid", "Creation Deletion", "Coloured_Object", "Navigate from flavoured object to assoc"]

   Test_Passed_Counter = 0

   for flavoured_thing in {flavoured_things} do

      The_Test_Has_Passed = FALSE

      {associated_instances} = flavoured_thing -> R1.Flavour_and_Colour
      number_of_assoc_instances = countof{associated_instances}

      if number_of_associated_instances = 0 then
         [] = RPT3:Test_Failed["coloured", Test, -2]
      else

         for assoc_instance in {associated_instances} do

            the_dish = assoc_instance.Dish_Number

            # Navigate to the coloured object from the assoc object.

            this_colour = assoc_instance -> R1.Coloured_Object

            if this_colour != UNDEFINED then
               the_assoc_colour = this_colour.Coloured
            endif

            the_flavour = flavoured_thing.Flavoured
      
            switch the_flavour

            case ''chicken''

               switch the_assoc_colour

               case ''green''
                  if the_dish = the_green_chicken_dish then
                     The_Test_Has_Passed = TRUE
                  endif

               case ''blue''
                  if the_dish = the_blue_chicken_dish then
                     The_Test_Has_Passed = TRUE
                  endif

                case ''red''
                   if the_dish = the_red_chicken_dish then
                      The_Test_Has_Passed = TRUE
                   endif

                default
                   The_Test_Has_Passed = FALSE
                endswitch
 
            case ''fish''

               switch the_assoc_colour

               case ''green''
                  if the_dish = the_green_fish_dish then
                     The_Test_Has_Passed = TRUE
                  endif

               case ''blue''
                  if the_dish = the_blue_fish_dish then
                     The_Test_Has_Passed = TRUE
                  endif

               case ''red''
                  if the_dish = the_red_fish_dish then
                     The_Test_Has_Passed = TRUE
                   endif

               default
                  The_Test_Has_Passed = FALSE
               endswitch
 
            case ''coffee''

               switch the_assoc_colour

               case ''green''
                  if the_dish = the_green_coffee_dish then
                     The_Test_Has_Passed = TRUE
                  endif

               case ''blue''
                  if the_dish = the_blue_coffee_dish then
                     The_Test_Has_Passed = TRUE
                  endif

               case ''red''
                  if the_dish = the_red_coffee_dish then
                     The_Test_Has_Passed = TRUE
                  endif

               default
                  The_Test_Has_Passed = FALSE
               endswitch
       
            default 
  
               The_Test_Has_Passed = FALSE

            endswitch
      

            if The_Test_Has_Passed = TRUE then
               Test_Passed_Counter = Test_Passed_Counter + 1
            else
               Test_Passed_Counter = Test_Passed_Counter - 1
            endif

         endfor

      endif

   endfor

   if Test_Passed_Counter = 9 then
      [] = RPT2:Test_Passed["flavoured", Test, Test_Passed_Counter]
   else
      [] = RPT3:Test_Failed["flavoured", Test, Test_Passed_Counter]
   endif 

   Test = Test + 1

# End Test 4

#------------------------------------------------------------------------#
# Test 5 - Navigate from flavoured object to associated object
#------------------------------------------------------------------------#

   chicken_count = 0
   fish_count    = 0
   coffee_count  = 0

   # Navigate from flavoured object to associated object

   The_Test_Has_Passed = FALSE

   [] = RPT1:Start_Test[Test, "Null Requid", "Creation Deletion", "Coloured_Object", "Navigate from assoc object to flavoured"]

   for assoc_thing in {set_of_associated_instances} do

      flavoured_instance = assoc_thing -> R1.Flavoured_Object

      the_flavour = flavoured_instance.Flavoured

      if the_flavour = ''chicken'' then
         chicken_count = chicken_count + 1
      else

         if the_flavour = ''fish'' then
            fish_count = fish_count + 1
         else

            if the_flavour = ''coffee'' then
               coffee_count = coffee_count + 1
            else
               The_Test_Has_Passed = FALSE
            endif

         endif

      endif

   endfor

   if coffee_count = 3 & \
      chicken_count = 3 & \
      fish_count = 3 then
      The_Test_Has_Passed = TRUE
   endif

   if The_Test_Has_Passed = TRUE then
      [] = RPT2:Test_Passed["coloured", Test, 0]
   else
      [] = RPT3:Test_Failed["coloured", Test, -10]
   endif

   Test = Test + 1

# End Test 5

#------------------------------------------------------------------------#
# Test 6 - Navigate from assoc object to coloured
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "Null Requid", "Creation Deletion", "Coloured_Object", "Navigate from assoc object to coloured"]

   red_count   = 0
   blue_count  = 0
   green_count = 0

   The_Test_Has_Passed = FALSE

   # Navigate from assoc object to coloured object
   for assoc_thing in {set_of_associated_instances} do

      coloured_instance = assoc_thing -> R1.Coloured_Object

      the_colour = coloured_instance.Coloured

      if the_colour = ''red'' then
         red_count = red_count + 1
      else

         if the_colour = ''blue'' then
            blue_count = blue_count + 1
         else

            if the_colour = ''green'' then
               green_count = green_count + 1
            else
               The_Test_Has_Passed = FALSE
            endif

         endif

      endif
  
   endfor

   if red_count = 3 & \
      blue_count = 3 & \
      green_count = 3 then
      The_Test_Has_Passed = TRUE
   endif

   if The_Test_Has_Passed = TRUE then
      [] = RPT2:Test_Passed["coloured", Test, 0]
   else
      [] = RPT3:Test_Failed["coloured", Test, -1]
   endif

   Test = Test + 1

# End Test 6

#------------------------------------------------------------------------#
# Test 7 - Unnassociate assoc object
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "Null Requid", "Creation Deletion", "Coloured_Object", "Unnassociate assoc object"]

   Failure_Code = -3

   # Attempt deletion of assoc object and others 
   red_chicken = find-one Flavour_and_Colour where Dish_Number = 201

   # Found exactly one red chicken with a dish number of 201
   # Find the colour and flavour, it should be red and chicken flavoured.
   a_chicken = red_chicken -> R1.Flavoured_Object
   a_red     = red_chicken -> R1.Coloured_Object

   # Stash this value, it''s used in the next test, but unlink and unassociate
   # are inextricably linked and testing them separately can cause differences
   # between WACA and ISIM.
   {before_red_chickens} = a_red -> R1.Flavoured_Object

   # Unassociate the assoc object from the m to m relationship
   unassociate a_chicken R1 a_red from red_chicken 

   # Attempt the navigation again
   an_illegal_chicken = red_chicken -> R1.Flavoured_Object

   if an_illegal_chicken = UNDEFINED then 
      The_Test_Has_Passed = TRUE
      Failure_Code = Failure_Code + 1
   endif

   an_illegal_red = red_chicken -> R1.Coloured_Object

   if an_illegal_red = UNDEFINED then 
      The_Test_Has_Passed = TRUE
      Failure_Code = Failure_Code + 2
   endif

   if The_Test_Has_Passed = TRUE then
      [] = RPT2:Test_Passed["coloured", Test, Failure_Code]
   else
      [] = RPT3:Test_Failed["coloured", Test, Failure_Code]
   endif

   Test = Test + 1

# End Test 7

#------------------------------------------------------------------------#
# Test 8 - Unlink assoc object
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "Null Requid", "Creation Deletion", "Coloured_Object", "Unlink assoc object"]

   Failure_Code = -1

   The_Test_Has_Passed = FALSE

   number_of_red_chickens_before = countof{before_red_chickens}

   # Unlink two instances
   unlink a_chicken R1 a_red

   # Attempt to navigate down remaining links
   {after_red_chickens} = a_red -> R1.Flavoured_Object

   number_of_red_chickens_after = countof{after_red_chickens}

   if number_of_red_chickens_before != number_of_red_chickens_after then 
      The_Test_Has_Passed = TRUE
      Failure_Code = Failure_Code + 1
   endif

   if The_Test_Has_Passed = TRUE then
      [] = RPT2:Test_Passed["coloured", Test, Failure_Code]
   else
      [] = RPT3:Test_Failed["coloured", Test, Failure_Code]
   endif

   Test = Test + 1

# End Test 8

#------------------------------------------------------------------------#
# Test 9 - Delete assoc object
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1241-0000-01-0121", "Creation Deletion", "Coloured_Object", "Delete assoc object"]
   [] = RPT8:Specify_Requid [Test, "1103-0000-01-0531"]

   # a_chicken is still associated with some other coloured_objects
   # also a_red is still associated with some other flavoured_objects
   # but red_chicken isn''t

   delete red_chicken

   # Now try and re-aquire them
   assoc_object = find-one Flavour_and_Colour where Dish_Number = 201

   # Left and right objects are still linked and associated with other instances
   left_object  = find-one Flavoured_Object   where Flavoured = ''chicken''
   right_object = find-one Coloured_Object    where Coloured = ''red''

   The_Test_Has_Passed = FALSE

   if left_object != UNDEFINED then

      if right_object != UNDEFINED then

         if assoc_object = UNDEFINED then
            The_Test_Has_Passed = TRUE
         endif

      endif
   
   endif

   if The_Test_Has_Passed = TRUE then
      [] = RPT2:Test_Passed["coloured", Test, 0]
   else
      [] = RPT3:Test_Failed["coloured", Test, -1]
   endif 

   Test = Test + 1

# End Test 9

#------------------------------------------------------------------------#
# Test 10 - Tidy up and delete all instances.
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1241-0000-01-0121", "Creation Deletion", "Coloured_Object", "Delete everything"]
   [] = RPT8:Specify_Requid [Test, "1103-0000-01-0531"]

   {set_of_assoc} = find-all Flavour_and_Colour

   for each_assoc in {set_of_assoc} do

      # Navigate up the relationship to the two instances
      a_colour  = each_assoc -> R1.Coloured_Object
      a_flavour = each_assoc -> R1.Flavoured_Object

      unassociate a_flavour R1 a_colour from each_assoc

      unlink a_colour R1 a_flavour

      # Get rid of the assoc instance as it is no longer linked to anything.
      delete each_assoc

   endfor

   {set_of_colour} = find-all Coloured_Object

   for each_colour in {set_of_colour} do
      # Navigate up the relationship to the two instances
      {some_flavours} = each_colour -> R1.Flavoured_Object

      for a_flavour in {some_flavours} do
         unlink each_colour R1 a_flavour
      endfor

      # Get rid of the colour instance as it is no longer linked to anything.
      delete each_colour

   endfor

   {set_of_flavour} = find-all Flavoured_Object

   for each_flavour in {set_of_flavour} do
      # Navigate up the relationship to the two instances
      #   a_colour = each_flavour -> R1.Coloured_Object
      #   unlink each_flavour R1 a_colour

      # Get rid of the flavour instance as it is no longer linked to anything.
      delete each_flavour
   endfor

   a_flavour = find-one Flavoured_Object
   a_colour  = find-one Coloured_Object
   assoc     = find-one Flavour_and_Colour

   if a_flavour = UNDEFINED then 

      if a_colour  = UNDEFINED then 

         if assoc     = UNDEFINED then
            [] = RPT2:Test_Passed["coloured ", Test, 0]
         else
            [] = RPT3:Test_Failed["coloured assoc", Test, -1]
         endif

      else
         [] = RPT3:Test_Failed["coloured a_colour", Test, -2]  
      endif

   else
      [] = RPT3:Test_Failed["coloured a_flavour", Test, -3]
   endif

# End Test 10

#------------------------------------------------------------------------#

Returned_Number = Test + 1',3,'',"00000000-0000-0000-0000-000000000000",2,1 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-0000000001ea","00000000-0000-0000-0000-00000000004a",'Regression_Tests',' There is a problem in version 2.0.2 of WACA. This service will attempt to clarify what is going wrong.
',"ba5eda7a-def5-0000-0000-000000000000",0,'Test = Test_Number

#------------------------------------------------------------------------#
# Test 1 - Create Many to Many assoc specify attributes
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0511", "Creation Deletion", "Coloured_Object", "Create MtoM assoc specify attributes"]
   [] = RPT8:Specify_Requid [Test,"1103-0000-01-0521"]
   [] = RPT8:Specify_Requid [Test,"1103-0000-01-0522"]
   [] = RPT8:Specify_Requid [Test,"1103-0000-01-0531"]

   a_chicken_flavour = create Flavoured_Object   with Flavoured   = ''chicken''
   a_red_colour      = create Coloured_Object    with Coloured    = ''red''
   a_red_chicken     = create Flavour_and_Colour with Dish_Number = 201

   # Set attribute using instance handle
   a_chicken_flavour.How_Spicy = 2

   a_red_colour.Intensity = 2

   # Check that attributes have been set correctly
   Has_Failed = FALSE

   if a_red_chicken.Dish_Number = 201 then

      if a_chicken_flavour.How_Spicy = 2 then

         if a_red_colour.Intensity != 2 then
            Has_Failed   = TRUE
            Failure_Code = -10
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -20
      endif

   else
      Has_Failed   = TRUE
      Failure_Code = -30
   endif

   if !Has_Failed then
      [] = RPT2:Test_Passed["Coloured", Test, 0]
   else
      [] = RPT3:Test_Failed["Coloured", Test, Failure_Code]
   endif

   delete a_chicken_flavour
   delete a_red_colour
   delete a_red_chicken

   Test = Test + 1

# End Test 1

#------------------------------------------------------------------------#
# Test 2 - Full delete of all instances
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0531", "Creation Deletion", "Coloured_Object", "Full delete of all instances"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0121"]

   # All flavours and colours and associated instances should now be in the
   # bin, mouldering quietly.

   # Prove it.

   {faded_set_of_colours}       = find-all Coloured_Object
   {mouldering_set_of_flavours} = find-all Flavoured_Object
   {mouldered_and_faded}        = find-all Flavour_and_Colour

   no_of_faded               = countof {faded_set_of_colours}
   no_of_mouldered           = countof {mouldering_set_of_flavours}
   no_of_mouldered_and_faded = countof {mouldered_and_faded}

   if no_of_faded = 0 then

      if no_of_mouldered = 0 then

        if no_of_mouldered_and_faded = 0 then
           [] = RPT2:Test_Passed["Full Delete", Test, 0]     
         else
            [] = RPT3:Test_Failed["Mouldered And Faded", Test, no_of_mouldered_and_faded]
         endif

      else
         [] = RPT3:Test_Failed["Mouldered Still Exists", Test, no_of_mouldered]
      endif

   else
      [] = RPT3:Test_Failed["Faded Still Exists", Test, no_of_faded]
   endif

   Test = Test + 1

# End Test 2

#------------------------------------------------------------------------#
# Test 3 - Link new instances
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "Null Requid", "Creation Deletion", "Coloured_Object", "Link new instances"]

   # Having established that in the previous test these appear to have been deleted, 
   # create a new flavour, colour, flavoured_and_coloured situation and see
   # if the link has been really freshly created, or is there some baggage?

   a_new_blue_colour  = create Coloured_Object    with Coloured    = ''blue'' & Intensity = 1
   a_new_fish_flavour = create Flavoured_Object   with Flavoured   = ''fish'' & How_Spicy = 1
   a_new_blue_fish    = create Flavour_and_Colour with Dish_Number = 202

   # link the relationship
   link a_new_fish_flavour R1 a_new_blue_colour using a_new_blue_fish

   # Navigate from the blue colour to the set of associated instances. Don''t rely
   # on a find for the instance handle for the blue object, we already know it.

   {new_associated_instances} = a_new_blue_colour -> R1.Flavour_and_Colour

   # There should only be one blue fish associated instance handle in the set

   no_of_new_associated_instances = countof {new_associated_instances}

   if no_of_new_associated_instances = 1 then
      [] = RPT2:Test_Passed["Link new instance", Test, 0]
   else

      # There is more of these than there should be. Schlepper off down the 
      # link and see what is on the other side. If the dish number is either 201 
      # or 202, then it means that the data is still visible, and not just some
      # hyperspace value.

      for unwanted_instance in {new_associated_instances} do
         [] = RPT5:Test_Text[unwanted_instance.Dish_Number, "found this assoc instance"]
      endfor

      [] = RPT3:Test_Failed["Link new instance", Test, no_of_new_associated_instances]
   endif

   # Get rid of the latest instances.

   unassociate a_new_fish_flavour R1 a_new_blue_colour from a_new_blue_fish
   unlink a_new_fish_flavour R1 a_new_blue_colour
   delete a_new_fish_flavour
   delete a_new_blue_colour
   delete a_new_blue_fish

   # We know that these may still exist, and so cause a future test to fail.

   Test = Test + 1

# End Test 3

#------------------------------------------------------------------------#
# Test 4 - Setup and link m to m
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "Null Requid", "Creation Deletion", "Coloured_Object", "Setup and link m to m"]

   chicken_flavour = create Flavoured_Object with Flavoured = ''chicken'' & How_Spicy = 1 
   coffee_flavour  = create Flavoured_Object with Flavoured = ''coffee''  & How_Spicy = 2 
   fish_flavour    = create Flavoured_Object with Flavoured = ''fish''    & How_Spicy = 3 

   blue_colour  = create Coloured_Object with Coloured = ''blue''  & Intensity = 1
   red_colour   = create Coloured_Object with Coloured = ''red''   & Intensity = 2
   green_colour = create Coloured_Object with Coloured = ''green'' & Intensity = 3

   the_blue_chicken_dish = 101
   the_blue_coffee_dish  = 102
   the_blue_fish_dish    = 103

   the_red_chicken_dish = 201
   the_red_coffee_dish  = 202
   the_red_fish_dish    = 203

   the_green_chicken_dish = 301
   the_green_coffee_dish  = 302
   the_green_fish_dish    = 303


   # Create associative objects to use when linking flavoured and coloured objects

   blue_chicken  = create Flavour_and_Colour with Dish_Number = the_blue_chicken_dish
   red_chicken   = create Flavour_and_Colour with Dish_Number = the_red_chicken_dish
   green_chicken = create Flavour_and_Colour with Dish_Number = the_green_chicken_dish

   blue_coffee  = create Flavour_and_Colour with Dish_Number = the_blue_coffee_dish
   red_coffee   = create Flavour_and_Colour with Dish_Number = the_red_coffee_dish
   green_coffee = create Flavour_and_Colour with Dish_Number = the_green_coffee_dish

   blue_fish  = create Flavour_and_Colour with Dish_Number = the_blue_fish_dish
   red_fish   = create Flavour_and_Colour with Dish_Number = the_red_fish_dish
   green_fish = create Flavour_and_Colour with Dish_Number = the_green_fish_dish

   # many to many
   link chicken_flavour R1 blue_colour  using blue_chicken
   link chicken_flavour R1 red_colour   using red_chicken
   link chicken_flavour R1 green_colour using green_chicken

   link coffee_flavour R1 blue_colour  using blue_coffee
   link coffee_flavour R1 red_colour   using red_coffee
   link coffee_flavour R1 green_colour using green_coffee

   link fish_flavour R1 blue_colour  using blue_fish
   link fish_flavour R1 red_colour   using red_fish
   link fish_flavour R1 green_colour using green_fish

   {set_of_associated_instances} = find-all Flavour_and_Colour 

   {red_things}          = find Coloured_Object where Coloured = ''red''
   {blue_things}         = find Coloured_Object where Coloured = ''blue''
   {green_things}        = find Coloured_Object where Coloured = ''green''

   {chicken_things}      = find Flavoured_Object where Flavoured = ''chicken''
   {coffee_things}       = find Flavoured_Object where Flavoured = ''coffee''
   {fish_things}         = find Flavoured_Object where Flavoured = ''fish''

   {flavoured_things}    = find-all Flavoured_Object
   {coloured_things}     = find-all Coloured_Object

   number_of_red_things           = countof {red_things}
   number_of_blue_things          = countof {blue_things}
   number_of_green_things         = countof {green_things}
   number_of_coloured_things      = countof {coloured_things}
   number_of_chicken_things       = countof {chicken_things}
   number_of_fish_things          = countof {fish_things}
   number_of_coffee_things        = countof {coffee_things}
   number_of_flavoured_things     = countof {flavoured_things}
   number_of_associated_instances = countof {set_of_associated_instances}

   Has_Failed = FALSE

   if number_of_associated_instances = 9 then

      if number_of_flavoured_things = 3 then

         if number_of_coloured_things != 3 then
            Has_Failed   = TRUE
            Failure_Code = -10
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -20
      endif

   else
      Has_Failed   = TRUE
      Failure_Code = -30
   endif

   if !Has_Failed then
      [] = RPT2:Test_Passed["coloured", Test, 0]
   else
      [] = RPT3:Test_Failed["coloured", Test, Failure_Code]
   endif

   Test = Test + 1

# End Test 4

#------------------------------------------------------------------------#
# Test 5 - Navigate from coloured object to associated object
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "Null Requid", "Creation Deletion", "Coloured_Object", "Navigate from coloured object to assoc"]

   Test_Passed_Counter = 0

   for coloured_thing in {coloured_things} do

      The_Test_Has_Passed = FALSE

      my_colour = coloured_thing.Coloured

      # Perform the navigation to find the set of associated instances.
      {associated_instances} = coloured_thing -> R1.Flavour_and_Colour
      number_of_assoc_instances = countof{associated_instances}

      The_Test_Has_Passed = FALSE

      for assoc_instance in {associated_instances} do

         the_dish = assoc_instance.Dish_Number

         this_flavour = assoc_instance -> R1.Flavoured_Object

         if this_flavour != UNDEFINED then
            the_assoc_flavour = this_flavour.Flavoured
         endif

         the_colour = coloured_thing.Coloured
      
         switch the_colour

            case ''red''

               switch the_assoc_flavour

                  case ''chicken''

                     if the_dish = the_red_chicken_dish then
                        The_Test_Has_Passed = TRUE
                     endif

                  case ''fish''

                     if the_dish = the_red_fish_dish then
                        The_Test_Has_Passed = TRUE
                     endif

                  case ''coffee''

                     if the_dish = the_red_coffee_dish then
                        The_Test_Has_Passed = TRUE
                     endif

                  default

                     The_Test_Has_Passed = FALSE
               endswitch
 
            case ''blue''

               switch the_assoc_flavour

                  case ''chicken''

                     if the_dish = the_blue_chicken_dish then
                        The_Test_Has_Passed = TRUE
                     endif

                  case ''fish''

                     if the_dish = the_blue_fish_dish then
                        The_Test_Has_Passed = TRUE
                     endif

                  case ''coffee''

                     if the_dish = the_blue_coffee_dish then
                        The_Test_Has_Passed = TRUE
                     endif

                  default
                     The_Test_Has_Passed = FALSE
               endswitch
 
            case ''green''

               switch the_assoc_flavour

                  case ''chicken''

                     if the_dish = the_green_chicken_dish then
                        The_Test_Has_Passed = TRUE
                     endif

                  case ''fish''

                     if the_dish = the_green_fish_dish then
                        The_Test_Has_Passed = TRUE
                     endif

                  case ''coffee''

                     if the_dish = the_green_coffee_dish then
                        The_Test_Has_Passed = TRUE
                     endif

                  default
                     The_Test_Has_Passed = FALSE
               endswitch
 

            default
               The_Test_Has_Passed = FALSE
         endswitch

         if The_Test_Has_Passed = TRUE then
            Test_Passed_Counter = Test_Passed_Counter + 1
         else
            Test_Passed_Counter = Test_Passed_Counter - 1
         endif

      endfor
 
   endfor

   if Test_Passed_Counter = 9 then
      [] = RPT2:Test_Passed["coloured", Test, Test_Passed_Counter]
   else
      [] = RPT3:Test_Failed["coloured", Test, Test_Passed_Counter]
   endif

   Test = Test + 1

# End Test 5

#------------------------------------------------------------------------#
# Test 6 - Tidy up and delete all instances.
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0531", "Creation Deletion", "Coloured_Object", "Delete everything"]
   [] = RPT8:Specify_Requid [Test, "1241-0000-01-0121"]
   {set_of_assoc} = find-all Flavour_and_Colour

   for each_assoc in {set_of_assoc} do

      # Navigate up the relationship to the two instances
      a_colour  = each_assoc -> R1.Coloured_Object
      a_flavour = each_assoc -> R1.Flavoured_Object

      unassociate a_flavour R1 a_colour from each_assoc

      unlink a_colour R1 a_flavour

      # Get rid of the assoc instance as it is no longer linked to anything.
      delete each_assoc

      {any_more_flavours} = a_colour -> R1.Flavoured_Object
      {any_more_colours}  = a_flavour -> R1.Coloured_Object

      if countof {any_more_flavours} = 0 then
         # This instance of colour is not linked to any more flavours.
         delete a_colour
      endif

      if countof {any_more_colours} = 0 then
         # This instance of flavour is not linked to any more colours.
         delete a_flavour
      endif

   endfor

   a_flavour = find-one Flavoured_Object
   a_colour  = find-one Coloured_Object
   assoc     = find-one Flavour_and_Colour

   if a_flavour = UNDEFINED then

      if a_colour  = UNDEFINED then

         if assoc != UNDEFINED then
            [] = RPT3:Test_Failed["Coloured", Test, -10]
         else
            [] = RPT2:Test_Passed["Coloured", Test, 0]
         endif

      else
         [] = RPT3:Test_Failed["Coloured", Test, -20]
      endif

   else
      [] = RPT3:Test_Failed["Coloured", Test, -30]
   endif

#------------------------------------------------------------------------#

Returned_Test_Number = Test + 1',3,'',"00000000-0000-0000-0000-0000000001e7",2,2 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-0000000001fb","00000000-0000-0000-0000-000000000055",'do_deletion_tests','',"ba5eda7a-def5-0000-0000-000000000000",0,'#------------------------------------------------------------------------#
# do deletion tests
#------------------------------------------------------------------------#

   Test = Test_Number

   # Preparation for instance deletion

   count = 8

   loop
      find_and_delete_D = create Object_D with ReferenceD = count &\
                                               IntegerA   = count
      count = count - 1
      breakif count = 0
   endloop

#------------------------------------------------------------------------#
# Test 1 - Attempt to delete an instance of Object_D where the condition 
#          is unfulfilled, NO INSTANCE DELETED
#
#          FOR THE PURPOSES OF THIS TEST, ONLY A SINGLE INSTANCE DELETION 
#          IS REQUIRED.
#
# Note : The ISIM seems to have a problem attempting to delete an instance
#        that isn''t there. So there must be a check performed for the
#        existance of an instance before squashing it.
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "Null Requid", "Creation Deletion", "objD find and delete", "A is False"]
   has_failed = FALSE

   # Establish how many instances already exist
   {before_setD} = find-all Object_D

   an_instanceD = find-one Object_D where ReferenceD > 100

   if an_instanceD != UNDEFINED then
      delete an_instanceD
      has_failed = TRUE
   endif

   # Check that no instance have been deleted
   {after_setD} = find-all Object_D

   if countof {before_setD} != countof {after_setD} then
     has_failed = TRUE
   endif

   if !has_failed then
      [] = RPT2:Test_Passed["objD", Test, 0]
   else
      [] = RPT3:Test_Failed["objD", Test, -10]
   endif

   Test = Test + 1

# End Test 1

#------------------------------------------------------------------------#
# Test 2 - Attempt to delete an instance of Object_D where only one of the
#          conditions are fulfilled, NO INSTANCE DELETED
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "Null Requid", "Creation Deletion", "objD find and delete", "A and B is False"]

   has_failed = FALSE

   Failure_Code = (-2)

   # Establish how many instances already exist
   {before_setD} = find-all Object_D

   # Perform a find where before deleting the instance of Object_D (TB)
   an_instanceD = find-one Object_D where ReferenceD = 1 & IntegerA = 30

   # There must be a check to prevent attempted deletion of
   # an instance that doesn''t exist.

   if an_instanceD != UNDEFINED then
      delete an_instanceD
      Failure_Code = Failure_Code + 1
   endif

   # Check that no instance have been deleted
   {after_setD} = find-all Object_D

   if countof {before_setD} != countof {after_setD} then
      [] = RPT3:Test_Failed["objD", Test, Failure_Code]
   else
      [] = RPT2:Test_Passed["objD", Test, 0]
   endif

   Test = Test + 1

# End Test 2

#------------------------------------------------------------------------#
# Test 3  - Attempt to delete an instance of Object_D where only one of 
#           the ''and'' conditions are fulfilled, NO INSTANCE DELETED
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "Null Requid",  "Creation Deletion", "objD find and delete", "A and  BorC is False"]

   has_failed = FALSE
   Failure_Code = (-2)

   # Establish how many instances already exist
   {before_setD} = find-all Object_D

   # Perform test
   an_instanceD = find-one Object_D where IntegerA = 30 & (ReferenceD = 1 | ReferenceD = 2)

   if an_instanceD != UNDEFINED then
      # Try and delete the instance. This is a failure, as the find should 
      # not have actually found an instance.
      delete an_instanceD
      Failure_Code = Failure_Code + 1
   endif

   # Check that no instance have been deleted
   {after_setD} = find-all Object_D

   if countof{before_setD} != countof{after_setD} then
      [] = RPT3:Test_Failed["objD", Test, Failure_Code]
   else
      [] = RPT2:Test_Passed["objD", Test, 0]
   endif

   Test = Test + 1

# End Test 3
 
#------------------------------------------------------------------------#
# Test 4 - Delete single instance
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0531", "Creation Deletion", "ObjD find and delete", "Delete single instance"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0121"]

   Failure_Code = (-5)

   # Find the instance using only one attribute.
   an_instanceD = find-one Object_D where ReferenceD = 1

   # Find all instances in the set before any deletions take place.
   {Before_Deletion} = find-all Object_D

   if an_instanceD = UNDEFINED then
      Failure_Code = Failure_Code + 1
   else
      # Delete the instance found, which does exist.
      delete an_instanceD

      # Check that it has been deleted, by checking first against the
      # used attribute; ReferenceD, and then by the unused attribute; IntegerA.
      an_instanceD = find-one Object_D where ReferenceD = 1

      if an_instanceD = UNDEFINED then
         an_instanceAD = find-one Object_D where IntegerA = 1

         if an_instanceAD = UNDEFINED then
            # Use the find operation on the set to prove that the instance has gone
            # from within the set.

            {After_Deletion} = find-all Object_D

            if countof {Before_Deletion} != countof {After_Deletion} then
               Failure_Code = 0
            else
               Failure_Code = Failure_Code + 2
            endif

         else
            Failure_Code = Failure_Code + 3
         endif

      else
         Failure_Code = Failure_Code + 4
      endif

   endif

   if Failure_Code = 0 then
      [] = RPT2:Test_Passed["objD", Test, Failure_Code]
   else
      [] = RPT3:Test_Failed["objD", Test, Failure_Code]
   endif

   Test=Test + 1

# End Test 4

#------------------------------------------------------------------------#
# Test 5 -Delete instance of Object_D where multiple condition are
#         fulfilled
#         ONE INSTANCE IS DELETED
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1241-0000-01-0121", "Creation Deletion", "ObjD find and delete", "single instance multiple conditions met"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0531"]

   has_failed = FALSE

   # Establish how many instances already exist
   {before_setD} = find-all Object_D

   #Find an instanceD using find where before attempting to delete. (TB)
   an_instanceD = find-one Object_D where ReferenceD = 2 & IntegerA = 2

   if an_instanceD != UNDEFINED then
      delete an_instanceD
   endif

   # We are more concerened that the instance in question has actually been deleted, rather
   # than an instance has been deleted from the set. To this end, we shall check that
   # the specific instance in question really has bitten the dust.
   Should_Be_Deleted = find-one Object_D where ReferenceD = 2 & IntegerA = 2

   if Should_Be_Deleted != UNDEFINED then
      [] = RPT3:Test_Failed["objD", Test, -8]
      has_failed = TRUE
   endif
	
   {after_setD} = find-all Object_D

   if countof {before_setD} = countof {after_setD} then
      [] = RPT3:Test_Failed["objD", Test, -9]
      has_failed = TRUE
   endif

   #Ensure that the correct instance was deleted
   for each_instanceD in {after_setD} do
      if each_instanceD.ReferenceD = 2 then
		         	    
         [] = RPT3:Test_Failed["objD", Test, -10]
         has_failed = TRUE

      endif

   endfor

   if !has_failed then
      [] = RPT2:Test_Passed["objD", Test,0]
   endif

   Test=Test + 1

#End Test 5

#------------------------------------------------------------------------#
# Test 6 - Delete instance of Object_D where multiple condition are 
#          fulfilled
#          ONE INSTANCE IS DELETED
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0532", "Creation Deletion", "objD find and delete","delete 1 instance where multiple conditions fulfilled"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0121"]

   has_failed = FALSE

   # Establish how many instances already exist
   {before_setD} = find-all Object_D

   # Not currently supported by code gen.
   #   delete Object_D where ReferenceD = 7 & (IntegerA = 30 | IntegerA = 7)
   # Neither is this
   delete Object_D where ReferenceD = 7 & IntegerA = 30
   delete Object_D where ReferenceD = 7 & IntegerA = 7

   # Check that no instance have been deleted
   {after_setD} = find-all Object_D
   size_after = (countof {after_setD}) + 1

   if countof {before_setD} = countof {after_setD} then
       [] = RPT3:Test_Failed["objD", Test, -13]
       has_failed = TRUE
   endif

   #Ensure that the correct instance was deleted
   for each_instanceD in {after_setD} do

      if each_instanceD.ReferenceD = 7 then
          [] = RPT3:Test_Failed["objD", Test, -14]
          has_failed = TRUE
      endif

   endfor

   if !has_failed then
      [] = RPT2:Test_Passed["objD", Test,0]
   endif

   Test = Test + 1

# End Test 6

#------------------------------------------------------------------------#
# Test 7 - Delete an instance of Object_D
#          ONE INSTANCE IS DELETED
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "Null Requid", "Creation Deletion", "objD find and delete", "Deletion of one instance"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0121"]

   has_failed = FALSE

   # Establish how many instances already exist
   {before_setD} = find-all Object_D

   # Find an instance to delete
   an_instanceD = find-one Object_D where ReferenceD = 8

   # Perform test
   if an_instanceD !=UNDEFINED then
      delete an_instanceD
   endif

   # Check that no instance have been deleted
   {after_setD} = find-all Object_D
   size_after = (countof {after_setD}) + 1

   if countof {before_setD} != size_after then

      [] = RPT3:Test_Failed["objD", Test,-15]
      has_failed = TRUE

   endif

   # Ensure that the correct instance was deleted
   for each_instanceD in {after_setD} do

      if each_instanceD.ReferenceD = 8 then
         [] = RPT3:Test_Failed["objD", Test, -16]
         has_failed = TRUE
      endif

   endfor

   if !has_failed then
      [] = RPT2:Test_Passed["objD", Test, 0]
   endif

# End Test 7

#------------------------------------------------------------------------#
# Preparation for instance deletion
#------------------------------------------------------------------------#

count = 8
loop
   find_and_delete_D = create Object_D with ReferenceD = count &\
                               IntegerA = count
   count = count - 1
   breakif count = 0
endloop

#------------------------------------------------------------------------#
# Test 8
# Attempt to delete an instance of Object_D where the condition is
# unfulfilled, NO INSTANCE DELETED
#
# FOR THE PURPOSES OF THIS TEST, ONLY A SINGLE INSTANCE DELETION IS 
# REQUIRED.
#
# Note : The ISIM seems to have a problem attempting to delete an instance
#        that isn''t there. So there must be a check performed for the
#        existance of an instance before squashing it.
#------------------------------------------------------------------------#

   Test = Test + 1

   [] = RPT1:Start_Test[Test, "1103-0000-01-0532", "Creation Deletion", "delete where", "A is False"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0121"]

   has_failed = FALSE

   # Establish how many instances already exist
   {before_setD} = find-all Object_D

   # Perform test
   delete Object_D where ReferenceD > 100

   # Check that no instance have been deleted
   {after_setD} = find-all Object_D
   if countof {before_setD} != countof {after_setD} then
     [] = RPT3:Test_Failed["objD", Test, -1]
     has_failed = TRUE
   endif

   if !has_failed then
      [] = RPT2:Test_Passed["objD", Test, 0]
   endif

#End Test 8

#------------------------------------------------------------------------#
# Test 9 - Attempt to delete an instance of Object_D where only one of the
#          conditions are fulfilled, NO INSTANCE DELETED
#------------------------------------------------------------------------#

   Test = Test + 1

   [] = RPT1:Start_Test[Test, "Null Requid", "Creation Deletion", "objD delete where", "A and B is False"]

   has_failed = FALSE

   Failure_Code = (-2)

   # Establish how many instances already exist
   {before_setD} = find-all Object_D

   # Perform test
   delete Object_D where ReferenceD = 1 & IntegerA = 30

   # Check that no instance have been deleted
   {after_setD} = find-all Object_D

   if countof {before_setD} != countof {after_setD} then
      [] = RPT3:Test_Failed["objD", Test, Failure_Code]
   else
      [] = RPT2:Test_Passed["objD", Test, 0]
   endif

#End Test 9

#------------------------------------------------------------------------#
# Test 10 - Attempt to delete an instance of Object_D where only one of 
#          the ''and'' conditions are fulfilled, NO INSTANCE DELETED
#------------------------------------------------------------------------#

   Test= Test + 1

   [] = RPT1:Start_Test[Test, "Null Requid",  "Creation Deletion", "delete where", "A and BorC is False"]

   has_failed = FALSE
   Failure_Code = (-2)

   # Establish how many instances already exist
   {before_setD} = find-all Object_D

   # Perform test
   delete Object_D where IntegerA = 30 & (ReferenceD = 1 | ReferenceD = 2)

   # Check that no instance have been deleted
   {after_setD} = find-all Object_D

   # Also this will prove that the function count-of can be used like this
   # without having recourse to a local temp variable or two. It is the only
   # function so far that can be used like this.

   if countof{before_setD} != countof{after_setD} then
      [] = RPT3:Test_Failed["objD", Test, Failure_Code]
   else
      [] = RPT2:Test_Passed["objD", Test, 0]
   endif

# End Test 10
 
#------------------------------------------------------------------------#
# Test 11
#------------------------------------------------------------------------#

   Test = Test + 1
   [] = RPT1:Start_Test[Test, "1103-0000-01-0532", "Creation Deletion", "ObjD delete where", "delete single instance"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0121"]

   Failure_Code = (-5)

   # Find all instances in the set before any deletions take place.
   {Before_Deletion} = find-all Object_D

   # Delete the instance found, which does exist.
   delete Object_D where ReferenceD = 1

   # Check that it has been deleted, by checking first against the
   # used attribute; ReferenceD, and then by the unused attribute; IntegerA.
   an_instanceD = find-one Object_D where ReferenceD = 1

   if an_instanceD = UNDEFINED then
      an_instanceAD = find-one Object_D where IntegerA = 1

      if an_instanceAD = UNDEFINED then
         # Use the find operation on the set to prove that the instance has gone
         # from within the set.
         {After_Deletion} = find-all Object_D

         if countof {Before_Deletion} != countof {After_Deletion} then
            Failure_Code = 0
         else
            Failure_Code = Failure_Code + 2
         endif

      else
         Failure_Code = Failure_Code + 3
      endif

   else
      Failure_Code = Failure_Code + 4
   endif

   if Failure_Code = 0 then
      [] = RPT2:Test_Passed["objD", Test, Failure_Code]
   else
      [] = RPT3:Test_Failed["objD", Test, Failure_Code]
   endif

# End Test 11
#------------------------------------------------------------------------#
# Test 12 - Delete instance of Object_D where multiple condition are 
#           fulfilled
#           ONE INSTANCE IS DELETED
#------------------------------------------------------------------------#

   Test=Test + 1
   [] = RPT1:Start_Test[Test, "1103-0000-01-0532", "Creation Deletion", "ObjD delete where", "single instance multiple conditions met"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0121"]

   has_failed = FALSE

   # Establish how many instances already exist
   {before_setD} = find-all Object_D

   # Perform test
   # Find an instanceD using find where before attempting to delete. (TB)
   delete Object_D where ReferenceD = 2 & IntegerA = 2

   # We are more concerened that the instance in question has actually been deleted, rather
   # than an instance has been deleted from the set. To this end, we shall check that
   # the specific instance in question really has bitten the dust.

   Should_Be_Deleted = find-one Object_D where ReferenceD = 2 & IntegerA = 2

   if Should_Be_Deleted != UNDEFINED then
      [] = RPT3:Test_Failed["objD", Test, -8]
      has_failed = TRUE
   endif
	
   {after_setD} = find-all Object_D

   if countof {before_setD} = countof {after_setD} then
      [] = RPT3:Test_Failed["objD", Test, -9]
      has_failed = TRUE
   endif

   #Ensure that the correct instance was deleted
   for each_instanceD in {after_setD} do

      if each_instanceD.ReferenceD = 2 then
         [] = RPT3:Test_Failed["objD", Test, -10]
         has_failed = TRUE
      endif

   endfor

   if !has_failed then
      [] = RPT2:Test_Passed["objD", Test,0]
   endif

# End Test 12

#------------------------------------------------------------------------#
# Test 13 - Delete instance of Object_D where multiple condition are 
#           fulfilled
#           ONE INSTANCE IS DELETED
#------------------------------------------------------------------------#

   Test = Test + 1

   [] = RPT1:Start_Test[Test, "1103-0000-01-0532", "Creation Deletion", "objD delete where ","single instance deleted"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0121"]

   has_failed = FALSE

   # Establish how many instances already exist
   {before_setD} = find-all Object_D

   #Perform test
   delete Object_D where ReferenceD = 7 & (IntegerA = 30 | IntegerA = 7)

   # Check that no instance have been deleted
   {after_setD} = find-all Object_D

   if countof {before_setD} = countof {after_setD} then
       [] = RPT3:Test_Failed["objD", Test, -13]
       has_failed = TRUE
   endif

   #Ensure that the correct instance was deleted
   for each_instanceD in {after_setD} do

      if each_instanceD.ReferenceD = 7 then
          [] = RPT3:Test_Failed["objD", Test, -14]
          has_failed = TRUE
      endif

   endfor

   if !has_failed then
      [] = RPT2:Test_Passed["objD", Test,0]
   endif

# End Test 13

#------------------------------------------------------------------------#
# Test 14 - Delete an instance of Object_D
#           ONE INSTANCE IS DELETED
#------------------------------------------------------------------------#

   Test = Test + 1

   [] = RPT1:Start_Test[Test, "1103-0000-01-0532", "Creation Deletion", "objD delete where", "Deletion of one instance"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0121"]

   has_failed = FALSE

   # Establish how many instances already exist
   {before_setD} = find-all Object_D

   # Find an instance to delete
   delete Object_D where ReferenceD = 8

   # Check that no instance have been deleted
   {after_setD} = find-all Object_D

   if countof {before_setD} = countof {after_setD} then
      [] = RPT3:Test_Failed["objD", Test,-15]
      has_failed = TRUE
   endif

   # Ensure that the correct instance was deleted
   for each_instanceD in {after_setD} do

      if each_instanceD.ReferenceD = 8 then
         [] = RPT3:Test_Failed["objD", Test, -16]
         has_failed = TRUE
      endif

   endfor

   if !has_failed then
      [] = RPT2:Test_Passed["objD", Test, 0]
   endif

# End Test 14

#------------------------------------------------------------------------#
# Test 15 - Deletion of all remaining instances.
#------------------------------------------------------------------------#

   Test = Test + 1
   
   [] = RPT1:Start_Test[Test, "1103-0000-01-0532", "Creation Deletion", "objD delete", "All remaining instance handles"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0121"]

   {before_operation} = find-all Object_D

   # Use for making sure that all remaining instances have actually been deleted.
   what_we_want = 0

   has_failed = FALSE

   Failure_Code = 0

   # Delete all remaining instances. Or at least all thise whose ReferencD
   # attribute is less than 100. This should be all of them.
   delete Object_D where ReferenceD < 100

   {after_operation} = find-all Object_D

   # None have been deleted
   if countof {before_operation} = countof {after_operation} then
      has_failed = TRUE
      Failure_Code = (-1)
   else
      # Try and find any instance, doesn''t matter what it''s attributes are.
      any_instance = find-one Object_D

      # The instance is still defined.
      if any_instance != UNDEFINED then
         Failure_Code = (-2)
         has_failed = TRUE
      else
         # An instance has been found.
         if what_we_want != countof {after_operation} then
            Failure_Code = (-3)
            has_failed = TRUE
         endif

      endif

   endif

   if has_failed = TRUE then
      [] = RPT3:Test_Failed["ObjD", Test, Failure_Code]
   else
      [] = RPT2:Test_Passed["ObjD", Test, Failure_Code]
   endif

# End Test 15

#------------------------------------------------------------------------#
# Test 16 - Deallocation of instance handles
#------------------------------------------------------------------------#

   Test = Test + 1

   [] = RPT1:Start_Test[Test, "1241-0000-01-0120", "Creation Deletion", "objD delete", "Deallocation of instance handles"]
   [] = RPT5:Test_Text[Test, "Deallocation of instance handles is unsupported"]
   [] = RPT4:Test_Unsupported[Test]

#------------------------------------------------------------------------#

Returned_Test_Number = Test 

#Tests Complete

',3,'',"00000000-0000-0000-0000-000000000000",2,1 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-0000000001fe","00000000-0000-0000-0000-000000000055",'do_multiple_deletion_tests',' This service shall prove that deletion of multiple instances from a
 set is correct.
',"ba5eda7a-def5-0000-0000-000000000000",0,'#------------------------------------------------------------------------#
# do multiple deletion tests
#------------------------------------------------------------------------#

   Test = Test_Number

   # Preparation for instance deletion
   count = 10

   loop
      find_and_delete_D = create Object_D with ReferenceD = count &\
                                               IntegerA = count
      count = count - 1
      breakif count = 0
   endloop

#------------------------------------------------------------------------#
# Test 1 - Fully specify both instances
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0532", "Creation Deletion", "objD multiple delete", "Fully specify both instances"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0121"]
   [] = RPT8:Specify_Requid[Test, "1101-0000-01-0122"]

   # Delete two instances that meet the search criteria
   {before_operation} = find-all Object_D

   # Use for making sure that only two instances have actually been deleted.
   what_we_want = countof {before_operation}
   what_we_want = what_we_want - 2

   has_failed = FALSE
  
   failure_code = 0

   # Delete two instances where both attributes for both instances are specified.
   delete Object_D where (ReferenceD = 1 & IntegerA = 1) | (ReferenceD = 2 & IntegerA = 2)

   {after_operation} = find-all Object_D

   # None have been deleted
   if countof {before_operation} = countof {after_operation} then
      has_failed = TRUE
      failure_code = (-1)
   else
      # Try and find the instances directly
      first_instance  = find-one Object_D where ReferenceD = 1 & IntegerA = 1
      second_instance = find-one Object_D where ReferenceD = 2 & IntegerA = 2

      if first_instance != UNDEFINED then
         failure_code = (-2)
         has_failed = TRUE
      else

         if second_instance != UNDEFINED then
            failure_code = (-3)
            has_failed = TRUE
         else
            # More or less than two instances have been deleted
            if what_we_want != countof {after_operation} then
               failure_code = (-4)
               has_failed = TRUE
            endif
   
         endif

      endif

   endif

   if has_failed = TRUE then
      [] = RPT3:Test_Failed["ObjD", Test, failure_code]
   else
      [] = RPT2:Test_Passed["ObjD", Test, failure_code]
   endif

# End Test 1

#------------------------------------------------------------------------#
# Test 2
#------------------------------------------------------------------------#

   Test = Test + 1

   [] = RPT1:Start_Test[Test, "1103-0000-01-0532", "Creation Deletion", "objD multiple delete", "Diff attributes diff instances"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0121"]
   [] = RPT8:Specify_Requid[Test, "1101-0000-01-0122"]

   # Delete two instances that meet the search criteria
   {before_operation} = find-all Object_D

   # Use for making sure that only two instances have actually been deleted.
   what_we_want = countof {before_operation}
   what_we_want = what_we_want - 2

   has_failed = FALSE

   failure_code = 0

   # Delete two instances where one attribute for both instances are specified.
   delete Object_D where ReferenceD = 3 | IntegerA = 4

   {after_operation} = find-all Object_D

   # None have been deleted
   if countof {before_operation} = countof {after_operation} then
      has_failed = TRUE
      failure_code = (-1)
   else
      # Try and find the instances directly
      third_instance  = find-one Object_D where ReferenceD = 3 & IntegerA = 3
      fourth_instance = find-one Object_D where ReferenceD = 4 & IntegerA = 4

      if third_instance != UNDEFINED then
         failure_code = (-2)
         has_failed = TRUE
      else

         if fourth_instance != UNDEFINED then
            failure_code = (-3)
            has_failed = TRUE
         else
            what_we_got = countof {after_operation}

            # More or less than two instances have been deleted
            if what_we_want != what_we_got then
               failure_code = (-4)
               has_failed = TRUE
            endif

         endif

      endif

   endif

   if has_failed = TRUE then
      [] = RPT3:Test_Failed["ObjD", Test, failure_code]
   else
      [] = RPT2:Test_Passed["ObjD", Test, failure_code]
   endif

# End Test 2

#------------------------------------------------------------------------#
# Test 3
#------------------------------------------------------------------------#

   Test = Test + 1

   [] = RPT1:Start_Test[Test, "1103-0000-01-0532", "Creation Deletion", "objD multiple delete", "Same attribute diff instances"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0121"]
   [] = RPT8:Specify_Requid[Test, "1101-0000-01-0122"]

   # Delete two instances that meet the search criteria
   {before_operation} = find-all Object_D

   # Use for making sure that only two instances have actually been deleted.
   what_we_want = countof {before_operation}
   what_we_want = what_we_want - 2

   has_failed = FALSE

   failure_code = 0

   # Delete two instances where the same attribute for both instances are specified separately.
   delete Object_D where ReferenceD = 5 | ReferenceD = 6

   {after_operation} = find-all Object_D

   # None have been deleted
   if countof {before_operation} = countof {after_operation} then
      has_failed = TRUE
      failure_code = (-1)
   else
      # Try and find the instances directly
      fifth_instance = find-one Object_D where ReferenceD = 5 & IntegerA = 5
      sixth_instance = find-one Object_D where ReferenceD = 6 & IntegerA = 6

      if fifth_instance != UNDEFINED then
         failure_code = (-2)
         has_failed = TRUE
      else

         if sixth_instance != UNDEFINED then
            failure_code = (-3)
            has_failed = TRUE
         else
            what_we_got = countof {after_operation}

            # More or less than two instances have been deleted
            if what_we_want != what_we_got then
               failure_code = what_we_got - what_we_want
               has_failed = TRUE
            endif

         endif

      endif

   endif

   if has_failed = TRUE then
      [] = RPT3:Test_Failed["ObjD", Test, failure_code]
   else 
      [] = RPT2:Test_Passed["ObjD", Test, failure_code]
   endif

# End Test 3

#------------------------------------------------------------------------#
# Test 4
#------------------------------------------------------------------------#

   # Deletion of set of instance handles is unsupported.
   Test = Test + 1

   [] = RPT1:Start_Test[Test, "Null Requid", "Creation Deletion", "objD multiple delete", "Set of instance handles"]
   [] = RPT4:Test_Unsupported[Test]

# End Test 4

#------------------------------------------------------------------------#
# Test 5
#------------------------------------------------------------------------#

   # Deletion of all remaining instances.

   Test = Test + 1

   [] = RPT1:Start_Test[Test, "1103-0000-01-0532", "Creation Deletion", "objD multiple delete", "All remaining instance handles"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0121"]
   [] = RPT8:Specify_Requid[Test, "1101-0000-01-0122"]
   {before_operation} = find-all Object_D

   # Use for making sure that all remaining instances have actually been deleted.
   what_we_want = 0

   has_failed = FALSE

   failure_code = 0

   # Delete all remaining instances where ReferenceD is less than 100, 
   # should be all of them.
   delete Object_D where ReferenceD < 100

   {after_operation} = find-all Object_D

   # None have been deleted
   if countof {before_operation} = countof {after_operation} then
      has_failed = TRUE
      failure_code = (-1)
   else
      # Try and find any instance, doesn''t matter what it''s attributes are.
      any_instance = find-one Object_D

       # The instance is still defined.
      if any_instance != UNDEFINED then
         failure_code = (-2)
         has_failed = TRUE
      else
         # An instance has been found.
         if what_we_want != countof {after_operation} then
            failure_code = (-3)
            has_failed = TRUE
         endif

      endif

   endif

   if has_failed = TRUE then
      [] = RPT3:Test_Failed["ObjD", Test, failure_code]
   else
      [] = RPT2:Test_Passed["ObjD", Test, failure_code]
   endif

# End Test 5

#------------------------------------------------------------------------#

Returned_Test_Number = Test 

#Tests Complete

',3,'',"00000000-0000-0000-0000-0000000001fb",2,2 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-000000000345","00000000-0000-0000-0000-000000000081",'Test_the_Doctors_Mettle','',"ba5eda7a-def5-0000-0000-000000000000",0,'#------------------------------------------------------------------------#
# Test The Doctors Metal Object Sync Service
#------------------------------------------------------------------------#

   Test = Test_Number

#------------------------------------------------------------------------#
# Test 1 - Test the creation and deletion of one to many associated 
#          relationships
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0511", "Creation Deletion", "Doctor", "1 to Many associative"]

   # Define the doctor.
   the_doctor_ih = create Doctor with Actor = ''Tom_Baker''   and length_of_scarf = 20
   the_doctor_ih = create Doctor with Actor = ''Jon_Pertwee'' and length_of_scarf = 10

   # Define some bad guys to test him
   cybermen_ih   = create Enemy with Humanoid = TRUE  & can_climb_stairs = TRUE
   daleks_ih     = create Enemy with Humanoid = FALSE & can_climb_stairs = FALSE
   the_master_ih = create Enemy with Humanoid = TRUE  & can_climb_stairs = TRUE

   # Define the associated instance which captures the spirit of the battle 
   cybermen_vs_the_doctor_ih     = create Doctors_Enemy with battlefield_arena = ''Earth'' 
   daleks_vs_the_doctor_ih       = create Doctors_Enemy with battlefield_arena = ''Skarros'' 
   the_master_vs_the_doctor_ih   = create Doctors_Enemy with battlefield_arena = ''Gallifrey'' 

   tom_as_the_doctor = find-one Doctor where Actor = ''Tom_Baker''
   jon_as_the_doctor = find-one Doctor where Actor = ''Jon_Pertwee''

   # link using specific ih of tom as the doctor.
   link tom_as_the_doctor R2 cybermen_ih   using cybermen_vs_the_doctor_ih
   link tom_as_the_doctor R2 daleks_ih     using daleks_vs_the_doctor_ih
   link tom_as_the_doctor R2 the_master_ih using the_master_vs_the_doctor_ih

   # Find out how many enemies the doctor has
   {toms_enemies} = tom_as_the_doctor -> R2.Enemy
   {jons_enemies} = jon_as_the_doctor -> R2.Enemy

   number_of_toms_enemies = countof{toms_enemies}
   number_of_jons_enemies = countof{jons_enemies}

   if number_of_toms_enemies = 3 then

      if number_of_jons_enemies = 0 then
         [] = RPT2:Test_Passed["Doctor", Test, 0]
      else
         [] = RPT3:Test_Failed["Doctor", Test, number_of_jons_enemies]
      endif

   else
      [] = RPT3:Test_Failed["Doctor", Test, number_of_jons_enemies]
   endif 

   Test = Test + 1

# End Test 1

#------------------------------------------------------------------------#
# Test 2 - Do it again, this time using the doctor ih to link, and see 
#          which one it uses.
#
#          This can not be checked for WACA version 5.0.0 as referential 
#          attributes are no longer supported.
#          check that assoc.Actor = the_doctor_ih.Actor
# 
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0511", "Creation Deletion", "Doctor", "Create assoc not specifying attributes"]

   sea_devils_ih = create Enemy with Humanoid = FALSE & can_climb_stairs = FALSE
   davros_ih     = create Enemy with Humanoid = TRUE  & can_climb_stairs = FALSE
   silurians_ih  = create Enemy with Humanoid = FALSE & can_climb_stairs = TRUE

   sea_devils_vs_the_doctor_ih = create Doctors_Enemy with battlefield_arena = ''Underwater'' 
   davros_vs_the_doctor_ih     = create Doctors_Enemy with battlefield_arena = ''Wheelchair'' 
   silurians_vs_the_doctor_ih  = create Doctors_Enemy with battlefield_arena = ''Venus'' 

   # link using doctor ih of the doctor. This should have picked up
   # Jon Pertwee as the doctor, since this was the most recent creation.
   link the_doctor_ih R2 sea_devils_ih using sea_devils_vs_the_doctor_ih
   link the_doctor_ih R2 davros_ih     using davros_vs_the_doctor_ih
   link the_doctor_ih R2 silurians_ih  using silurians_vs_the_doctor_ih

   # However, the Actor attribute set in the assoc creation will be different
   # from that of the Actor attribute set up with Jon Pertwee''s version
   # of the doctor. The Humanoid attribute will be different, too.

   # Let''s see what happens.

   Has_Failed = FALSE

   Failure_Code = 0

   # Hijack this test to prove that we can still get to the attributes that were referential
   # for the associative object, via the R2 relationship. So in real terms, this information
   # is still accessable, just a little more awkward.
   {enemies_vs_jon_the_doctor} = find Doctors_Enemy where battlefield_arena != ''Underwater''

for enemy_of_jon in {enemies_vs_jon_the_doctor} do

if enemy_of_jon != UNDEFINED then

   which_doctor = enemy_of_jon -> R2.Doctor
   which_enemy  = enemy_of_jon -> R2.Enemy

   if which_doctor != UNDEFINED &\
      which_enemy  != UNDEFINED then

      if which_doctor.Actor   = ''Jon_Pertwee'' & \
         which_enemy.Humanoid = TRUE then 

         # This should only find one instance relationship where the doctor is Jon Pertwee
         # the enemy is Davros and the battlefield upon which they fought was not underwater.

         Failure_Code = Failure_Code + 1

      endif

   endif


endif

endfor


   if Failure_Code = 1 then
      [] = RPT2:Test_Passed["Doctor", Test, 0]
   else
      [] = RPT3:Test_Failed["Doctor", Test, Failure_Code]
   endif

   Test = Test + 1

# End Test 2



#------------------------------------------------------------------------#
# Test 4 - Create assoc specifying attributes
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "Null Requid", "Creation Deletion", "Doctor", "Create assoc specifying attributes"]

   # Continuing on using the previous theme, let''s see if the many side of R2
   # can be found.

   [] = RPT5:Test_Text[Test, "create assoc specifying attributes"]

   {bad_guys} = find-all Enemy

   # Using the criteria that only davros, cybermen and the master are humanoid as 
   # defined at creation of the enemy instance. The definition of the associated 
   # instance is the opposite, ie davros, cybermen and the master are NOT humanoid.
   # This should prove that the associated instance does not take-on the ''many''
   # definition of the attribute. Basically, it is the same as the previous test,
   # only more complicated.

   # The_Test_Has_Passed = TRUE
   # Failure_Code = 0
   # for bad_guy in {bad_guys} do
      # Navigate from bad guy to associated doctors enemy
      # the_doctors_enemy = bad_guy -> R2.Doctors_Enemy
      #   if bad_guy.Humanoid = TRUE then 
      #      The_Test_Has_Passed = FALSE
      #      Failure_Code = Failure_Code - 1
      #      switch the_doctors_enemy.battlefield_arena
      #      case ''Earth''
#         [] = RPT5:Test_Text[Test, "ERROR  cybermen are masquerading as non humanoid"]
#      case ''Underwater''
#         [] = RPT5:Test_Text[Test, "ERROR  sea devils is masquerading as humanoid"]
#      case ''Wheelchair''
#         [] = RPT5:Test_Text[Test, "ERROR  Davros is masquerading as non humanoid"]
#      case ''Skarros''
#         [] = RPT5:Test_Text[Test, "ERROR  Daleks are masquerading as humanoid"]
#      case ''Venus''
#         [] = RPT5:Test_Text[Test, "ERROR  Silurians are masquerading as humanoid"]
#      case ''Gallifrey''
#         [] = RPT5:Test_Text[Test, "ERROR  The Master is masquerading as non humanoid"]
#      default
#         [] = RPT5:Test_Text[Test, "ERROR  something else is masquerading as an unknown instance"]
#      endswitch
#   endif
#endfor
#if The_Test_Has_Passed = TRUE then
#   [] = RPT2:Test_Passed["Doctor", Test, 0]
#else
#   [] = RPT3:Test_Failed["Doctor", Test, Failure_Code]
#endif

[] = RPT4:Test_Unsupported[Test]

Test = Test + 1

# End Test 4

#------------------------------------------------------------------------#
# Test 5 - 
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "Null Requid", "Creation Deletion", "Doctor", "1 to Many associative "]

   # create some more associative instances, but this time, don''t attempt to
   # specify any attributes.
 
   [] = RPT5:Test_Text[Test, "create assoc but do not specify attributes"]

   # create a new doctor
   patrick_the_doctor = create Doctor with Actor           = ''Patrick_Troughton'' &\
                                           length_of_scarf = 1

   # The Brigadier wasn''t really an enemy, but I''ve run out of bad guys
   skeksis       = create Enemy with Humanoid = TRUE & can_climb_stairs = FALSE
   the_brigadier = create Enemy with Humanoid = TRUE & can_climb_stairs = TRUE
   # and the Skeksis were in The Dark Crystal, but hey, it''s only a model.

   skeksis_vs_the_doctor       = create Doctors_Enemy with battlefield_arena = ''Gallifrey'' 
   the_brigadier_vs_the_doctor = create Doctors_Enemy with battlefield_arena = ''Earth''

   The_Test_Has_Passed = TRUE
   Failure_Code = -36

   link patrick_the_doctor R2 skeksis       using skeksis_vs_the_doctor
   link patrick_the_doctor R2 the_brigadier using the_brigadier_vs_the_doctor

   # Navigating from the doctor to the doctors_enemy
   {the_doctors_enemies} = patrick_the_doctor -> R2.Doctors_Enemy

   # Navigating from a set of enemies to the doctor_enemy
   skeksis_are_the_enemies_of_the_doctor    = skeksis -> R2.Doctors_Enemy
   the_brigadier_is_the_enemy_of_the_doctor = the_brigadier -> R2.Doctors_Enemy

   if skeksis_are_the_enemies_of_the_doctor != UNDEFINED & \
      the_brigadier_is_the_enemy_of_the_doctor != UNDEFINED then

      if skeksis_are_the_enemies_of_the_doctor.battlefield_arena != \
         the_brigadier_is_the_enemy_of_the_doctor.battlefield_arena then

         if countof{the_doctors_enemies} = 2 then

            for the_doctors_enemy in {the_doctors_enemies} do
               this_doctor = the_doctors_enemy -> R2.Doctor
   
               if this_doctor.Actor = ''Patrick_Troughton'' then
                  The_Test_Has_Passed = TRUE
                  Failure_Code = 0
               else
                  The_Test_Has_Passed = FALSE
                  Failure_Code = -4
               endif

            endfor
      
         else
            The_Test_Has_Passed = FALSE
            Failure_Code = -3
         endif

      else
         The_Test_Has_Passed = FALSE
         Failure_Code = -2
      endif

   else
      The_Test_Has_Passed = FALSE
      Failure_Code = -1
   endif


#for the_doctors_enemy in {the_doctors_enemies} do
#   if the_doctors_enemy.Actor = patrick_the_doctor.Actor then
      # The associated attributes have been set by the architecture, illegally.
#      Failure_Code =  Failure_Code + 1
#      The_Test_Has_Passed = FALSE
#   endif
#endfor

# ###############################################################################
#
# The following statements were an attempt to show that a referential attribute
# had been set by the architecture. This can neither be proven or not.
# Referential attributes can not read from or written to. So..... we can''t tell!
#
# ###############################################################################


# Humanoid attribute has been written into the associated object attribute
#if skeksis_are_the_enemies_of_the_doctor.Humanoid = skeksis.Humanoid then
#   Failure_Code = Failure_Code + 10
#   The_Test_Has_Passed = FALSE
#endif

# Humanoid attribute has been written into the associated object attribute
#if the_brigadier_is_the_enemy_of_the_doctor.Humanoid = the_brigadier.Humanoid then 
#   Failure_Code = Failure_Code + 20
#   The_Test_Has_Passed = FALSE
#endif


if The_Test_Has_Passed = TRUE then
   [] = RPT2:Test_Passed["Doctor", Test, 0]
else
   [] = RPT3:Test_Failed["Doctor", Test, Failure_Code]
endif


Test = Test + 1

# End Test 5

#------------------------------------------------------------------------#
# Test 6 - 
#------------------------------------------------------------------------#
  
   [] = RPT1:Start_Test[Test, "Null Requid", "Creation Deletion", "Doctor", "Delete assoc instances"]
   [] = RPT5:Test_Text[Test,"Delete last enemy leaving first one"]

   The_Test_Has_Passed = TRUE

{patricks_enemies} = patrick_the_doctor -> R2.Enemy

number_of_enemies_before = countof{patricks_enemies}

unassociate patrick_the_doctor R2 the_brigadier from the_brigadier_vs_the_doctor

unlink patrick_the_doctor R2 the_brigadier

delete the_brigadier

delete the_brigadier_vs_the_doctor

# There should only be one enemy for patrick the doctor now.

{patricks_enemies} = patrick_the_doctor -> R2.Enemy

number_of_enemies_after = countof{patricks_enemies}

if number_of_enemies_after = number_of_enemies_before then

   The_Test_Has_Passed = FALSE
   Failure_Code = number_of_enemies_after 

endif

if The_Test_Has_Passed = TRUE then
   [] = RPT2:Test_Passed["Doctor", Test, 0]
else
   [] = RPT3:Test_Failed["Doctor", Test, Failure_Code]
endif


# ##############################################################################

Test = Test + 1
[] = RPT1:Start_Test[Test, "Null Requid", "Creation Deletion", "Doctor", "Delete assoc instances"]

[] = RPT5:Test_Text[Test,"Prove that delete worked"]

The_Test_Has_Passed = TRUE
Failure_Code = -15

# The brigadier should have been demoted.
if the_brigadier != UNDEFINED then

   The_Test_Has_Passed = FALSE
   Failure_Code = Failure_Code + 1

endif

# The associated instance of the brigadier vs the doctor should be no more.
if the_brigadier_vs_the_doctor != UNDEFINED then
   The_Test_Has_Passed = FALSE
   Failure_Code = Failure_Code + 2

endif

# Skeksis should still be around causing the doctor some problems.
if skeksis = UNDEFINED then 
   The_Test_Has_Passed = FALSE
   Failure_Code = Failure_Code + 3

endif

# Get rid of the remaining bad guys, the assoc instance and Patrick Troughton

unassociate patrick_the_doctor R2 skeksis from skeksis_vs_the_doctor

unlink patrick_the_doctor R2 skeksis

delete skeksis_vs_the_doctor
delete skeksis
delete patrick_the_doctor

if skeksis               != UNDEFINED &\
   skeksis_vs_the_doctor != UNDEFINED &\
   patrick_the_doctor    != UNDEFINED then 

   The_Test_Has_Passed = FALSE
   Failure_Code = Failure_Code + 7

endif

if The_Test_Has_Passed = TRUE then
   [] = RPT2:Test_Passed["Doctor", Test, 0]
else
   [] = RPT3:Test_Failed["Doctor", Test, Failure_Code]
endif



# ##############################################################################

Test = Test + 1

[] = RPT1:Start_Test[Test, "Null Requid", "Creation Deletion", "Doctor", "Delete assoc instances"]

[] = RPT5:Test_Text[Test,"delete first element from a list of three"]

The_Test_Has_Passed = TRUE
Failure_Code = -4

#Tom Baker''s enemies numbered three. Cybermen, Daleks and The Master

{toms_enemies_before} = tom_as_the_doctor -> R2.Enemy

number_of_toms_enemies_before = countof {toms_enemies_before}

unassociate tom_as_the_doctor R2 cybermen_ih from cybermen_vs_the_doctor_ih

unlink tom_as_the_doctor R2 cybermen_ih

delete cybermen_vs_the_doctor_ih

delete cybermen_ih

# They now number two, Daleks and the Master

{toms_enemies_after} = tom_as_the_doctor -> R2.Enemy

number_of_toms_enemies_after = countof {toms_enemies_after}

if number_of_toms_enemies_after = number_of_toms_enemies_before then
   The_Test_Has_Passed = FALSE
   Failure_Code = Failure_Code + 1
endif

# Attempt to navigate from the doctor to the second (daleks) enemy

daleks = find-one Enemy where Humanoid = FALSE & can_climb_stairs = FALSE
if daleks = UNDEFINED then
   The_Test_Has_Passed = FALSE
   Failure_Code = Failure_Code + 2
endif

if The_Test_Has_Passed = TRUE then
   [] = RPT2:Test_Passed["Doctor", Test, 0]
else
   [] = RPT3:Test_Failed["Doctor", Test, Failure_Code]
endif


# ##############################################################################

Test = Test + 1
[] = RPT1:Start_Test[Test, "Null Requid", "Creation Deletion", "Doctor", "Delete assoc instances"]

[] = RPT5:Test_Text[Test,"delete middle element from a list"]

The_Test_Has_Passed = TRUE
Failure_Code = -15

#Tom Baker''s enemies numbered two. Daleks and The Master

{toms_enemies_before} = tom_as_the_doctor -> R2.Enemy

number_of_toms_enemies_before = countof {toms_enemies_before}

unassociate tom_as_the_doctor R2 daleks_ih from daleks_vs_the_doctor_ih

unlink tom_as_the_doctor R2 daleks_ih

delete daleks_vs_the_doctor_ih

delete daleks_ih

# They now number one.

{toms_enemies_after} = tom_as_the_doctor -> R2.Enemy

number_of_toms_enemies_after = countof {toms_enemies_after}

if number_of_toms_enemies_after = number_of_toms_enemies_before then
   The_Test_Has_Passed = FALSE
   Failure_Code = Failure_Code + 1
endif

if daleks_ih != UNDEFINED then
   The_Test_Has_Passed = FALSE
   Failure_Code = Failure_Code + 2
endif

if the_master_ih = UNDEFINED then
   The_Test_Has_Passed = FALSE
   Failure_Code = Failure_Code + 4
endif

if tom_as_the_doctor = UNDEFINED then
   The_Test_Has_Passed = FALSE
   Failure_Code = Failure_Code + 8
endif

if The_Test_Has_Passed = TRUE then
   [] = RPT2:Test_Passed["Doctor", Test, 0]
else
   [] = RPT3:Test_Failed["Doctor", Test, Failure_Code]
endif


# ##############################################################################

Test = Test + 1

[] = RPT1:Start_Test[Test, "Null Requid", "Creation Deletion", "Doctor", "Delete assoc instances"]

[] = RPT5:Test_Text[Test,"delete final element in list"]

The_Test_Has_Passed = TRUE
Failure_Code = -4

unassociate tom_as_the_doctor R2 the_master_ih from the_master_vs_the_doctor_ih

unlink tom_as_the_doctor R2 the_master_ih

delete the_master_vs_the_doctor_ih
delete the_master_ih

if the_master_ih != UNDEFINED then
   The_Test_Has_Passed = FALSE
   Failure_Code = Failure_Code + 1
endif

if tom_as_the_doctor = UNDEFINED then
   The_Test_Has_Passed = FALSE
   Failure_Code = Failure_Code + 2
endif

if The_Test_Has_Passed = TRUE then
   [] = RPT2:Test_Passed["Doctor", Test, 0]
else
   [] = RPT3:Test_Failed["Doctor", Test, Failure_Code]
endif



# ##############################################################################

Test = Test + 1
[] = RPT1:Start_Test[Test, "Null Requid", "Creation Deletion", "Doctor", "Delete assoc instances"]

[] = RPT5:Test_Text[Test,"delete 1 of many instance"]

Failure_Code = -2

delete tom_as_the_doctor

if tom_as_the_doctor != UNDEFINED then
   The_Test_Has_Passed = FALSE
   Failure_Code = Failure_Code + 1
endif

if The_Test_Has_Passed = TRUE then
   [] = RPT2:Test_Passed["Doctor", Test, 0]
else
   [] = RPT3:Test_Failed["Doctor", Test, Failure_Code]
endif



# ##############################################################################

Test = Test + 1

# Delete all of Jon Pertwee''s enemies, leaving the universe free of bad guys

The_Test_Has_Passed = TRUE
Failure_Code = -4

[] = RPT1:Start_Test[Test, "Null Requid", "Creation Deletion", "Doctor", "Delete assoc instances"]

[] = RPT5:Test_Text[Test,"delete remaining instances in a set"]

{remaining_enemies}         = find-all Enemy
{remaining_doctors_enemies} = find-all Doctors_Enemy
{remaining_doctors}         = find-all Doctor

# Need to unassociate each associated instance from the 1 to M relationship
# Can''t do it in a set

for remaining_doctors_enemy in {remaining_doctors_enemies} do

   an_enemy   = remaining_doctors_enemy -> R2.Enemy
   the_doctor = remaining_doctors_enemy -> R2.Doctor

   unassociate the_doctor R2 an_enemy from remaining_doctors_enemy

   unlink the_doctor R2 an_enemy

   delete remaining_doctors_enemy
   delete an_enemy
 
   #if the doctor has no more enemies, it is safe to delete him
   {any_more_enemies} = the_doctor -> R2.Enemy

   number_of_more_enemies = countof{any_more_enemies}

   # Kill off the doctor finally. There should be no more doctors to worry about
   # Regeneration is not something this doctor can do!

   if number_of_more_enemies = 0 then
      delete the_doctor
   endif

endfor

# delete the set of doctors (should be 1),
# the set of enemies (should be 3)
# and the set of associated enemies (should be 3)

# This is unsupported at issue 2.0.1

# delete {remaining_doctors_enemies}
# delete {remaining_enemies}
# delete {remaining_doctors}

empty_enemy       = find-one Enemy
empty_doctor      = find-one Doctor
empty_assoc_enemy = find-one Doctors_Enemy


if empty_enemy != UNDEFINED then
   The_Test_Has_Passed = FALSE
   Failure_Code = Failure_Code + 1
endif


if empty_assoc_enemy != UNDEFINED then
   The_Test_Has_Passed = FALSE
   Failure_Code = Failure_Code + 2
endif

if empty_doctor != UNDEFINED then
   The_Test_Has_Passed = FALSE
   Failure_Code = Failure_Code + 4
endif


if The_Test_Has_Passed = TRUE then
   [] = RPT2:Test_Passed["Doctor", Test, 0]
else
   [] = RPT3:Test_Failed["Doctor", Test, Failure_Code]
endif



# ##############################################################################



Returned_Test_Number = Test',3,'',"00000000-0000-0000-0000-000000000000",2,1 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-000000000350","00000000-0000-0000-0000-00000000008c",'verify_deletion','',"ba5eda7a-def5-0000-0000-000000000000",0,'#------------------------------------------------------------------------#
# Verify instance deletion
#------------------------------------------------------------------------#

# Set the fault flag, set to TRUE if a fault has been identified

#------------------------------------------------------------------------#
# Test 1
#------------------------------------------------------------------------#

   # Attempt to find the deleted instance
   an_instanceTS = find-one Termination_State where ReferenceTS = Test

   # Check that the instance was deleted
   if an_instanceTS != UNDEFINED then		         	    
      [] = RPT3:Test_Failed["objTS", Test, -1]
   else     
      [] = RPT2:Test_Passed["objTS", Test, 0]
   endif

# End Test 1

#------------------------------------------------------------------------#

# Test complete
',3,'',"00000000-0000-0000-0000-000000000000",2,1 );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000001b3","00000000-0000-0000-0000-0000000001b2",'Test_Number',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000001b4","00000000-0000-0000-0000-0000000001b2",'Returned_Test_Number',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-0000000001b3",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000001c4","00000000-0000-0000-0000-0000000001c3",'Test_Number',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000001c5","00000000-0000-0000-0000-0000000001c3",'Returned_Test_Number',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-0000000001c4",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000001d7","00000000-0000-0000-0000-0000000001d6",'Test_Number',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000001d8","00000000-0000-0000-0000-0000000001d6",'Returned_Test_Number',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-0000000001d7",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000001e8","00000000-0000-0000-0000-0000000001e7",'Test_Number',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000001e9","00000000-0000-0000-0000-0000000001e7",'Returned_Number',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-0000000001e8",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000001eb","00000000-0000-0000-0000-0000000001ea",'Test_Number',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000001ec","00000000-0000-0000-0000-0000000001ea",'Returned_Test_Number',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-0000000001eb",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000001fc","00000000-0000-0000-0000-0000000001fb",'Test_Number',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000001fd","00000000-0000-0000-0000-0000000001fb",'Returned_Test_Number',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-0000000001fc",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000001ff","00000000-0000-0000-0000-0000000001fe",'Test_Number',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-000000000200","00000000-0000-0000-0000-0000000001fe",'Returned_Test_Number',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-0000000001ff",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-000000000346","00000000-0000-0000-0000-000000000345",'Test_Number',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-000000000347","00000000-0000-0000-0000-000000000345",'Returned_Test_Number',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-000000000346",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-000000000351","00000000-0000-0000-0000-000000000350",'Test',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-000000000006","ba5eda7a-def5-0000-0000-000000000004",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-000000000009","00000000-0000-0000-0000-000000000006",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-00000000000c","00000000-0000-0000-0000-000000000006",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-00000000000f","ba5eda7a-def5-0000-0000-000000000002",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-000000000012","ba5eda7a-def5-0000-0000-000000000004",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-000000000015","ba5eda7a-def5-0000-0000-000000000002",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-000000000018","ba5eda7a-def5-0000-0000-000000000002",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-00000000001b","ba5eda7a-def5-0000-0000-000000000002",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-00000000001e","ba5eda7a-def5-0000-0000-000000000002",0,'' );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000002","00000000-0000-0000-0000-000000000002",'types','',0 );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-000000000021","00000000-0000-0000-0000-000000000002","00000000-0000-0000-0000-000000000002",'Creation_Deletion','masl_domain',0 );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000002",'Creation_Deletion','',0 );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-000000000027","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000002",'Shared','',0 );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-0000000000bf","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000002",'types','',0 );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-0000000000e8","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000002",'functions','',0 );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-000000000141","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000002",'scenarios','',0 );
INSERT INTO S_EDT VALUES ( "00000000-0000-0000-0000-0000000000b8" );
INSERT INTO S_EDT VALUES ( "00000000-0000-0000-0000-0000000000c1" );
INSERT INTO S_EDT VALUES ( "00000000-0000-0000-0000-0000000000c9" );
INSERT INTO S_EDT VALUES ( "00000000-0000-0000-0000-0000000000d0" );
INSERT INTO S_EDT VALUES ( "00000000-0000-0000-0000-0000000000d7" );
INSERT INTO S_EDT VALUES ( "00000000-0000-0000-0000-0000000000de" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000bb",'Sly','',"00000000-0000-0000-0000-0000000000b8","00000000-0000-0000-0000-000000000000" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000bc",'Sandy','',"00000000-0000-0000-0000-0000000000b8","00000000-0000-0000-0000-0000000000bb" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000bd",'Wes','',"00000000-0000-0000-0000-0000000000b8","00000000-0000-0000-0000-0000000000bc" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000c4",'Red','',"00000000-0000-0000-0000-0000000000c1","00000000-0000-0000-0000-000000000000" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000c5",'Green','',"00000000-0000-0000-0000-0000000000c1","00000000-0000-0000-0000-0000000000c4" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000c6",'Blue','',"00000000-0000-0000-0000-0000000000c1","00000000-0000-0000-0000-0000000000c5" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000c7",'Black','',"00000000-0000-0000-0000-0000000000c1","00000000-0000-0000-0000-0000000000c6" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000cc",'red','',"00000000-0000-0000-0000-0000000000c9","00000000-0000-0000-0000-000000000000" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000cd",'blue','',"00000000-0000-0000-0000-0000000000c9","00000000-0000-0000-0000-0000000000cc" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000ce",'green','',"00000000-0000-0000-0000-0000000000c9","00000000-0000-0000-0000-0000000000cd" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000d3",'chicken','',"00000000-0000-0000-0000-0000000000d0","00000000-0000-0000-0000-000000000000" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000d4",'fish','',"00000000-0000-0000-0000-0000000000d0","00000000-0000-0000-0000-0000000000d3" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000d5",'coffee','',"00000000-0000-0000-0000-0000000000d0","00000000-0000-0000-0000-0000000000d4" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000da",'Tom_Baker','',"00000000-0000-0000-0000-0000000000d7","00000000-0000-0000-0000-000000000000" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000db",'Jon_Pertwee','',"00000000-0000-0000-0000-0000000000d7","00000000-0000-0000-0000-0000000000da" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000dc",'Patrick_Troughton','',"00000000-0000-0000-0000-0000000000d7","00000000-0000-0000-0000-0000000000db" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000e1",'Earth','',"00000000-0000-0000-0000-0000000000de","00000000-0000-0000-0000-000000000000" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000e2",'Gallifrey','',"00000000-0000-0000-0000-0000000000de","00000000-0000-0000-0000-0000000000e1" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000e3",'Skarros','',"00000000-0000-0000-0000-0000000000de","00000000-0000-0000-0000-0000000000e2" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000e4",'Wheelchair','',"00000000-0000-0000-0000-0000000000de","00000000-0000-0000-0000-0000000000e3" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000e5",'Underwater','',"00000000-0000-0000-0000-0000000000de","00000000-0000-0000-0000-0000000000e4" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000e6",'Venus','',"00000000-0000-0000-0000-0000000000de","00000000-0000-0000-0000-0000000000e5" );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000000ea","00000000-0000-0000-0000-000000000000",'Create_Report_Object','','# Find out of there already is one of these.
# It is not inconceivable that a report object still exists from a previous run.
# Report objects are not deleted at the end of a run, as certain events may
# still be en-queued.

old_report = find-one Report_Data

if old_report != UNDEFINED then
   delete old_report
endif

My_Report = create unique Report_Data with Reported_Domain_Number = 0

[] = RPT6:Domain_Test_Start["Creation Deletion"]
',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,1 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000000f3","00000000-0000-0000-0000-000000000000",'Delete_Report_Object','','
This_Report = find-one Report_Data

if This_Report != UNDEFINED then

   This_Domain_Identifier = This_Report.Reported_Domain_Number

else

   This_Domain_Identifier = -1

endif

[] = RPT7:Domain_Test_Finished["Creation Deletion", This_Domain_Identifier]

# Do not delete the Report_Data object, as there may be still events in
# the queue.',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,2 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000000f7","00000000-0000-0000-0000-000000000000",'Check_Enum','','switch The_Input_Value

   case ''Sly''
      The_Return_Value = 31
   case ''Sandy''
      The_Return_Value = 32
   case ''Wes''
      The_Return_Value = 33
   default
      The_Return_Value = -31
endswitch',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,3 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000143","00000000-0000-0000-0000-000000000000",'Perform_Creation_Deletion_Tests',' Perform Creation Deletion Tests
','#-------------------------------------------------------------------------------------------#
# This scenario is basically the externals 1..8 incorporated in one scenario. This is done 
# as externals are not supported by the current SWA.
#-------------------------------------------------------------------------------------------#

   # Create all objects to be used in these tests.
 
   Test = 1

   [] = RPT1:Start_Test[Test, "1241-0000-01-0123", "Creation Deletion", "Scenario", "Create instances in scenario"]
  
   testObjA = create Object_A with ReferenceA = 0      &\ 
                                   IntegerA   = 1      &\
                                   TextA      = "Test" &\
                                   BooleanA   = TRUE   &\
                                   ColourA    = ''Red''

   testObjB = create Object_B with ReferenceB = 0   &\
                                   IntegerA   = 100

   if testObjA.ReferenceA = 0 then

      if testObjA.IntegerA = 1 then

         if testObjB.IntegerA = 100 then
 
            if testObjA.TextA = "Test" then

               if testObjA.BooleanA = TRUE then

                  if testObjA.ColourA = ''Red'' then
                     [] = RPT2:Test_Passed["Instance in scenario", Test, 0]
                  else
                     [] = RPT3:Test_Failed["Instance in scenario", Test, -10]
                  endif

               else
                  [] = RPT3:Test_Failed["Instance in scenario", Test, -20]
               endif

            else
               [] = RPT3:Test_Failed["Instance in scenario", Test, -30]
            endif

         else
            [] = RPT3:Test_Failed["Instance in scenario", Test, -40]
         endif

      else
         [] = RPT3:Test_Failed["Instance in scenario", Test, -50]
      endif

   else
      [] = RPT3:Test_Failed["Instance in scenario", Test, -60]
   endif

   # delete the two newly created instances
   delete testObjA
   delete testObjB

#-------------------------------------------------------------------------------------------#

   # Create all objects to be used in these tests.

   Test = 2
   Returned_Test_Number = 2

   [Returned_Test_Number] = objA1:do_sync_create[Test]

   Test = Returned_Test_Number + 1

   [Returned_Test_Number] = objB1:do_sync_create_unique[Test]

   Test = Returned_Test_Number + 1

   [Returned_Test_Number] = objC1:do_create_unique_mult[Test]
  
#-------------------------------------------------------------------------------------------#
# Creation State tests.
# These shall prove that a queue is handled in a correct manner.
# This event should be placed on the queue, and the subsequent generation from within 
# this object placed directly afterwards.
# The second test in the sequence should prove that this has happened as it should start 
# after the first has reported pass/fail.
#-------------------------------------------------------------------------------------------#

   Test = Returned_Test_Number + 1

   # Creation Events are unsupported in WACA.
   [] = RPT1:Start_Test[Test, "1241-0000-01-0203", "Creation Deletion", "objCS", "Generate Creation events"]
   [] = RPT5:Test_Text [Test, "Creation States are unsopported"]

   # Start the test
   # generate objCS1:StartA(Test)

   # Find out how many tests are performed in objCS1:StartA
   [] = RPT4:Test_Unsupported[Test]

   # Test = Test + 1

   # Start the test
   # generate objCS1:StartA(Test)

#-------------------------------------------------------------------------------------------#

   Test = Test + 1
   Returned_Test_Number = 0

   # Perform deletion tests
 
   [Returned_Test_Number] = objD1:do_deletion_tests[Test]

#-------------------------------------------------------------------------------------------#

   Test = Returned_Test_Number + 1

   Returned_Test_Number = 0

   # Perform multiple deletion tests, ie. delete more than one instance at a time
   [Returned_Test_Number] = objD2:do_multiple_deletion_tests[Test]

#-------------------------------------------------------------------------------------------#
# Start termination state tests
#-------------------------------------------------------------------------------------------#

   Test = Returned_Test_Number + 1

   Returned_Test_Number = 0

   has_failed = FALSE

   # Create an instance to delete
   newTS = create Termination_State with ReferenceTS   = Test     &\
                                         Current_State = ''Idle''

   # Start test
   generate objTS3:StartA() to newTS

   Test = Test + 1

#-------------------------------------------------------------------------------------------#

   # Create an instance to delete
   newTS = create Termination_State with ReferenceTS   = Test     &\
                                         Current_State = ''Idle''
 
   generate objTS3:StartA() to newTS

   Test = Test + 1 

#-------------------------------------------------------------------------------------------#
# Perform further creation tests, specifying attributes then attempt to delete the many to 
# many relationship with associated object 
#-------------------------------------------------------------------------------------------#

   Returned_Test_Number = 0

   [Returned_Test_Number] = coloured1:Colourize_It[Test]

#-------------------------------------------------------------------------------------------#
# Perform regression tests to clarify a discrepancy between find-all returning instance 
# handle set and a navigate to a set of instance handles.
#-------------------------------------------------------------------------------------------#

   Test = Returned_Test_Number
   Returned_Test_Number = 0

   [Returned_Test_Number] = coloured2:Regression_Tests[Test]

#-------------------------------------------------------------------------------------------#
# Perform further creation tests, using Dr.Who, several enemies and the odd battle or two
# as meaningful objects.
#-------------------------------------------------------------------------------------------#

Test = Returned_Test_Number
Returned_Test_Number = 0

[Returned_Test_Number] = dr1:Test_the_Doctors_Mettle[Test]

#-------------------------------------------------------------------------------------------#

',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,1 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000145","00000000-0000-0000-0000-000000000000",'Start_Creation_Deletion_Tests',' Start Creation Deletion Tests
','[] = Creation_Deletion1::Create_Report_Object[]
',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,2 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000147","00000000-0000-0000-0000-000000000000",'Finish_Creation_Deletion_Tests',' Finish Creation Deletion Tests
','
[] = Creation_Deletion2::Delete_Report_Object[]
',"ba5eda7a-def5-0000-0000-000000000000",3,'',2,3 );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-0000000000fa","00000000-0000-0000-0000-0000000000f7",'The_Input_Value',"00000000-0000-0000-0000-0000000000b8",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-0000000000fc","00000000-0000-0000-0000-0000000000f7",'The_Return_Value',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-0000000000fa",'' );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-000000000149",1,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-00000000016e",2,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-000000000149","00000000-0000-0000-0000-00000000014d","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000060","00000000-0000-0000-0000-000000000149","00000000-0000-0000-0000-000000000156","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000076","00000000-0000-0000-0000-000000000149","00000000-0000-0000-0000-000000000169","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000081","00000000-0000-0000-0000-00000000016e","00000000-0000-0000-0000-000000000172","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-00000000016e","00000000-0000-0000-0000-00000000017b","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-0000000000a2","00000000-0000-0000-0000-00000000016e","00000000-0000-0000-0000-00000000018e","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-000000000149","00000000-0000-0000-0000-00000000014d",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-000000000060","00000000-0000-0000-0000-000000000149","00000000-0000-0000-0000-000000000156",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-000000000081","00000000-0000-0000-0000-00000000016e","00000000-0000-0000-0000-000000000172",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-00000000016e","00000000-0000-0000-0000-00000000017b",0 );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-000000000076","00000000-0000-0000-0000-000000000149","00000000-0000-0000-0000-000000000169" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-0000000000a2","00000000-0000-0000-0000-00000000016e","00000000-0000-0000-0000-00000000018e" );
INSERT INTO R_ASSOC VALUES ( "00000000-0000-0000-0000-000000000149" );
INSERT INTO R_ASSOC VALUES ( "00000000-0000-0000-0000-00000000016e" );
INSERT INTO R_AONE VALUES ( "00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-000000000149","00000000-0000-0000-0000-00000000014d",1,1,'has' );
INSERT INTO R_AONE VALUES ( "00000000-0000-0000-0000-000000000081","00000000-0000-0000-0000-00000000016e","00000000-0000-0000-0000-000000000172",0,0,'wants_to_kill' );
INSERT INTO R_AOTH VALUES ( "00000000-0000-0000-0000-000000000060","00000000-0000-0000-0000-000000000149","00000000-0000-0000-0000-000000000156",1,1,'has' );
INSERT INTO R_AOTH VALUES ( "00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-00000000016e","00000000-0000-0000-0000-00000000017b",1,0,'is_afraid_of' );
INSERT INTO R_ASSR VALUES ( "00000000-0000-0000-0000-000000000076","00000000-0000-0000-0000-000000000149","00000000-0000-0000-0000-000000000169",0 );
INSERT INTO R_ASSR VALUES ( "00000000-0000-0000-0000-0000000000a2","00000000-0000-0000-0000-00000000016e","00000000-0000-0000-0000-00000000018e",0 );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000002d",0,"00000000-0000-0000-0000-000000000029" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000030",1,"00000000-0000-0000-0000-000000000029" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000038",0,"00000000-0000-0000-0000-000000000034" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000003b",1,"00000000-0000-0000-0000-000000000034" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000043",0,"00000000-0000-0000-0000-00000000003f" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000046",1,"00000000-0000-0000-0000-00000000003f" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000004e",0,"00000000-0000-0000-0000-00000000004a" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000051",1,"00000000-0000-0000-0000-00000000004a" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000059",0,"00000000-0000-0000-0000-000000000055" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000005c",1,"00000000-0000-0000-0000-000000000055" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000064",0,"00000000-0000-0000-0000-000000000060" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000067",1,"00000000-0000-0000-0000-000000000060" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000006f",0,"00000000-0000-0000-0000-00000000006b" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000072",1,"00000000-0000-0000-0000-00000000006b" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000007a",0,"00000000-0000-0000-0000-000000000076" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000007d",1,"00000000-0000-0000-0000-000000000076" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000085",0,"00000000-0000-0000-0000-000000000081" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000088",1,"00000000-0000-0000-0000-000000000081" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000090",0,"00000000-0000-0000-0000-00000000008c" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000093",1,"00000000-0000-0000-0000-00000000008c" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000009b",0,"00000000-0000-0000-0000-000000000097" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000009e",1,"00000000-0000-0000-0000-000000000097" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000000a6",0,"00000000-0000-0000-0000-0000000000a2" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000000a9",1,"00000000-0000-0000-0000-0000000000a2" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000000b1",0,"00000000-0000-0000-0000-0000000000ad" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000000b4",1,"00000000-0000-0000-0000-0000000000ad" );
INSERT INTO C_C VALUES ( "00000000-0000-0000-0000-000000000023","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000000",'Creation_Deletion',' This domain deals with instance creation and deletion. It check both synchronous and asynchronous creation and deletion.
',0,"00000000-0000-0000-0000-000000000000",0,'','Creation_Deletion' );
INSERT INTO C_I VALUES ( "00000000-0000-0000-0000-0000000000ec","00000000-0000-0000-0000-000000000000",'Creation_Deletion','' );
INSERT INTO C_I VALUES ( "00000000-0000-0000-0000-0000000000ff","00000000-0000-0000-0000-000000000000",'Creation_DeletionReport_Terminator','' );
INSERT INTO C_I VALUES ( "00000000-0000-0000-0000-000000000137","00000000-0000-0000-0000-000000000000",'Creation_DeletionEnumeration_Terminator','' );
INSERT INTO C_P VALUES ( "00000000-0000-0000-0000-0000000000ee",'','Unnamed_Interface','','' );
INSERT INTO C_R VALUES ( "00000000-0000-0000-0000-000000000101",'','','Unnamed_Interface','' );
INSERT INTO C_R VALUES ( "00000000-0000-0000-0000-000000000139",'','','Unnamed_Interface','' );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-0000000000f0","00000000-0000-0000-0000-0000000000ec",0,'Create_Report_Object','',1 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-0000000000f4","00000000-0000-0000-0000-0000000000ec",0,'Delete_Report_Object','',2 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-0000000000f8","00000000-0000-0000-0000-0000000000ec",0,'Check_Enum','',3 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000103","00000000-0000-0000-0000-0000000000ff",0,'Start_Test','',1 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-00000000010a","00000000-0000-0000-0000-0000000000ff",0,'Test_Passed','',2 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-00000000010f","00000000-0000-0000-0000-0000000000ff",0,'Test_Failed','',3 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000114","00000000-0000-0000-0000-0000000000ff",0,'Test_Unsupported','',4 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000117","00000000-0000-0000-0000-0000000000ff",0,'Test_Text','',5 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-00000000011b","00000000-0000-0000-0000-0000000000ff",0,'Domain_Test_Start','',6 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-00000000011e","00000000-0000-0000-0000-0000000000ff",0,'Domain_Test_Finished','',7 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000122","00000000-0000-0000-0000-0000000000ff",0,'Specify_Requid','',8 );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-00000000013b","00000000-0000-0000-0000-000000000137",0,'Big_Bridge_Test','',1 );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-0000000000f0","ba5eda7a-def5-0000-0000-000000000000",'Create_Report_Object','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-0000000000f4","ba5eda7a-def5-0000-0000-000000000000",'Delete_Report_Object','',0,'',"00000000-0000-0000-0000-0000000000f0" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-0000000000f8","ba5eda7a-def5-0000-0000-000000000000",'Check_Enum','',0,'',"00000000-0000-0000-0000-0000000000f4" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000103","ba5eda7a-def5-0000-0000-000000000000",'Start_Test','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-00000000010a","ba5eda7a-def5-0000-0000-000000000000",'Test_Passed','',0,'',"00000000-0000-0000-0000-000000000103" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-00000000010f","ba5eda7a-def5-0000-0000-000000000000",'Test_Failed','',0,'',"00000000-0000-0000-0000-00000000010a" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000114","ba5eda7a-def5-0000-0000-000000000000",'Test_Unsupported','',0,'',"00000000-0000-0000-0000-00000000010f" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000117","ba5eda7a-def5-0000-0000-000000000000",'Test_Text','',0,'',"00000000-0000-0000-0000-000000000114" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-00000000011b","ba5eda7a-def5-0000-0000-000000000000",'Domain_Test_Start','',0,'',"00000000-0000-0000-0000-000000000117" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-00000000011e","ba5eda7a-def5-0000-0000-000000000000",'Domain_Test_Finished','',0,'',"00000000-0000-0000-0000-00000000011b" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000122","ba5eda7a-def5-0000-0000-000000000000",'Specify_Requid','',0,'',"00000000-0000-0000-0000-00000000011e" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-00000000013b","ba5eda7a-def5-0000-0000-000000000000",'Big_Bridge_Test','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000000fb","00000000-0000-0000-0000-0000000000f8","00000000-0000-0000-0000-0000000000b8",'The_Input_Value','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000000fd","00000000-0000-0000-0000-0000000000f8","ba5eda7a-def5-0000-0000-000000000002",'The_Return_Value','',1,'',"00000000-0000-0000-0000-0000000000fb" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000105","00000000-0000-0000-0000-000000000103","ba5eda7a-def5-0000-0000-000000000002",'Test_Number','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000106","00000000-0000-0000-0000-000000000103","ba5eda7a-def5-0000-0000-000000000004",'Requid','',0,'',"00000000-0000-0000-0000-000000000105" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000107","00000000-0000-0000-0000-000000000103","ba5eda7a-def5-0000-0000-000000000004",'Invoking_Domain','',0,'',"00000000-0000-0000-0000-000000000106" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000108","00000000-0000-0000-0000-000000000103","ba5eda7a-def5-0000-0000-000000000004",'Invoking_Object','',0,'',"00000000-0000-0000-0000-000000000107" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000109","00000000-0000-0000-0000-000000000103","ba5eda7a-def5-0000-0000-000000000004",'Purpose','',0,'',"00000000-0000-0000-0000-000000000108" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000010c","00000000-0000-0000-0000-00000000010a","ba5eda7a-def5-0000-0000-000000000004",'Test_Object_Domain','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000010d","00000000-0000-0000-0000-00000000010a","ba5eda7a-def5-0000-0000-000000000002",'Test_Number','',0,'',"00000000-0000-0000-0000-00000000010c" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000010e","00000000-0000-0000-0000-00000000010a","ba5eda7a-def5-0000-0000-000000000002",'Test_Value','',0,'',"00000000-0000-0000-0000-00000000010d" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000111","00000000-0000-0000-0000-00000000010f","ba5eda7a-def5-0000-0000-000000000004",'Failed_Domain_Object','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000112","00000000-0000-0000-0000-00000000010f","ba5eda7a-def5-0000-0000-000000000002",'Failed_Test_Number','',0,'',"00000000-0000-0000-0000-000000000111" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000113","00000000-0000-0000-0000-00000000010f","ba5eda7a-def5-0000-0000-000000000002",'Failed_Test_Value','',0,'',"00000000-0000-0000-0000-000000000112" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000116","00000000-0000-0000-0000-000000000114","ba5eda7a-def5-0000-0000-000000000002",'Unsupported_Test_Number','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000119","00000000-0000-0000-0000-000000000117","ba5eda7a-def5-0000-0000-000000000002",'Test_Number','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000011a","00000000-0000-0000-0000-000000000117","ba5eda7a-def5-0000-0000-000000000004",'Free_Text','',0,'',"00000000-0000-0000-0000-000000000119" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000011d","00000000-0000-0000-0000-00000000011b","ba5eda7a-def5-0000-0000-000000000004",'This_Domain_Name','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000120","00000000-0000-0000-0000-00000000011e","ba5eda7a-def5-0000-0000-000000000004",'This_Domain_Name','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000121","00000000-0000-0000-0000-00000000011e","ba5eda7a-def5-0000-0000-000000000002",'This_Domain_Number','',0,'',"00000000-0000-0000-0000-000000000120" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000124","00000000-0000-0000-0000-000000000122","ba5eda7a-def5-0000-0000-000000000002",'Requid_Test_Number','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000125","00000000-0000-0000-0000-000000000122","ba5eda7a-def5-0000-0000-000000000004",'The_Requid_Itself','',0,'',"00000000-0000-0000-0000-000000000124" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000013d","00000000-0000-0000-0000-00000000013b","ba5eda7a-def5-0000-0000-000000000002",'Test','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_IR VALUES ( "00000000-0000-0000-0000-0000000000ee","00000000-0000-0000-0000-0000000000ec","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-0000000000ef" );
INSERT INTO C_IR VALUES ( "00000000-0000-0000-0000-000000000101","00000000-0000-0000-0000-0000000000ff","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000102" );
INSERT INTO C_IR VALUES ( "00000000-0000-0000-0000-000000000139","00000000-0000-0000-0000-000000000137","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-00000000013a" );
INSERT INTO C_PO VALUES ( "00000000-0000-0000-0000-0000000000ef","00000000-0000-0000-0000-000000000023",'Creation_Deletion',0,0,'' );
INSERT INTO C_PO VALUES ( "00000000-0000-0000-0000-000000000102","00000000-0000-0000-0000-000000000023",'Report_Terminator',0,0,'RPT' );
INSERT INTO C_PO VALUES ( "00000000-0000-0000-0000-00000000013a","00000000-0000-0000-0000-000000000023",'Enumeration_Terminator',0,0,'ENUM' );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-000000000126","00000000-0000-0000-0000-000000000103","00000000-0000-0000-0000-000000000101" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-000000000128","00000000-0000-0000-0000-00000000010a","00000000-0000-0000-0000-000000000101" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-00000000012a","00000000-0000-0000-0000-00000000010f","00000000-0000-0000-0000-000000000101" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-00000000012c","00000000-0000-0000-0000-000000000114","00000000-0000-0000-0000-000000000101" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-00000000012e","00000000-0000-0000-0000-000000000117","00000000-0000-0000-0000-000000000101" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-000000000130","00000000-0000-0000-0000-00000000011b","00000000-0000-0000-0000-000000000101" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-000000000132","00000000-0000-0000-0000-00000000011e","00000000-0000-0000-0000-000000000101" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-000000000134","00000000-0000-0000-0000-000000000122","00000000-0000-0000-0000-000000000101" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-00000000013e","00000000-0000-0000-0000-00000000013b","00000000-0000-0000-0000-000000000139" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-0000000003bd","00000000-0000-0000-0000-0000000000f0","00000000-0000-0000-0000-0000000000ee" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-0000000003bf","00000000-0000-0000-0000-0000000000f4","00000000-0000-0000-0000-0000000000ee" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-0000000003c1","00000000-0000-0000-0000-0000000000f8","00000000-0000-0000-0000-0000000000ee" );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-000000000126",'','','',3,2,1 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-000000000128",'','','',3,2,2 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-00000000012a",'','','',3,2,3 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-00000000012c",'','','',3,2,4 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-00000000012e",'','','',3,2,5 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-000000000130",'','','',3,2,6 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-000000000132",'','','',3,2,7 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-000000000134",'','','',3,2,8 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-00000000013e",'','','',3,2,1 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-0000000003bd",'','','',3,6,0 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-0000000003bf",'','','',3,6,0 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-0000000003c1",'','','',3,6,0 );
INSERT INTO SM_SM VALUES ( "00000000-0000-0000-0000-00000000021e",'',0 );
INSERT INTO SM_SM VALUES ( "00000000-0000-0000-0000-000000000353",'',0 );
INSERT INTO SM_STATE VALUES ( "00000000-0000-0000-0000-000000000226","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000",'Instance_creation',1,0 );
INSERT INTO SM_STATE VALUES ( "00000000-0000-0000-0000-00000000022f","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000",'Verify_instance_creation',3,0 );
INSERT INTO SM_STATE VALUES ( "00000000-0000-0000-0000-000000000238","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000",'Fail',4,0 );
INSERT INTO SM_STATE VALUES ( "00000000-0000-0000-0000-000000000241","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000",'Passed',5,0 );
INSERT INTO SM_STATE VALUES ( "00000000-0000-0000-0000-00000000035b","00000000-0000-0000-0000-000000000353","00000000-0000-0000-0000-000000000000",'Idle',1,0 );
INSERT INTO SM_STATE VALUES ( "00000000-0000-0000-0000-000000000364","00000000-0000-0000-0000-000000000353","00000000-0000-0000-0000-000000000000",'Deletion_in_a_terminal_state',2,1 );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-00000000024a","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000",1,'StartA',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-00000000026a","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000",2,'Creation_Complete',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000288","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000",3,'Fault',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-0000000002a6","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000",4,'StartB',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-0000000002c6","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000",5,'It_passed',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-00000000036d","00000000-0000-0000-0000-000000000353","00000000-0000-0000-0000-000000000000",3,'StartA',0,'','','' );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-000000000226","00000000-0000-0000-0000-00000000024a","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-00000000022f","00000000-0000-0000-0000-00000000024a","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-000000000238","00000000-0000-0000-0000-00000000024a","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-000000000241","00000000-0000-0000-0000-00000000024a","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-000000000226","00000000-0000-0000-0000-00000000026a","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-00000000022f","00000000-0000-0000-0000-00000000026a","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-000000000238","00000000-0000-0000-0000-00000000026a","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-000000000241","00000000-0000-0000-0000-00000000026a","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-000000000226","00000000-0000-0000-0000-000000000288","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-00000000022f","00000000-0000-0000-0000-000000000288","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-000000000238","00000000-0000-0000-0000-000000000288","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-000000000241","00000000-0000-0000-0000-000000000288","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-000000000226","00000000-0000-0000-0000-0000000002a6","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-00000000022f","00000000-0000-0000-0000-0000000002a6","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-000000000238","00000000-0000-0000-0000-0000000002a6","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-000000000241","00000000-0000-0000-0000-0000000002a6","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-000000000226","00000000-0000-0000-0000-0000000002c6","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-00000000022f","00000000-0000-0000-0000-0000000002c6","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-000000000238","00000000-0000-0000-0000-0000000002c6","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-000000000241","00000000-0000-0000-0000-0000000002c6","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-00000000035b","00000000-0000-0000-0000-00000000036d","00000000-0000-0000-0000-000000000353","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-000000000364","00000000-0000-0000-0000-00000000036d","00000000-0000-0000-0000-000000000353","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_NSTXN VALUES ( "00000000-0000-0000-0000-0000000002ee","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000226","00000000-0000-0000-0000-0000000002a6","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_NSTXN VALUES ( "00000000-0000-0000-0000-0000000002fc","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-00000000022f","00000000-0000-0000-0000-000000000288","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_NSTXN VALUES ( "00000000-0000-0000-0000-00000000030a","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-00000000022f","00000000-0000-0000-0000-0000000002c6","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_NSTXN VALUES ( "00000000-0000-0000-0000-00000000037f","00000000-0000-0000-0000-000000000353","00000000-0000-0000-0000-00000000035b","00000000-0000-0000-0000-00000000036d","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EIGN VALUES ( "00000000-0000-0000-0000-000000000241","00000000-0000-0000-0000-000000000288","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_EIGN VALUES ( "00000000-0000-0000-0000-000000000241","00000000-0000-0000-0000-0000000002a6","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_EIGN VALUES ( "00000000-0000-0000-0000-000000000241","00000000-0000-0000-0000-0000000002c6","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-000000000226","00000000-0000-0000-0000-00000000024a","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-00000000022f","00000000-0000-0000-0000-00000000024a","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-000000000238","00000000-0000-0000-0000-00000000024a","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-000000000241","00000000-0000-0000-0000-00000000024a","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-000000000226","00000000-0000-0000-0000-00000000026a","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-00000000022f","00000000-0000-0000-0000-00000000026a","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-000000000238","00000000-0000-0000-0000-00000000026a","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-000000000241","00000000-0000-0000-0000-00000000026a","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-000000000226","00000000-0000-0000-0000-000000000288","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-000000000238","00000000-0000-0000-0000-000000000288","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-00000000022f","00000000-0000-0000-0000-0000000002a6","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-000000000238","00000000-0000-0000-0000-0000000002a6","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-000000000226","00000000-0000-0000-0000-0000000002c6","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-000000000238","00000000-0000-0000-0000-0000000002c6","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-000000000364","00000000-0000-0000-0000-00000000036d","00000000-0000-0000-0000-000000000353","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_TXN VALUES ( "00000000-0000-0000-0000-0000000002e4","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000226","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_TXN VALUES ( "00000000-0000-0000-0000-0000000002ee","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-00000000022f","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_TXN VALUES ( "00000000-0000-0000-0000-0000000002fc","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000238","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_TXN VALUES ( "00000000-0000-0000-0000-00000000030a","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000241","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_TXN VALUES ( "00000000-0000-0000-0000-00000000037f","00000000-0000-0000-0000-000000000353","00000000-0000-0000-0000-000000000364","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_CRTXN VALUES ( "00000000-0000-0000-0000-0000000002e4","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-00000000024a","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_MOORE VALUES ( "00000000-0000-0000-0000-00000000021e" );
INSERT INTO SM_MOORE VALUES ( "00000000-0000-0000-0000-000000000353" );
INSERT INTO SM_MOAH VALUES ( "00000000-0000-0000-0000-000000000228","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000226" );
INSERT INTO SM_MOAH VALUES ( "00000000-0000-0000-0000-000000000231","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-00000000022f" );
INSERT INTO SM_MOAH VALUES ( "00000000-0000-0000-0000-00000000023a","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000238" );
INSERT INTO SM_MOAH VALUES ( "00000000-0000-0000-0000-000000000243","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000241" );
INSERT INTO SM_MOAH VALUES ( "00000000-0000-0000-0000-00000000035d","00000000-0000-0000-0000-000000000353","00000000-0000-0000-0000-00000000035b" );
INSERT INTO SM_MOAH VALUES ( "00000000-0000-0000-0000-000000000366","00000000-0000-0000-0000-000000000353","00000000-0000-0000-0000-000000000364" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-000000000228","00000000-0000-0000-0000-00000000021e" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-000000000231","00000000-0000-0000-0000-00000000021e" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-00000000023a","00000000-0000-0000-0000-00000000021e" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-000000000243","00000000-0000-0000-0000-00000000021e" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-0000000002e8","00000000-0000-0000-0000-00000000021e" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-0000000002f2","00000000-0000-0000-0000-00000000021e" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-000000000300","00000000-0000-0000-0000-00000000021e" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-00000000030e","00000000-0000-0000-0000-00000000021e" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-00000000035d","00000000-0000-0000-0000-000000000353" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-000000000366","00000000-0000-0000-0000-000000000353" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-000000000383","00000000-0000-0000-0000-000000000353" );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-000000000228","00000000-0000-0000-0000-00000000021e",3,'
#------------------------------------------------------------------------#

#Creation state

#------------------------------------------------------------------------#

#Creation of an instance in a creation state

[] = RPT1:Start_Test[Test, "null requid", "Creation Deletion", "objCS", "Creation State"]

#Create an instance of an object
newCS = create Creation_State with ReferenceCS = Test &\
                                   ResultCS = 0


generate objCS4:StartB(Test) to newCS


#End Test 1

#------------------------------------------------------------------------#',' This state verifies the following:
 
 	[1] Instance creation in a creation state.
',2 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-000000000231","00000000-0000-0000-0000-00000000021e",3,'
#------------------------------------------------------------------------#

#Verify instance creation

#------------------------------------------------------------------------#

#Set the fault flag, set to TRUE if a fault has been identified
Fault_Flag = FALSE

#------------------------------------------------------------------------#

[] = RPT5:Test_Text[Test,"Verify instance creation"]


   #Check that the instance that was created
   an_instanceCS = find-one Creation_State where ReferenceCS = Test

   if an_instanceCS = UNDEFINED then
      Fault_Flag = TRUE
   else
      this.ResultCS = Test
   endif



   #------------------------------------------------------------------------#

   #Test complete
   if Fault_Flag = FALSE then
		         	    
      [] = RPT2:Test_Passed["objCS", Test, 0]

      generate objCS5:It_passed() to this

   else
		         	    
      [] = RPT3:Test_Failed["objCS", Test, -1]

      generate objCS3:Fault() to this

   endif


#------------------------------------------------------------------------#
',' This state verifies that instance creation within
 a creation state is successful.
',2 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-00000000023a","00000000-0000-0000-0000-00000000021e",3,'###### There is no ASL for this state ######',' An instance current state is changed to fail
 if the test failed.
',2 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-000000000243","00000000-0000-0000-0000-00000000021e",3,'','',0 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-0000000002e8","00000000-0000-0000-0000-00000000021e",3,'','',6 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-0000000002f2","00000000-0000-0000-0000-00000000021e",3,'','',6 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-000000000300","00000000-0000-0000-0000-00000000021e",3,'','',6 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-00000000030e","00000000-0000-0000-0000-00000000021e",3,'','',6 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-00000000035d","00000000-0000-0000-0000-000000000353",3,'###### There is no ASL for this state ######',' Idle state.
 No action taken.
',2 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-000000000366","00000000-0000-0000-0000-000000000353",3,'#------------------------------------------------------------------------#
# Deletion in a termination state
#------------------------------------------------------------------------#

   # The following ASL is valid for all tests
   Test = this.ReferenceTS

   [] = RPT1:Start_Test[Test, "1241-0000-01-0206", "Creation Deletion", "Termination State", "Deletion test"]

   # Delete the current instance
   delete this

   # verify the deletion was sucessful
   [] = objTS1:verify_deletion[Test]

#------------------------------------------------------------------------#',' This state verifies the following:
 
 	[1] Deletion of own instance
 	
',2 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-000000000383","00000000-0000-0000-0000-000000000353",3,'','',6 );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-000000000268","00000000-0000-0000-0000-00000000021e",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-00000000024a","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-0000000002c4","00000000-0000-0000-0000-00000000021e",'Test','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-0000000002a6","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_ISM VALUES ( "00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-00000000006b" );
INSERT INTO SM_ISM VALUES ( "00000000-0000-0000-0000-000000000353","00000000-0000-0000-0000-00000000008c" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-00000000024a","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-00000000026a","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000288","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-0000000002a6","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-0000000002c6","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-00000000036d","00000000-0000-0000-0000-000000000353","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-00000000024a","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-00000000026a","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000288","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-0000000002a6","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-0000000002c6","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-00000000036d","00000000-0000-0000-0000-000000000353","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_TAH VALUES ( "00000000-0000-0000-0000-0000000002e8","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-0000000002e4" );
INSERT INTO SM_TAH VALUES ( "00000000-0000-0000-0000-0000000002f2","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-0000000002ee" );
INSERT INTO SM_TAH VALUES ( "00000000-0000-0000-0000-000000000300","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-0000000002fc" );
INSERT INTO SM_TAH VALUES ( "00000000-0000-0000-0000-00000000030e","00000000-0000-0000-0000-00000000021e","00000000-0000-0000-0000-00000000030a" );
INSERT INTO SM_TAH VALUES ( "00000000-0000-0000-0000-000000000383","00000000-0000-0000-0000-000000000353","00000000-0000-0000-0000-00000000037f" );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000004",1,"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000000",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000006",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000009",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000000c",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000000f",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000012",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000015",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000018",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000001b",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000001e",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000021",1,"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000000",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000023",1,"00000000-0000-0000-0000-000000000021","00000000-0000-0000-0000-000000000000",2 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000025",1,"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000023",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000027",1,"00000000-0000-0000-0000-000000000021","00000000-0000-0000-0000-000000000000",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000029",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000002d",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000030",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000034",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000038",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000003b",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000003f",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000043",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000046",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000004a",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000004e",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000051",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000055",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000059",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000005c",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000060",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000064",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000067",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000006b",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000006f",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000072",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000076",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000007a",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000007d",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000081",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000085",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000088",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000008c",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000090",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000093",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000097",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000009b",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000009e",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000a2",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000a6",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000a9",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000ad",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000b1",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000b4",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000b8",1,"00000000-0000-0000-0000-000000000027","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000bf",1,"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000023",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000c1",1,"00000000-0000-0000-0000-0000000000bf","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000c9",1,"00000000-0000-0000-0000-0000000000bf","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000d0",1,"00000000-0000-0000-0000-0000000000bf","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000d7",1,"00000000-0000-0000-0000-0000000000bf","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000de",1,"00000000-0000-0000-0000-0000000000bf","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000e8",1,"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000023",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000ea",1,"00000000-0000-0000-0000-0000000000e8","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000ec",1,"00000000-0000-0000-0000-000000000027","00000000-0000-0000-0000-000000000000",6 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000f3",1,"00000000-0000-0000-0000-0000000000e8","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000f7",1,"00000000-0000-0000-0000-0000000000e8","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000ff",1,"00000000-0000-0000-0000-000000000027","00000000-0000-0000-0000-000000000000",6 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000137",1,"00000000-0000-0000-0000-000000000027","00000000-0000-0000-0000-000000000000",6 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000141",1,"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000023",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000143",1,"00000000-0000-0000-0000-000000000141","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000145",1,"00000000-0000-0000-0000-000000000141","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000147",1,"00000000-0000-0000-0000-000000000141","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000149",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000016e",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO model VALUES ( 'maslin' );
INSERT INTO option VALUES ( 'maslin','actiondialect','WASL' );
INSERT INTO option VALUES ( 'maslin','projectroot','./convertdir/Creation_Deletion/' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000006","00000000-0000-0000-0000-000000000000",'MASLtype','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000009","00000000-0000-0000-0000-000000000000",'MASLunique','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000000c","00000000-0000-0000-0000-000000000000",'device','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000000f","00000000-0000-0000-0000-000000000000",'duration','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000012","00000000-0000-0000-0000-000000000000",'wstring','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000015","00000000-0000-0000-0000-000000000000",'long_integer','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000018","00000000-0000-0000-0000-000000000000",'byte','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000001b","00000000-0000-0000-0000-000000000000",'wcharacter','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000001e","00000000-0000-0000-0000-000000000000",'character','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000002d","00000000-0000-0000-0000-000000000000",'inst_ref<Object_A>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000030","00000000-0000-0000-0000-000000000000",'inst_ref_set<Object_A>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000038","00000000-0000-0000-0000-000000000000",'inst_ref<Object_B>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000003b","00000000-0000-0000-0000-000000000000",'inst_ref_set<Object_B>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000043","00000000-0000-0000-0000-000000000000",'inst_ref<Object_C>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000046","00000000-0000-0000-0000-000000000000",'inst_ref_set<Object_C>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000004e","00000000-0000-0000-0000-000000000000",'inst_ref<Coloured_Object>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000051","00000000-0000-0000-0000-000000000000",'inst_ref_set<Coloured_Object>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000059","00000000-0000-0000-0000-000000000000",'inst_ref<Object_D>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000005c","00000000-0000-0000-0000-000000000000",'inst_ref_set<Object_D>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000064","00000000-0000-0000-0000-000000000000",'inst_ref<Flavoured_Object>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000067","00000000-0000-0000-0000-000000000000",'inst_ref_set<Flavoured_Object>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000006f","00000000-0000-0000-0000-000000000000",'inst_ref<Creation_State>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000072","00000000-0000-0000-0000-000000000000",'inst_ref_set<Creation_State>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000007a","00000000-0000-0000-0000-000000000000",'inst_ref<Flavour_and_Colour>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000007d","00000000-0000-0000-0000-000000000000",'inst_ref_set<Flavour_and_Colour>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000085","00000000-0000-0000-0000-000000000000",'inst_ref<Doctor>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000088","00000000-0000-0000-0000-000000000000",'inst_ref_set<Doctor>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000090","00000000-0000-0000-0000-000000000000",'inst_ref<Termination_State>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000093","00000000-0000-0000-0000-000000000000",'inst_ref_set<Termination_State>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000009b","00000000-0000-0000-0000-000000000000",'inst_ref<Enemy>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000009e","00000000-0000-0000-0000-000000000000",'inst_ref_set<Enemy>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000a6","00000000-0000-0000-0000-000000000000",'inst_ref<Doctors_Enemy>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000a9","00000000-0000-0000-0000-000000000000",'inst_ref_set<Doctors_Enemy>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000b1","00000000-0000-0000-0000-000000000000",'inst_ref<Report_Data>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000b4","00000000-0000-0000-0000-000000000000",'inst_ref_set<Report_Data>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000b8","00000000-0000-0000-0000-000000000000",'Test_Enum_Type','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000c1","00000000-0000-0000-0000-000000000000",'Base_Colour',' This attribute is used to verify that an object instance can be created, when the data type uses enumeration.
','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000c9","00000000-0000-0000-0000-000000000000",'Coloured_Type','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000d0","00000000-0000-0000-0000-000000000000",'Flavoured_Type','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000d7","00000000-0000-0000-0000-000000000000",'actors_who_have_played_the_doctor','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000de","00000000-0000-0000-0000-000000000000",'battlefield_arena_type','','' );
